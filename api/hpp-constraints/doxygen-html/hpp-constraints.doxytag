<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>com-between-feet.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00043</filename>
    <includes id="a00047" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00064" name="tools.hh" local="no" imported="no">hpp/constraints/tools.hh</includes>
    <includes id="a00062" name="symbolic-calculus.hh" local="no" imported="no">hpp/constraints/symbolic-calculus.hh</includes>
    <class kind="class">hpp::constraints::ComBetweenFeet</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>configuration-constraint.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00044</filename>
    <includes id="a00047" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::ConfigurationConstraint</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>convex-shape-contact.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00045</filename>
    <includes id="a00047" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00064" name="tools.hh" local="no" imported="no">hpp/constraints/tools.hh</includes>
    <includes id="a00046" name="convex-shape.hh" local="no" imported="no">hpp/constraints/convex-shape.hh</includes>
    <includes id="a00001" name="fwd.hh" local="yes" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::ConvexShapeContact</class>
    <class kind="struct">hpp::constraints::ConvexShapeContact::ForceData</class>
    <class kind="class">hpp::constraints::ConvexShapeContactComplement</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>convex-shape.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00046</filename>
    <includes id="a00047" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00064" name="tools.hh" local="no" imported="no">hpp/constraints/tools.hh</includes>
    <includes id="a00001" name="fwd.hh" local="yes" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::ConvexShape</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <member kind="function">
      <type>void</type>
      <name>closestPointToSegment</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aa52ba6e7c7b5f4aa5a009f8b1b32cee7</anchor>
      <arglist>(const fcl::Vec3f &amp;P, const fcl::Vec3f &amp;A, const fcl::Vec3f &amp;v, fcl::Vec3f &amp;B)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>differentiable-function.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00047</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::DifferentiableFunction</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga962ff736acd3e22ec80fd5c21a729c26</anchor>
      <arglist>(std::ostream &amp;os, const DifferentiableFunction &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>distance-between-bodies.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00048</filename>
    <includes id="a00047" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <class kind="class">hpp::constraints::DistanceBetweenBodies</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>distance-between-points-in-bodies.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00049</filename>
    <includes id="a00047" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <class kind="class">hpp::constraints::DistanceBetweenPointsInBodies</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>fwd.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00001</filename>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <namespace>hpp::constraints::eigen</namespace>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
      <name>matrix3_t</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a6797f92ee716e5e8f825dfd48ba2e08e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 1 &gt;</type>
      <name>vector3_t</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ae36a3b62b49767aeb30c2ec93fc003d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 5, 1 &gt;</type>
      <name>vector5_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a61a6190065778aa215303d3b8a503f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::ObjectVector_t</type>
      <name>ObjectVector_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a5e4936b13bab4df6417026cf9e5e414c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::CollisionObjectPtr_t</type>
      <name>CollisionObjectPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad92daab926d11ed6b15471e78f0a6ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::Configuration_t</type>
      <name>Configuration_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad36515bd361fd258285842071dce99ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::ConfigurationIn_t</type>
      <name>ConfigurationIn_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a418980181fabf52dfc9b96a388a5d2a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::ConfigurationOut_t</type>
      <name>ConfigurationOut_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3dc7a35f0d4f9cd3f71aa0e6b289f530</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::Device</type>
      <name>Device</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ac53c0ab01c98e6eda22b116505814076</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::DevicePtr_t</type>
      <name>DevicePtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a7a61439cf039f5105a594e28c45376d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::CenterOfMassComputation</type>
      <name>CenterOfMassComputation</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aa30c4c20f61e31eb4d07bf2ff32490d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::CenterOfMassComputationPtr_t</type>
      <name>CenterOfMassComputationPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad6f0521e0ec0b0879f40b1ad07171278</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DifferentiableFunction &gt;</type>
      <name>DifferentiableFunctionPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af86fed84ae43e85f9e8643a5af42feb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::size_type</type>
      <name>size_type</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af93e03020b02d95109a6de6d72bd4e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::value_type</type>
      <name>value_type</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a7edbf4e735704ab9334f587122a292f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::JointPtr_t</type>
      <name>JointPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a882997f2edbb98ca7ce9db52aaab0bd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::vector3_t</type>
      <name>vector3_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>afb829a8e1f55ae982a2cabc013a13e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::matrix3_t</type>
      <name>matrix3_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a0084c48241b48e4c72f60d16247f4461</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::matrix_t</type>
      <name>matrix_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ade7dd4334133747a4f601e0e0e685779</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; const matrix_t &gt;</type>
      <name>matrixIn_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>adda38afd03d9829e1f876c58eec0c9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; matrix_t &gt;</type>
      <name>matrixOut_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ac27371d812fbe3af3375c781f7cd5e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::vector_t</type>
      <name>vector_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af083ddca1bc82df1ee39b487a58bbd00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::vectorIn_t</type>
      <name>vectorIn_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a610ddbc627eb91f8b130869746ab8bf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::vectorOut_t</type>
      <name>vectorOut_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a766ab9d00c7942a4a88a173fcb855156</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::ComJacobian_t</type>
      <name>ComJacobian_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a82cf992dbcda9db8439f97d9757b0938</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::JointJacobian_t</type>
      <name>JointJacobian_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a75f2b45df65a743e2acbd287b6d85cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::Transform3f</type>
      <name>Transform3f</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a20062c5987b884c903dbb5c7db6a2bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DistanceBetweenBodies &gt;</type>
      <name>DistanceBetweenBodiesPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae8aa66db0f13be7f030a9786660cbd50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DistanceBetweenPointsInBodies &gt;</type>
      <name>DistanceBetweenPointsInBodiesPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a15ee3f237e65b880c44706b41a8f8a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Orientation &gt;</type>
      <name>OrientationPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>adaa3650e7328397eafdf880365e314c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Position &gt;</type>
      <name>PositionPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>adb8f4d210fca36e53a12b5eb3960ece6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Transformation &gt;</type>
      <name>TransformationPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a26c24f12d8ffb5c4f2572dc6e4773d60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativeOrientation &gt;</type>
      <name>RelativeOrientationPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>acba64d3d130ab6869c5e2e5f566e0431</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativeCom &gt;</type>
      <name>RelativeComPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a4684a56a58b53b91a25746d4edff4650</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ComBetweenFeet &gt;</type>
      <name>ComBetweenFeetPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a935f1eb16b84796192b86a91af021419</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativePosition &gt;</type>
      <name>RelativePositionPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ac0bc5df5ffd19f9dec87b96e76afd819</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativeTransformation &gt;</type>
      <name>RelativeTransformationPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af4db8d10953253fa720cae60e5f6bdcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConvexShapeContact &gt;</type>
      <name>ConvexShapeContactPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aa74ca38325b6bc6dc38657cd1c80c755</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConvexShapeContactComplement &gt;</type>
      <name>ConvexShapeContactComplementPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a0f8a402193410e7679ea2a7c9178414d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; StaticStability &gt;</type>
      <name>StaticStabilityPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad54fc72681dcd79a25c2b77bac619b71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; QPStaticStability &gt;</type>
      <name>QPStaticStabilityPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3dd563dbf1b5b8560d2beb62bef7b00f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigurationConstraint &gt;</type>
      <name>ConfigurationConstraintPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a4830fba26342da49bd199af4a2411344</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_DEPRECATED ConvexShapeContact</type>
      <name>StaticStabilityGravity</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af95c1f506b5959e248368885afd5f653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_DEPRECATED ConvexShapeContactComplement</type>
      <name>StaticStabilityGravityComplement</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a9856a331291063d631db35a3ae6255e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_DEPRECATED ConvexShapeContactPtr_t</type>
      <name>StaticStabilityGravityPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a490b1e61263165c09c5fcd3773b59e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_DEPRECATED ConvexShapeContactComplementPtr_t</type>
      <name>StaticStabilityGravityComplementPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>abe9fe9175df03855de4dddf730839b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a2b81f2c271a0cb8efa89e0ac8c549e80</anchor>
      <arglist>(DifferentiableFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ac1d4300ab7f40d189e6ecbf85d25c47c</anchor>
      <arglist>(DistanceBetweenBodies)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a9e64bad770c2cae3d8ae20097fbb59df</anchor>
      <arglist>(DistanceBetweenPointsInBodies)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ac841734490995e86f7ba900df8dbb5eb</anchor>
      <arglist>(Orientation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>abc4053774f96bc739dcc057973d2635f</anchor>
      <arglist>(Position)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a181d4d2bf4b8e812d0ef2d44f7086fd1</anchor>
      <arglist>(Transformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a48f490d8993173637421d83ed6dd5ea9</anchor>
      <arglist>(RelativeCom)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad9d3264a2664eae8b6a746bef9257444</anchor>
      <arglist>(ComBetweenFeet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3304543b7c9634e1727839682df05dee</anchor>
      <arglist>(RelativeOrientation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aff3a1d48c1e21b009022563fda0d9958</anchor>
      <arglist>(RelativePosition)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a07bdd7a5317a2dd8781f39c92ffc2642</anchor>
      <arglist>(RelativeTransformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3e6a69d9efcf95fb24bc700c44d4c07c</anchor>
      <arglist>(StaticStability)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a313654249287e5a86d3d216006831fcf</anchor>
      <arglist>(QPStaticStability)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad502d2cbbe178f788ae742865de9928c</anchor>
      <arglist>(ConvexShapeContact)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae4d24e70d40b78704b406ee378a0da13</anchor>
      <arglist>(ConvexShapeContactComplement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>afc4e6e75743061bf13439d2e971ba412</anchor>
      <arglist>(ConfigurationConstraint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>generic-transformation.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00050</filename>
    <includes id="a00047" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::GenericTransformation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <member kind="typedef">
      <type>GenericTransformation&lt; PositionBit|OrientationBit &gt;</type>
      <name>Transformation2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>gaa150d4ab5c8f3858772af332f3d4ba79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; PositionBit &gt;</type>
      <name>Position2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga298f3bce23cfd4b26908a780f6d54bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; OrientationBit &gt;</type>
      <name>Orientation2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga7a6a28aa4fd89aa0eeb7b7fc79eae66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|PositionBit|OrientationBit &gt;</type>
      <name>RelativeTransformation2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>gab4b0536c297c0603f0e53e451e80c8f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|PositionBit &gt;</type>
      <name>RelativePosition2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga0af548908917b580d64f1deca42ca5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|OrientationBit &gt;</type>
      <name>RelativeOrientation2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga80bfc99b3d0a24672ad3d20e270255c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>RelativeBit</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad0937f491bf9d868c367f8e5b1534459</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PositionBit</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad70b41ea2207fcc52850cbfe5444b44d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>OrientationBit</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad210c3ef69740ea4722aac40214b2b33</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>macros.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00051</filename>
    <member kind="define">
      <type>#define</type>
      <name>HPP_DEBUG_SVDCHECK</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a9dca9fd566ae0400a4b4c5d9b3863b50</anchor>
      <arglist>(svd)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hppDnum</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a581daf82c1d48db5d77d21f467a470c9</anchor>
      <arglist>(channel, data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main-page.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/doc/</path>
    <filename>a00052</filename>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>orientation.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00053</filename>
    <includes id="a00047" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::Orientation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>position.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00054</filename>
    <includes id="a00047" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::Position</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>qp-static-stability.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00055</filename>
    <includes id="a00047" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00045" name="convex-shape-contact.hh" local="no" imported="no">hpp/constraints/convex-shape-contact.hh</includes>
    <includes id="a00060" name="static-stability.hh" local="no" imported="no">hpp/constraints/static-stability.hh</includes>
    <includes id="a00064" name="tools.hh" local="no" imported="no">hpp/constraints/tools.hh</includes>
    <includes id="a00001" name="fwd.hh" local="yes" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::QPStaticStability</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>relative-com.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00056</filename>
    <includes id="a00047" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::RelativeCom</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>relative-orientation.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00057</filename>
    <includes id="a00047" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <class kind="class">hpp::constraints::RelativeOrientation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>relative-position.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00058</filename>
    <includes id="a00047" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::RelativePosition</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>relative-transformation.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00059</filename>
    <includes id="a00047" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00057" name="relative-orientation.hh" local="no" imported="no">hpp/constraints/relative-orientation.hh</includes>
    <includes id="a00058" name="relative-position.hh" local="no" imported="no">hpp/constraints/relative-position.hh</includes>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::RelativeTransformation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>static-stability.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00060</filename>
    <includes id="a00047" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00064" name="tools.hh" local="no" imported="no">hpp/constraints/tools.hh</includes>
    <includes id="a00062" name="symbolic-calculus.hh" local="no" imported="no">hpp/constraints/symbolic-calculus.hh</includes>
    <includes id="a00001" name="fwd.hh" local="yes" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::StaticStability</class>
    <class kind="struct">hpp::constraints::StaticStability::Contact_t</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>svd.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00061</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <member kind="function" static="yes">
      <type>static Eigen::Ref&lt; const typename SVD::MatrixUType &gt;</type>
      <name>getU1</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>abca6a7c1ea3c15b230e798637fb1a245</anchor>
      <arglist>(const SVD &amp;svd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Eigen::Ref&lt; const typename SVD::MatrixUType &gt;</type>
      <name>getU2</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>abf280a90f74763a56a73baa51c3c18fc</anchor>
      <arglist>(const SVD &amp;svd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Eigen::Ref&lt; const typename SVD::MatrixUType &gt;</type>
      <name>getV1</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a20e41db5887dcc0e521376456df05ea8</anchor>
      <arglist>(const SVD &amp;svd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Eigen::Ref&lt; const typename SVD::MatrixUType &gt;</type>
      <name>getV2</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aaa66e5f73e2d74e66d6a6b8294a89e1d</anchor>
      <arglist>(const SVD &amp;svd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>pseudoInverse</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aee7a1aa205ea73b31df2424a77648e45</anchor>
      <arglist>(const SVD &amp;svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; pinvmat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectorOnSpan</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a1900d47920ae44fadb39669ebe4096b6</anchor>
      <arglist>(const SVD svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; projector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectorOnSpanOfInv</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae6d5afc01c0e5557d34bd75629dfe310</anchor>
      <arglist>(const SVD svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; projector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectorOnKernel</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a223f6574faa0cbaf988a6019af37f06e</anchor>
      <arglist>(const SVD svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; projector, const bool &amp;computeFullV=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectorOnKernelOfInv</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a27dacc558cfd1909beb691e1d1e0ce47</anchor>
      <arglist>(const SVD svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; projector, const bool &amp;computeFullU=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>symbolic-calculus.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00062</filename>
    <includes id="a00001" name="fwd.hh" local="yes" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00061" name="svd.hh" local="no" imported="no">hpp/constraints/svd.hh</includes>
    <includes id="a00064" name="tools.hh" local="no" imported="no">hpp/constraints/tools.hh</includes>
    <includes id="a00051" name="macros.hh" local="no" imported="no">hpp/constraints/macros.hh</includes>
    <class kind="class">hpp::constraints::CalculusBaseAbstract</class>
    <class kind="struct">hpp::constraints::Traits</class>
    <class kind="class">hpp::constraints::Expression</class>
    <class kind="class">hpp::constraints::CrossProduct</class>
    <class kind="class">hpp::constraints::ScalarProduct</class>
    <class kind="class">hpp::constraints::Difference</class>
    <class kind="class">hpp::constraints::Sum</class>
    <class kind="class">hpp::constraints::ScalarMultiply</class>
    <class kind="class">hpp::constraints::RotationMultiply</class>
    <class kind="struct">hpp::constraints::Traits</class>
    <class kind="struct">hpp::constraints::Traits&lt; value_type &gt;</class>
    <class kind="struct">hpp::constraints::Traits&lt; model::Joint &gt;</class>
    <class kind="struct">hpp::constraints::JointTranspose</class>
    <class kind="struct">hpp::constraints::Traits&lt; JointTranspose &gt;</class>
    <class kind="class">hpp::constraints::CalculusBaseAbstract</class>
    <class kind="class">hpp::constraints::CalculusBase</class>
    <class kind="class">hpp::constraints::Expression</class>
    <class kind="class">hpp::constraints::CrossProduct</class>
    <class kind="class">hpp::constraints::ScalarProduct</class>
    <class kind="class">hpp::constraints::Difference</class>
    <class kind="class">hpp::constraints::Sum</class>
    <class kind="class">hpp::constraints::ScalarMultiply</class>
    <class kind="class">hpp::constraints::RotationMultiply</class>
    <class kind="class">hpp::constraints::PointInJoint</class>
    <class kind="class">hpp::constraints::VectorInJoint</class>
    <class kind="class">hpp::constraints::Point</class>
    <class kind="class">hpp::constraints::PointCom</class>
    <class kind="class">hpp::constraints::JointFrame</class>
    <class kind="class">hpp::constraints::MatrixOfExpressions</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CONSTRAINTS_CB_REF</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a2322a6d699498039456237abad5513a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CONSTRAINTS_CB_WKREF</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a5abaaf46598b1afcba4193c76fec4727</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CONSTRAINTS_CB_DEFINE_OPERATOR1</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a49c95f722a7570e58c36c8c07daf1638</anchor>
      <arglist>(op, InType, OutType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CONSTRAINTS_CB_FRIEND_OPERATOR1</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aad89646aea2acb359a8573f97091035f</anchor>
      <arglist>(op, InType, OutType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CONSTRAINTS_CB_DEFINE_OPERATOR2</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a61a117d80be4ecb51ded261d5d606bc6</anchor>
      <arglist>(op, OutType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CONSTRAINTS_CB_FRIEND_OPERATOR2</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a6af189249144893eb245167eda460edc</anchor>
      <arglist>(op, OutType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CONSTRAINTS_CB_CREATE1</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a17a09ab7ba2ce4a46d9b4e37a4b220da</anchor>
      <arglist>(Class, Arg0Type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CONSTRAINTS_CB_CREATE2</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a195bcfacd8c522e95989a258810ef95d</anchor>
      <arglist>(Class, Arg0Type, Arg1Type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HPP_CONSTRAINTS_CB_CREATE3</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>ae0cc30e797a5360bdd7ab58fac19269d</anchor>
      <arglist>(Class, Arg0Type, Arg1Type, Arg2Type)</arglist>
    </member>
    <member kind="typedef">
      <type>eigen::matrix3_t</type>
      <name>CrossMatrix</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>gac3ce1835b556d06ebbd5598435c1ccac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 1, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>RowJacobianMatrix</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>gac9f4b1bc8b7f541c249d43d07cf541bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 3, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>JacobianMatrix</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ga515568ec06f6831be43ab4f95c122650</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>symbolic-function.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00063</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <includes id="a00062" name="symbolic-calculus.hh" local="no" imported="no">hpp/constraints/symbolic-calculus.hh</includes>
    <includes id="a00047" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <class kind="class">hpp::constraints::SymbolicFunction</class>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
  </compound>
  <compound kind="file">
    <name>tools.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00064</filename>
    <includes id="a00001" name="fwd.hh" local="yes" imported="no">hpp/constraints/fwd.hh</includes>
    <namespace>hpp</namespace>
    <namespace>hpp::constraints</namespace>
    <member kind="function">
      <type>void</type>
      <name>computeLog</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a43dbc8703fa66f494fe5be4c438768cb</anchor>
      <arglist>(vectorOut_t result, double &amp;theta, const fcl::Matrix3f &amp;Rerror)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJlog</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a047463b927e7996b1cf82a0b2d9c50a8</anchor>
      <arglist>(const double &amp;theta, vectorIn_t r, eigen::matrix3_t &amp;Jlog)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeCrossMatrix</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aaa04907a27384cb8b798b742fa5ed369</anchor>
      <arglist>(const VectorType &amp;v, MatrixType &amp;m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OutType</type>
      <name>convert</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>abd637faeb58c7889f2c194b26207e6a1</anchor>
      <arglist>(const InType &amp;in, const std::size_t s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>transformation.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-constraints/include/hpp/constraints/</path>
    <filename>a00065</filename>
    <includes id="a00047" name="differentiable-function.hh" local="no" imported="no">hpp/constraints/differentiable-function.hh</includes>
    <includes id="a00053" name="orientation.hh" local="no" imported="no">hpp/constraints/orientation.hh</includes>
    <includes id="a00054" name="position.hh" local="no" imported="no">hpp/constraints/position.hh</includes>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/constraints/fwd.hh</includes>
    <class kind="class">hpp::constraints::Transformation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::eigen</namespace>
    <namespace>hpp::constraints</namespace>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
      <name>matrix3_t</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ac0cb6b841a46760c4304365d55253a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 1 &gt;</type>
      <name>vector3_t</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a58e5d785239b0a1cd675e29d437d1960</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::CalculusBase</name>
    <filename>a00002.html</filename>
    <templarg>T</templarg>
    <templarg>ValueType</templarg>
    <templarg>JacobianType</templarg>
    <templarg>CrossType</templarg>
    <base>hpp::constraints::CalculusBaseAbstract</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const ValueType &amp;value, const JacobianType &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType &amp;</type>
      <name>value</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const JacobianType &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a670f6ecd18743df5bca043d3616c8ca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a13cd0d3ea7559223163b364d6f2213da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossType &amp;</type>
      <name>cross</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a752a543f38918f7de0a624ed91a6cf4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; T &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueType</type>
      <name>value_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianType</type>
      <name>jacobian_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossType</type>
      <name>cross_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; CrossProduct&lt; LhsValue, RhsValue &gt; &gt;</name>
    <filename>a00002.html</filename>
    <base>CalculusBaseAbstract&lt; eigen::vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const eigen::vector3_t &amp;value, const JacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const eigen::vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a670f6ecd18743df5bca043d3616c8ca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a13cd0d3ea7559223163b364d6f2213da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a752a543f38918f7de0a624ed91a6cf4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; CrossProduct&lt; LhsValue, RhsValue &gt; &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eigen::vector3_t</type>
      <name>value_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; Difference&lt; LhsValue, RhsValue &gt; &gt;</name>
    <filename>a00002.html</filename>
    <base>CalculusBaseAbstract&lt; eigen::vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const eigen::vector3_t &amp;value, const JacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const eigen::vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a670f6ecd18743df5bca043d3616c8ca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a13cd0d3ea7559223163b364d6f2213da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a752a543f38918f7de0a624ed91a6cf4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; Difference&lt; LhsValue, RhsValue &gt; &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eigen::vector3_t</type>
      <name>value_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; JointFrame, Eigen::Matrix&lt; value_type, 6, 1 &gt;, Eigen::Matrix&lt; value_type, 6, Eigen::Dynamic &gt; &gt;</name>
    <filename>a00002.html</filename>
    <base>CalculusBaseAbstract&lt; Eigen::Matrix&lt; value_type, 6, 1 &gt;, Eigen::Matrix&lt; value_type, 6, Eigen::Dynamic &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const Eigen::Matrix&lt; value_type, 6, 1 &gt; &amp;value, const Eigen::Matrix&lt; value_type, 6, Eigen::Dynamic &gt; &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; value_type, 6, 1 &gt; &amp;</type>
      <name>value</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; value_type, 6, Eigen::Dynamic &gt; &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a670f6ecd18743df5bca043d3616c8ca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a13cd0d3ea7559223163b364d6f2213da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a752a543f38918f7de0a624ed91a6cf4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; JointFrame &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; value_type, 6, 1 &gt;</type>
      <name>value_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; value_type, 6, Eigen::Dynamic &gt;</type>
      <name>jacobian_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; MatrixOfExpressions&lt; eigen::vector3_t, JacobianMatrix &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</name>
    <filename>a00002.html</filename>
    <base>CalculusBaseAbstract&lt; Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;value, const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
      <name>value</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a670f6ecd18743df5bca043d3616c8ca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a13cd0d3ea7559223163b364d6f2213da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a752a543f38918f7de0a624ed91a6cf4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; MatrixOfExpressions&lt; eigen::vector3_t, JacobianMatrix &gt; &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>value_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>jacobian_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; MatrixOfExpressions&lt; ValueType, JacobianType &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</name>
    <filename>a00002.html</filename>
    <base>CalculusBaseAbstract&lt; Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;value, const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
      <name>value</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a670f6ecd18743df5bca043d3616c8ca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a13cd0d3ea7559223163b364d6f2213da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a752a543f38918f7de0a624ed91a6cf4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; MatrixOfExpressions&lt; ValueType, JacobianType &gt; &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>value_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>jacobian_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; Point, eigen::vector3_t, JacobianMatrix &gt;</name>
    <filename>a00002.html</filename>
    <base>CalculusBaseAbstract&lt; eigen::vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const eigen::vector3_t &amp;value, const JacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const eigen::vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a670f6ecd18743df5bca043d3616c8ca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a13cd0d3ea7559223163b364d6f2213da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a752a543f38918f7de0a624ed91a6cf4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; Point &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eigen::vector3_t</type>
      <name>value_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; PointCom &gt;</name>
    <filename>a00002.html</filename>
    <base>CalculusBaseAbstract&lt; eigen::vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const eigen::vector3_t &amp;value, const JacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const eigen::vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a670f6ecd18743df5bca043d3616c8ca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a13cd0d3ea7559223163b364d6f2213da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a752a543f38918f7de0a624ed91a6cf4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; PointCom &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eigen::vector3_t</type>
      <name>value_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; PointInJoint &gt;</name>
    <filename>a00002.html</filename>
    <base>CalculusBaseAbstract&lt; eigen::vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const eigen::vector3_t &amp;value, const JacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const eigen::vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a670f6ecd18743df5bca043d3616c8ca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a13cd0d3ea7559223163b364d6f2213da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a752a543f38918f7de0a624ed91a6cf4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; PointInJoint &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eigen::vector3_t</type>
      <name>value_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; RotationMultiply&lt; RhsValue &gt; &gt;</name>
    <filename>a00002.html</filename>
    <base>CalculusBaseAbstract&lt; eigen::vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const eigen::vector3_t &amp;value, const JacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const eigen::vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a670f6ecd18743df5bca043d3616c8ca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a13cd0d3ea7559223163b364d6f2213da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a752a543f38918f7de0a624ed91a6cf4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; RotationMultiply&lt; RhsValue &gt; &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eigen::vector3_t</type>
      <name>value_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; ScalarMultiply&lt; RhsValue &gt; &gt;</name>
    <filename>a00002.html</filename>
    <base>CalculusBaseAbstract&lt; eigen::vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const eigen::vector3_t &amp;value, const JacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const eigen::vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a670f6ecd18743df5bca043d3616c8ca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a13cd0d3ea7559223163b364d6f2213da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a752a543f38918f7de0a624ed91a6cf4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; ScalarMultiply&lt; RhsValue &gt; &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eigen::vector3_t</type>
      <name>value_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; ScalarProduct&lt; LhsValue, RhsValue &gt;, value_type, RowJacobianMatrix &gt;</name>
    <filename>a00002.html</filename>
    <base>CalculusBaseAbstract&lt; value_type, RowJacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const value_type &amp;value, const RowJacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>value</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RowJacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a670f6ecd18743df5bca043d3616c8ca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a13cd0d3ea7559223163b364d6f2213da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a752a543f38918f7de0a624ed91a6cf4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; ScalarProduct&lt; LhsValue, RhsValue &gt; &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>value_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RowJacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; Sum&lt; LhsValue, RhsValue &gt; &gt;</name>
    <filename>a00002.html</filename>
    <base>CalculusBaseAbstract&lt; eigen::vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const eigen::vector3_t &amp;value, const JacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const eigen::vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a670f6ecd18743df5bca043d3616c8ca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a13cd0d3ea7559223163b364d6f2213da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a752a543f38918f7de0a624ed91a6cf4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; Sum&lt; LhsValue, RhsValue &gt; &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eigen::vector3_t</type>
      <name>value_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBase&lt; VectorInJoint &gt;</name>
    <filename>a00002.html</filename>
    <base>CalculusBaseAbstract&lt; eigen::vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad51c7403333c34c983fac5b40b0c7d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aac6b54f8fba21a5f79ea3bc490f06498</anchor>
      <arglist>(const eigen::vector3_t &amp;value, const JacobianMatrix &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalculusBase</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a711ee0af6e56a22c5c91679c6863d1ec</anchor>
      <arglist>(const CalculusBase &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>const eigen::vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ae53a8a0da1dfcbfce394433cb473df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a12d239b507a85098ca1b7ec7806702b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a670f6ecd18743df5bca043d3616c8ca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobian</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a13cd0d3ea7559223163b364d6f2213da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8565e63e1a003dbb8b9f8ced788d291e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CrossMatrix &amp;</type>
      <name>cross</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a2a0cde64532ab878f75152f7c4cf9b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossValue</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a752a543f38918f7de0a624ed91a6cf4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab5b8b9b6065c6a4c296d78f648937ab6</anchor>
      <arglist>(const typename Traits&lt; VectorInJoint &gt;::Ptr_t &amp;ptr)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>eigen::vector3_t</type>
      <name>value_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a00e754b58be1e5da5d87e4e81acef696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JacobianMatrix</type>
      <name>jacobian_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a8e98d74e46bd6c6b1be244bf1cf4dc33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CrossMatrix</type>
      <name>cross_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ad9518d13bb4d0bf27c7ffe327fa73ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>vValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a1448a7f62ead2e8bd56a84fd2344478f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>jValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a3c5543025e0a0cd733515cc21bde479a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cValid_</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a04bfd95339a1ed99fc828be7f99435a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::CalculusBaseAbstract</name>
    <filename>a00003.html</filename>
    <templarg>ValueType</templarg>
    <templarg>JacobianType</templarg>
    <member kind="typedef">
      <type>ValueType</type>
      <name>ValueType_t</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>acb6e24f91cfcd5a50e8093bfe096fed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JacobianType</type>
      <name>JacobianType_t</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>af3c8eb1bd5465de5366f581bf3f6bec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const ValueType &amp;</type>
      <name>value</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aa2810430774b159bf2c3198e5d5b4b04</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const JacobianType &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a3e0c0a77e20cbc6a9c2aa21bafd0ecab</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeValue</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a9ff0fb54ef5b25df6f4e3d5b0b60c964</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeJacobian</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aa2bf445d9aadc90c2345af70a7dba418</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aadcfdfead2a531b242204187c186d9cd</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBaseAbstract&lt; Eigen::Matrix&lt; value_type, 6, 1 &gt;, Eigen::Matrix&lt; value_type, 6, Eigen::Dynamic &gt; &gt;</name>
    <filename>a00003.html</filename>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 6, 1 &gt;</type>
      <name>ValueType_t</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>acb6e24f91cfcd5a50e8093bfe096fed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 6, Eigen::Dynamic &gt;</type>
      <name>JacobianType_t</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>af3c8eb1bd5465de5366f581bf3f6bec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::Matrix&lt; value_type, 6, 1 &gt; &amp;</type>
      <name>value</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aa2810430774b159bf2c3198e5d5b4b04</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::Matrix&lt; value_type, 6, Eigen::Dynamic &gt; &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a3e0c0a77e20cbc6a9c2aa21bafd0ecab</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeValue</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a9ff0fb54ef5b25df6f4e3d5b0b60c964</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeJacobian</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aa2bf445d9aadc90c2345af70a7dba418</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aadcfdfead2a531b242204187c186d9cd</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBaseAbstract&lt; Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</name>
    <filename>a00003.html</filename>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>ValueType_t</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>acb6e24f91cfcd5a50e8093bfe096fed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>JacobianType_t</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>af3c8eb1bd5465de5366f581bf3f6bec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
      <name>value</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aa2810430774b159bf2c3198e5d5b4b04</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a3e0c0a77e20cbc6a9c2aa21bafd0ecab</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeValue</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a9ff0fb54ef5b25df6f4e3d5b0b60c964</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeJacobian</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aa2bf445d9aadc90c2345af70a7dba418</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aadcfdfead2a531b242204187c186d9cd</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBaseAbstract&lt; eigen::vector3_t, JacobianMatrix &gt;</name>
    <filename>a00003.html</filename>
    <member kind="typedef">
      <type>eigen::vector3_t</type>
      <name>ValueType_t</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>acb6e24f91cfcd5a50e8093bfe096fed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JacobianMatrix</type>
      <name>JacobianType_t</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>af3c8eb1bd5465de5366f581bf3f6bec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const eigen::vector3_t &amp;</type>
      <name>value</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aa2810430774b159bf2c3198e5d5b4b04</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a3e0c0a77e20cbc6a9c2aa21bafd0ecab</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeValue</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a9ff0fb54ef5b25df6f4e3d5b0b60c964</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeJacobian</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aa2bf445d9aadc90c2345af70a7dba418</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aadcfdfead2a531b242204187c186d9cd</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CalculusBaseAbstract&lt; value_type, RowJacobianMatrix &gt;</name>
    <filename>a00003.html</filename>
    <member kind="typedef">
      <type>value_type</type>
      <name>ValueType_t</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>acb6e24f91cfcd5a50e8093bfe096fed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RowJacobianMatrix</type>
      <name>JacobianType_t</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>af3c8eb1bd5465de5366f581bf3f6bec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const value_type &amp;</type>
      <name>value</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aa2810430774b159bf2c3198e5d5b4b04</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const RowJacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a3e0c0a77e20cbc6a9c2aa21bafd0ecab</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeValue</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a9ff0fb54ef5b25df6f4e3d5b0b60c964</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeJacobian</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aa2bf445d9aadc90c2345af70a7dba418</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>invalidate</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aadcfdfead2a531b242204187c186d9cd</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::ComBetweenFeet</name>
    <filename>a00004.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ComBetweenFeet</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>af07000f6bf10131229d5349291603d90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComBetweenFeet</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>aeeb3644f4cfb36abda4853226718ccb6</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const CenterOfMassComputationPtr_t &amp;comc, const JointPtr_t &amp;jointLeft, const JointPtr_t &amp;jointRight, const vector3_t pointLeft, const vector3_t pointRight, const JointPtr_t &amp;jointReference, const vector3_t pointRef, std::vector&lt; bool &gt; mask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW ComBetweenFeetPtr_t</type>
      <name>create</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a6b18c307ff5a111781ffb90f60c77020</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;jointLeft, const JointPtr_t &amp;jointRight, const vector3_t pointLeft, const vector3_t pointRight, const JointPtr_t &amp;jointReference, const vector3_t pointRef, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true)(true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ComBetweenFeetPtr_t</type>
      <name>create</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a223b1006f0f1d5b8a5e961934326f653</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const CenterOfMassComputationPtr_t &amp;comc, const JointPtr_t &amp;jointLeft, const JointPtr_t &amp;jointRight, const vector3_t pointLeft, const vector3_t pointRight, const JointPtr_t &amp;jointReference, const vector3_t pointRef, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true)(true))</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a6345f485fd65f012e49542f1520581ca</anchor>
      <arglist>(vectorOut_t result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>ae0b786733fb25af252f7e7f367371ca2</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::ConfigurationConstraint</name>
    <filename>a00005.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConfigurationConstraint</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a8b691f9f8887646bb7f52211f433aad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConfigurationConstraint</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>aeb4fdf67890843e849ae4b4d67036693</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, ConfigurationIn_t goal, std::vector&lt; bool &gt; mask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW ConfigurationConstraintPtr_t</type>
      <name>create</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>acdec7d70ec560be7800902cdbd4db6e4</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, ConfigurationIn_t goal, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(0))</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>aeb22b640d0acfcc525e7b7bebc48837e</anchor>
      <arglist>(vectorOut_t result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>abc63501b67a6ea7179c3101a41c3366c</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::StaticStability::Contact_t</name>
    <filename>a00006.html</filename>
    <member kind="variable">
      <type>JointPtr_t</type>
      <name>joint1</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a0b75727570e7927bfc79de85763cb037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JointPtr_t</type>
      <name>joint2</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>ac393d2bee58623e9979dd3268872c1f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3_t</type>
      <name>point1</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a3f24bc51c6dcc44e235760c53ff32237</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3_t</type>
      <name>point2</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>aea2271fc484c46eff1bb004b8214756c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3_t</type>
      <name>normal1</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a4946a0452d540ecf9f024aa4d606a31f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3_t</type>
      <name>normal2</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>aa1cc1ff945cb01a112568ffda92954d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::ConvexShape</name>
    <filename>a00007.html</filename>
    <member kind="function">
      <type></type>
      <name>ConvexShape</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>af4b41d7552bded07829f234ded388ece</anchor>
      <arglist>(const std::vector&lt; vector3_t &gt; &amp;pts, JointPtr_t joint=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvexShape</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a81647130062ec65765740f342f699244</anchor>
      <arglist>(const fcl::TriangleP &amp;t, const JointPtr_t &amp;joint=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvexShape</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a8876d44f94d67eee7fc0fadb75da3aa4</anchor>
      <arglist>(const fcl::Vec3f &amp;p0, const fcl::Vec3f &amp;p1, const fcl::Vec3f &amp;p2, const JointPtr_t &amp;joint=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvexShape</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a65e43e9bdd6c569c6cc6e1bcb85a13da</anchor>
      <arglist>(const ConvexShape &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a99244b1342c3171b60dce102e03082ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateToCurrentTransform</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ae20691894ed578448d14dde1cc51593e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>fcl::Vec3f</type>
      <name>intersection</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a04f5e542d8c65e2b9cfc39752dd476ca</anchor>
      <arglist>(const fcl::Vec3f &amp;A, const fcl::Vec3f &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>fcl::Vec3f</type>
      <name>intersectionLocal</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ac8b4c8246fb58ec25b369aef0bec847d</anchor>
      <arglist>(const fcl::Vec3f &amp;A, const fcl::Vec3f &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>aab6941b207d123834acb10ac10b6c083</anchor>
      <arglist>(const fcl::Vec3f &amp;A, const fcl::Vec3f &amp;u) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a3d9e9e84443ca2f3f25284c969973a1b</anchor>
      <arglist>(const fcl::Vec3f &amp;Ap) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInsideLocal</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a2f68278e51b32a8e7937f01d49b91bb3</anchor>
      <arglist>(const fcl::Vec3f &amp;Ap) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>distance</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a68d4b840faec7ee8fc260c920df8d958</anchor>
      <arglist>(const fcl::Vec3f &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>const fcl::Vec3f &amp;</type>
      <name>planeXaxis</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a82e5361af7fbd689227e6788eadd1dac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const fcl::Vec3f &amp;</type>
      <name>planeYaxis</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ad29daa34435c4ec94914cd014e6a956b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const fcl::Vec3f &amp;</type>
      <name>normal</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a05678172c09337451d924014eebe6a82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const fcl::Vec3f &amp;</type>
      <name>center</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a9028a012bb8fb01e6edd124b90d55324</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const fcl::Transform3f &amp;</type>
      <name>positionInJoint</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a2c45c5d255ba444d2ae508d55576e584</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeAlignedPosition</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ac6bdef7f38e3cf6e3d6264f5e1c2b2d6</anchor>
      <arglist>(const fcl::Vec3f &amp;yaxis) const </arglist>
    </member>
    <member kind="function">
      <type>const fcl::Transform3f &amp;</type>
      <name>alignedPositionInJoint</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a01be1a30a761fcec18690b007a927582</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; vector3_t &gt;</type>
      <name>Pts_</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a6001c711324a5233a9bb0a771449a4d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>shapeDimension_</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>af74942695af7b44bfed6473f78fd98ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3_t</type>
      <name>C_</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a508307f4c43003ba88b52b2851204958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3_t</type>
      <name>N_</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a9b2f5f1e8111cc04734fb5458df16dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; vector3_t &gt;</type>
      <name>Ns_</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>aaedefcc484f03297604b8ed03a29e811</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; vector3_t &gt;</type>
      <name>Us_</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a5d80fadb448b27269558025ffcca57a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector_t</type>
      <name>Ls_</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>aab09485ef97e0ac821666f637a4eacf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>fcl::Transform3f</type>
      <name>MinJoint_</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ad97db00f25b7d8937a2e50a9badb34c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JointPtr_t</type>
      <name>joint_</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>aefb8ac83cd989e022a4bcd915443c502</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::ConvexShapeContact</name>
    <filename>a00008.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <class kind="struct">hpp::constraints::ConvexShapeContact::ForceData</class>
    <member kind="enumeration">
      <type></type>
      <name>ContactType</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae8bf46b6eabce3bb29cc3ae6685eff4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_ON_PLANE</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae8bf46b6eabce3bb29cc3ae6685eff4aabaea86c15fdcb90f622bb85280eb8858</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINE_ON_PLANE</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae8bf46b6eabce3bb29cc3ae6685eff4aab8d1388f3e3e9c94c90d153f3de42fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLANE_ON_PLANE</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae8bf46b6eabce3bb29cc3ae6685eff4aab68ca4ff7f98958fdf009c571ce88469</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POINT_ON_PLANE</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae8bf46b6eabce3bb29cc3ae6685eff4aabaea86c15fdcb90f622bb85280eb8858</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINE_ON_PLANE</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae8bf46b6eabce3bb29cc3ae6685eff4aab8d1388f3e3e9c94c90d153f3de42fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PLANE_ON_PLANE</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae8bf46b6eabce3bb29cc3ae6685eff4aab68ca4ff7f98958fdf009c571ce88469</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvexShapeContact</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a1de49d7b441506792064af423effa95f</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObjectTriangle</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8c3530154f13117e1a08b065999bfa5b</anchor>
      <arglist>(const fcl::TriangleP &amp;t, const JointPtr_t &amp;joint) HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFloorTriangle</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a5bde059d56434b274391ca8af15c8b9c</anchor>
      <arglist>(const fcl::TriangleP &amp;t, const JointPtr_t &amp;joint) HPP_CONSTRAINTS_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObject</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ac0c903dd0a15717fafcd318de447bb0a</anchor>
      <arglist>(const ConvexShape &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFloor</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a408cf754a6eae90a22e548b11e37e3e7</anchor>
      <arglist>(const ConvexShape &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNormalMargin</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aef7fccac53987641d1e1abf0642e15df</anchor>
      <arglist>(const value_type &amp;margin)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ForceData &gt;</type>
      <name>computeContactPoints</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>abc089a550456f3d65bcc38279b1758bc</anchor>
      <arglist>(const value_type &amp;normalMargin) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConvexShapeContactPtr_t</type>
      <name>create</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>aab309c35ce5871f3b2cef43b35517ea7</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConvexShapeContactPtr_t</type>
      <name>create</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a6a503daa29d929487e19adc2f764fa9e</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ConvexShapeContactComplement</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a62dcaef2aed39890dcb7f559d17d7901</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::ConvexShapeContactComplement</name>
    <filename>a00009.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" static="yes">
      <type>static std::pair&lt; ConvexShapeContactPtr_t, ConvexShapeContactComplementPtr_t &gt;</type>
      <name>createPair</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a0822d8fcf88ca033f5384b26054a70c1</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;complementName, const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConvexShapeContactComplement</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>aa2178a7d9fa879f7290b67fbc2aba26c</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;complementName, const DevicePtr_t &amp;robot)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::CrossProduct</name>
    <filename>a00010.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>CalculusBase&lt; CrossProduct&lt; LhsValue, RhsValue &gt; &gt;</base>
    <member kind="typedef">
      <type>CalculusBase&lt; CrossProduct&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a03e5461ec583c8bddafa4b04fbfbb058</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrossProduct</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a1c1afc5eed2701b3eeaccc716a4601ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrossProduct</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aa7c32e3d5a954231b5b8dc2b6b04b120</anchor>
      <arglist>(const CalculusBase&lt; CrossProduct &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CrossProduct</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a740a7fe2c53de268e5b1cd1ef01622da</anchor>
      <arglist>(const typename Traits&lt; LhsValue &gt;::Ptr_t &amp;lhs, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a1d4c5b2e74ac282b653e953e8bcb450a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a3b9a92ee4204a70f52dbb75004a226a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac6e1b12462d1192444883c6c73b38d8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Expression&lt; LhsValue, RhsValue &gt;::Ptr_t</type>
      <name>e_</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a387cc897096f60b6ea513d1c473cdc1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Expression&lt; LhsValue, RhsValue &gt;</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ae418bc31959f758073988e8dd8f6d42c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::Difference</name>
    <filename>a00011.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>CalculusBase&lt; Difference&lt; LhsValue, RhsValue &gt; &gt;</base>
    <member kind="typedef">
      <type>CalculusBase&lt; Difference&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a2192f4dd64c25c945de9cf15f290f3cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Difference</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a1af82385ad79fd6d3f88616058594bb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Difference</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a157a66017bccc67785b01bc977991c52</anchor>
      <arglist>(const CalculusBase&lt; Difference &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Difference</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aa413ade15cd2012023cf86d9313bcf88</anchor>
      <arglist>(const typename Traits&lt; LhsValue &gt;::Ptr_t &amp;lhs, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a3f32e9ce50927dcfef09d215a4ae7cb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a584ab237481be71981e1ed5e5c45d6c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a79c919457e0a3257b411ba051916a64b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Expression&lt; LhsValue, RhsValue &gt;::Ptr_t</type>
      <name>e_</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aea951f7ac52c0e67cd082da2b30a139c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Expression&lt; LhsValue, RhsValue &gt;</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ae418bc31959f758073988e8dd8f6d42c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::DifferentiableFunction</name>
    <filename>a00012.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DifferentiableFunction</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a2c7c4aa19e0063c7111093bb801176f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>af9cc093582a57e71046ebff4ad8ac4b3</anchor>
      <arglist>(vectorOut_t result, vectorIn_t argument) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobian</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a88a5febfa02716dc30e2e0e481cfebfa</anchor>
      <arglist>(matrixOut_t jacobian, vectorIn_t argument) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>inputSize</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a79165181c7de9490014f9f19392509d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>inputDerivativeSize</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a796ef80d7f2a935e3d8a757947d82bce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>outputSize</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a2483103d8d247a356d01eaa57ba4deef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>outputDerivativeSize</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>aa01f5efd9245fff335743bd262d0414f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>aea6989f1b640e9f34af5c56d5c900b46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a4836d0f9aca693a5c5a5886bb3756898</anchor>
      <arglist>(std::ostream &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>context</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a32aa95943778342bb3d5bfd6afc458ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>context</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a28f8369f39cd17b8859bc7068052c0c6</anchor>
      <arglist>(const std::string &amp;c)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DifferentiableFunction</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a57f0b42159c34087c7a56150db4bfca5</anchor>
      <arglist>(size_type sizeInput, size_type sizeInputDerivative, size_type sizeOutput, std::string name=std::string())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DifferentiableFunction</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>aef6f0ffc02883a59b5f8f7c30e7f0a6e</anchor>
      <arglist>(size_type sizeInput, size_type sizeInputDerivative, size_type sizeOutput, size_type sizeOutputDerivative, std::string name=std::string())</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a06b4cc8f295a8969388089324decd105</anchor>
      <arglist>(vectorOut_t result, vectorIn_t argument) const  =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a8c95cb245274ae37cb2bfbb818a00308</anchor>
      <arglist>(matrixOut_t jacobian, vectorIn_t arg) const  =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finiteDifferenceForward</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a7c7bc64a748773a411c495d54173b3c4</anchor>
      <arglist>(matrixOut_t jacobian, vectorIn_t arg, DevicePtr_t robot=DevicePtr_t(), value_type eps=std::sqrt(Eigen::NumTraits&lt; value_type &gt;::epsilon())) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finiteDifferenceCentral</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a50c7eb32f18d5fa02cde70f02d461716</anchor>
      <arglist>(matrixOut_t jacobian, vectorIn_t arg, DevicePtr_t robot=DevicePtr_t(), value_type eps=std::sqrt(Eigen::NumTraits&lt; value_type &gt;::epsilon())) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::DistanceBetweenBodies</name>
    <filename>a00013.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DistanceBetweenBodies</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ad3c9ded5885474f36dc068b5652ee489</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW DistanceBetweenBodiesPtr_t</type>
      <name>create</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a7c7d941865001859062558929bbc45ac</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DistanceBetweenBodiesPtr_t</type>
      <name>create</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aea90cf16946549b40bd498ad8320051f</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint, const ObjectVector_t &amp;objects)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DistanceBetweenBodies</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ab92b72fa55751df9d487949988eba414</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DistanceBetweenBodies</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a3290018fc9ccf726e33730ee685711c0</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint, const ObjectVector_t &amp;objects)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ad425be858df77e7357615e87474ec5ad</anchor>
      <arglist>(vectorOut_t result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a27c4cc64a0374756cc9194e5973e61d9</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::DistanceBetweenPointsInBodies</name>
    <filename>a00014.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DistanceBetweenPointsInBodies</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a6927703fe5c981261abc1cf0570f9054</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW DistanceBetweenPointsInBodiesPtr_t</type>
      <name>create</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a19f94a66daa5cb6a26417052466e7506</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const vector3_t &amp;point1, const vector3_t &amp;point2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DistanceBetweenPointsInBodiesPtr_t</type>
      <name>create</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a9d600a03e95370da4b70cf1a0b1a1024</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const vector3_t &amp;point1, const vector3_t &amp;point2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DistanceBetweenPointsInBodies</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a8ce2472d0053eb1f75cd0264d1e0bd10</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const vector3_t &amp;point1, const vector3_t &amp;point2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DistanceBetweenPointsInBodies</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a81331e22b9fe6efaf9af92cb12a321f6</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const vector3_t &amp;point1, const vector3_t &amp;point2)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a8c0ee13876071ff38610ea733054208b</anchor>
      <arglist>(vectorOut_t result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a17c1f75d89220cf240ce7f7547cd1a80</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::Expression</name>
    <filename>a00015.html</filename>
    <templarg>LhsValue</templarg>
    <templarg>RhsValue</templarg>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Expression&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af3424af664215386c20ee7db139e0c21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::weak_ptr&lt; Expression&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3114e8891d440af3755c3fdd0c79a13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const LhsValue &amp;</type>
      <name>lhs</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aa7e24ffb55c35b1b5014804a36836e8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const RhsValue &amp;</type>
      <name>rhs</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a8b5a49e1e5fdf9c2f49d71edcce449bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a97028a3dd54a87ee7e506b70e37966ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>adcb8c04e1841c7bd1d32286dd9221c88</anchor>
      <arglist>(const Expression &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a84078cc1c17bacf7f27f8fa0d1da2290</anchor>
      <arglist>(const typename Traits&lt; LhsValue &gt;::Ptr_t &amp;lhs, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab3f80f232a52e2f0631b440ee7f9f9de</anchor>
      <arglist>(Ptr_t self)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ae61510141a143c84abc79b3c3f7a8bc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5aa932aff015d95ad794f0aeb769a437</anchor>
      <arglist>(const typename Traits&lt; LhsValue &gt;::Ptr_t &amp;lhs, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>Traits&lt; RhsValue &gt;::Ptr_t</type>
      <name>rhs_</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af019c9c05b27e9778f00242742162cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Traits&lt; LhsValue &gt;::Ptr_t</type>
      <name>lhs_</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5a27324330f67eb44b1a44f853235589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Traits&lt; Expression &gt;::WkPtr_t</type>
      <name>self_</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3a1a9873e47e438fccd342bdb9526e22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Expression&lt; model::Joint, RhsValue &gt;</name>
    <filename>a00015.html</filename>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Expression&lt; model::Joint, RhsValue &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af3424af664215386c20ee7db139e0c21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::weak_ptr&lt; Expression&lt; model::Joint, RhsValue &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3114e8891d440af3755c3fdd0c79a13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const model::Joint &amp;</type>
      <name>lhs</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aa7e24ffb55c35b1b5014804a36836e8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RhsValue &amp;</type>
      <name>rhs</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a8b5a49e1e5fdf9c2f49d71edcce449bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a97028a3dd54a87ee7e506b70e37966ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>adcb8c04e1841c7bd1d32286dd9221c88</anchor>
      <arglist>(const Expression &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a84078cc1c17bacf7f27f8fa0d1da2290</anchor>
      <arglist>(const typename Traits&lt; model::Joint &gt;::Ptr_t &amp;lhs, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab3f80f232a52e2f0631b440ee7f9f9de</anchor>
      <arglist>(Ptr_t self)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ae61510141a143c84abc79b3c3f7a8bc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5aa932aff015d95ad794f0aeb769a437</anchor>
      <arglist>(const typename Traits&lt; model::Joint &gt;::Ptr_t &amp;lhs, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>Traits&lt; RhsValue &gt;::Ptr_t</type>
      <name>rhs_</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af019c9c05b27e9778f00242742162cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Traits&lt; model::Joint &gt;::Ptr_t</type>
      <name>lhs_</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5a27324330f67eb44b1a44f853235589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Traits&lt; Expression &gt;::WkPtr_t</type>
      <name>self_</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3a1a9873e47e438fccd342bdb9526e22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Expression&lt; value_type, RhsValue &gt;</name>
    <filename>a00015.html</filename>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Expression&lt; value_type, RhsValue &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af3424af664215386c20ee7db139e0c21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::weak_ptr&lt; Expression&lt; value_type, RhsValue &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3114e8891d440af3755c3fdd0c79a13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>lhs</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>aa7e24ffb55c35b1b5014804a36836e8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RhsValue &amp;</type>
      <name>rhs</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a8b5a49e1e5fdf9c2f49d71edcce449bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a97028a3dd54a87ee7e506b70e37966ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>adcb8c04e1841c7bd1d32286dd9221c88</anchor>
      <arglist>(const Expression &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a84078cc1c17bacf7f27f8fa0d1da2290</anchor>
      <arglist>(const typename Traits&lt; value_type &gt;::Ptr_t &amp;lhs, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ab3f80f232a52e2f0631b440ee7f9f9de</anchor>
      <arglist>(Ptr_t self)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>ae61510141a143c84abc79b3c3f7a8bc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5aa932aff015d95ad794f0aeb769a437</anchor>
      <arglist>(const typename Traits&lt; value_type &gt;::Ptr_t &amp;lhs, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>Traits&lt; RhsValue &gt;::Ptr_t</type>
      <name>rhs_</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>af019c9c05b27e9778f00242742162cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Traits&lt; value_type &gt;::Ptr_t</type>
      <name>lhs_</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a5a27324330f67eb44b1a44f853235589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Traits&lt; Expression &gt;::WkPtr_t</type>
      <name>self_</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a3a1a9873e47e438fccd342bdb9526e22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::ConvexShapeContact::ForceData</name>
    <filename>a00016.html</filename>
    <member kind="variable">
      <type>JointPtr_t</type>
      <name>joint</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a455ae26986806ca54177696ecdb5f54e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JointPtr_t</type>
      <name>supportJoint</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a75e494d0985efa355c4ae4326d2ed415</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; vector3_t &gt;</type>
      <name>points</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a84c7abb3daca0403878f36c518de1f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>vector3_t</type>
      <name>normal</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a23a5e694b1deb8731e94d48d9267c410</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::GenericTransformation</name>
    <filename>a00017.html</filename>
    <templarg>_Options</templarg>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="enumvalue">
      <name>IsRelative</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a5f6fb33a5c62b7c86145c1d8651b66cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeOrientation</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5ab8dfca9215b762f37051e1b1ee964d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputePosition</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5ad79703f65590070af3219e24f00caaeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsPosition</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a5fdd40f4481052cd2ecc13553b1b0bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsOrientation</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a186e5f17cc92d7956babaa0ac233c255</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsTransform</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a633dcbc68dbec0a3b04260cadb15c48d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ValueSize</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a8d7348402181dbb59ddcad5b11c538e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GenericTransformation &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a49a40324fefd9d6bc2d6dbad6dfd92e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::weak_ptr&lt; GenericTransformation &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a9be32da30976bc4a87f983e35c2c93ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsRelative</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a5f6fb33a5c62b7c86145c1d8651b66cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeOrientation</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5ab8dfca9215b762f37051e1b1ee964d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputePosition</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5ad79703f65590070af3219e24f00caaeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsPosition</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a5fdd40f4481052cd2ecc13553b1b0bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsOrientation</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a186e5f17cc92d7956babaa0ac233c255</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsTransform</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a633dcbc68dbec0a3b04260cadb15c48d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ValueSize</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1f1e449729b9e892aa0f579b3fe4a7f5a8d7348402181dbb59ddcad5b11c538e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericTransformation</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a4710f72c9a1c62621d8afe076d574789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a7355619b242851092af2bb7f9a7d102c</anchor>
      <arglist>(const Transform3f &amp;reference)</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>reference</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aff051e6338b12e345f25acfdae94f203</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>joint1</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>adef8928376d66d616392faf7eae19457</anchor>
      <arglist>(const JointPtr_t &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>JointPtr_t</type>
      <name>joint1</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a8df1a651c7dadc23887406846f2a91ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>joint2</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a46a594bf62a2e663bdc38484e9890454</anchor>
      <arglist>(const JointPtr_t &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>JointPtr_t</type>
      <name>joint2</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a85f9aa1eaeaebd466d9b6e253bc06f1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frame1InJoint1</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a39f0034b8560a9bbd34320df11a1b3ae</anchor>
      <arglist>(const Transform3f &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>frame1InJoint1</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a0ef97fd58ea5c46ea97386f3fd958baa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frame2InJoint2</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a1b7fcdc6baadd3b32db7df630d2799ae</anchor>
      <arglist>(const Transform3f &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>frame2InJoint2</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ac7bc07031a6423848edc3e3701994410</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a468200cdccb523e6cf30ae24918f454c</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint2, const Transform3f &amp;reference, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(ValueSize, true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aa67672cedea1bb48b5e80b3f637ceb35</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;, const JointPtr_t &amp;joint2, const Transform3f &amp;frame1, const Transform3f &amp;frame2, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(ValueSize, true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a9e48bdf04c08c1c87251acd9be240689</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const Transform3f &amp;reference, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(ValueSize, true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ae4d131193b8102d4a72683ff4fbc5025</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const Transform3f &amp;frame1, const Transform3f &amp;frame2, std::vector&lt; bool &gt; mask=std::vector&lt; bool &gt;(ValueSize, true))</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GenericTransformation</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3b549109cc7b27d24ef6e742a5eda412</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;, std::vector&lt; bool &gt; mask)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a457d51c057c733a9b22c06df0389b39f</anchor>
      <arglist>(const WkPtr_t &amp;self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aa94670395b0b0e248b95468efc458a67</anchor>
      <arglist>(vectorOut_t result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ac2b0379ac1dc23d4252e5409c9215e51</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::JointFrame</name>
    <filename>a00018.html</filename>
    <base>CalculusBase&lt; JointFrame, Eigen::Matrix&lt; value_type, 6, 1 &gt;, Eigen::Matrix&lt; value_type, 6, Eigen::Dynamic &gt; &gt;</base>
    <member kind="typedef">
      <type>CalculusBase&lt; JointFrame, ValueType_t, JacobianType_t &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a42b715ee8bf00705c7ff9d0bd39b21d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointFrame</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a783a3abb77643aff970fb85b348f78d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointFrame</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a0bd86ec76e33ae1d605eda71d75c1df5</anchor>
      <arglist>(const Parent_t &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointFrame</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a2f8ec475e9ce2ca03599f4ff84d9ced1</anchor>
      <arglist>(const JointFrame &amp;jf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointFrame</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>afc89436b25b3115d3f59b46396ff31ed</anchor>
      <arglist>(const JointPtr_t &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>const JointPtr_t &amp;</type>
      <name>joint</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a6c060ef509100fd3978f11b266f4dcde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ae1ed6982d59975b1ce43ef8eb3758dbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aed2773f9d60a702397338b14d5a531fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointPtr_t</type>
      <name>joint_</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a29a6648618148ee342b97ae45dfb64fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>theta_</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a00abe1a40ee479be4ae3046f849cb6ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::JointTranspose</name>
    <filename>a00019.html</filename>
    <member kind="function">
      <type></type>
      <name>JointTranspose</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>ac05f35252af29254295ab56c1b730eaf</anchor>
      <arglist>(const JointPtr_t &amp;joint)</arglist>
    </member>
    <member kind="variable">
      <type>const JointPtr_t</type>
      <name>j_</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a7d788ce25246b8ddc881673a0bb38501</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::MatrixOfExpressions</name>
    <filename>a00020.html</filename>
    <templarg>ValueType</templarg>
    <templarg>JacobianType</templarg>
    <base>CalculusBase&lt; MatrixOfExpressions&lt; ValueType, JacobianType &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</base>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>Value_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>add6dea366898dcdeeb3d93fb90d42c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>Jacobian_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a3fadca3fd8212fb6393f0f9389528d9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>PseudoInv_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a4ee5f376168ea1a3a0e942d769bbc240</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>PseudoInvJacobian_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a857f2d847e95191afaa1fc550d17e0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CalculusBase&lt; MatrixOfExpressions, Value_t, Jacobian_t &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a3acf5fcfbf82e506ba8c17b7e9289a5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CalculusBaseAbstract&lt; ValueType, JacobianType &gt;</type>
      <name>Element_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>af936590aa687a35fe0fc95c91aac0474</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits&lt; Element_t &gt;::Ptr_t</type>
      <name>ElementPtr_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a7090f89ba9b02664cfd551902f9006ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::JacobiSVD&lt; Value_t &gt;</type>
      <name>SVD_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ae9cb2206d27009f9fe38d00e42f26599</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixOfExpressions</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a005eedb77d2c6019ff7ada2d8afb838c</anchor>
      <arglist>(const Eigen::Ref&lt; const Value_t &gt; &amp;value, const Eigen::Ref&lt; const Jacobian_t &gt; &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixOfExpressions</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ae5a19c6def4790b2a38d47b720c80c3b</anchor>
      <arglist>(const Parent_t &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixOfExpressions</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a712915eb469563940187be9da0a90e45</anchor>
      <arglist>(const MatrixOfExpressions &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a00e6d1d85c123a4fed4f0cfbb7896c5a</anchor>
      <arglist>(std::size_t nRows, std::size_t nCols)</arglist>
    </member>
    <member kind="function">
      <type>ElementPtr_t &amp;</type>
      <name>operator()</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aeb6d33701c04da21b9a6f2e143283dad</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aed27e825409a3b6b3fe9e419308009fc</anchor>
      <arglist>(std::size_t i, std::size_t j, const ElementPtr_t ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>af922233b6f3bccdfd6b9eebcbf3a4970</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a319a73e98d5939604609152734bdd490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PseudoInv_t &amp;</type>
      <name>pinv</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>adc9e8a71396f9f313d9d56f376bb1e75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PseudoInvJacobian_t &amp;</type>
      <name>pinvJacobian</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad367ea9a28d94c646a49eb94a019ca5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSVD</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ac44ea31fe6d82a3a7f729cd1240d1913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePseudoInverse</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aa7eca8eb14282384efe2e1e83088ce52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePseudoInverseJacobian</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a4b234d2afcbf15d0ddfddc525d205106</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Matrix&lt; value_type, Eigen::Dynamic, 1 &gt; &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobianTimes</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad46c92857da408a1c1e2e612df639612</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Matrix&lt; value_type, Eigen::Dynamic, 1 &gt; &gt; &amp;rhs, Eigen::Ref&lt; Jacobian_t &gt; cache) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobianTransposeTimes</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ae15911c254a242b97ea25ad59d89f644</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Matrix&lt; value_type, Eigen::Dynamic, 1 &gt; &gt; &amp;rhs, Eigen::Ref&lt; Jacobian_t &gt; cache) const </arglist>
    </member>
    <member kind="function">
      <type>Eigen::JacobiSVD&lt; Value_t &gt; &amp;</type>
      <name>svd</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a36eafc1c68543feea5df04e59bb7c6bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>adaf51f8eda064f7fd89f3f90523d1c69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>nRows_</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>af622b9c323af91caa7d646220246cfcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>nCols_</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a48d45c27060002c04751c42cd588d1eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; ElementPtr_t &gt; &gt;</type>
      <name>elements_</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a6db0caf6699335f60347e636309ae453</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatrixOfExpressions&lt; eigen::vector3_t, JacobianMatrix &gt;</name>
    <filename>a00020.html</filename>
    <base>CalculusBase&lt; MatrixOfExpressions&lt; eigen::vector3_t, JacobianMatrix &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;, Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</base>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>Value_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>add6dea366898dcdeeb3d93fb90d42c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>Jacobian_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a3fadca3fd8212fb6393f0f9389528d9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>PseudoInv_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a4ee5f376168ea1a3a0e942d769bbc240</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>PseudoInvJacobian_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a857f2d847e95191afaa1fc550d17e0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CalculusBase&lt; MatrixOfExpressions, Value_t, Jacobian_t &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a3acf5fcfbf82e506ba8c17b7e9289a5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CalculusBaseAbstract&lt; eigen::vector3_t, JacobianMatrix &gt;</type>
      <name>Element_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>af936590aa687a35fe0fc95c91aac0474</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits&lt; Element_t &gt;::Ptr_t</type>
      <name>ElementPtr_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a7090f89ba9b02664cfd551902f9006ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::JacobiSVD&lt; Value_t &gt;</type>
      <name>SVD_t</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ae9cb2206d27009f9fe38d00e42f26599</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixOfExpressions</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a005eedb77d2c6019ff7ada2d8afb838c</anchor>
      <arglist>(const Eigen::Ref&lt; const Value_t &gt; &amp;value, const Eigen::Ref&lt; const Jacobian_t &gt; &amp;jacobian)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixOfExpressions</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ae5a19c6def4790b2a38d47b720c80c3b</anchor>
      <arglist>(const Parent_t &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixOfExpressions</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a712915eb469563940187be9da0a90e45</anchor>
      <arglist>(const MatrixOfExpressions &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a00e6d1d85c123a4fed4f0cfbb7896c5a</anchor>
      <arglist>(std::size_t nRows, std::size_t nCols)</arglist>
    </member>
    <member kind="function">
      <type>ElementPtr_t &amp;</type>
      <name>operator()</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aeb6d33701c04da21b9a6f2e143283dad</anchor>
      <arglist>(std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aed27e825409a3b6b3fe9e419308009fc</anchor>
      <arglist>(std::size_t i, std::size_t j, const ElementPtr_t ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>af922233b6f3bccdfd6b9eebcbf3a4970</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a319a73e98d5939604609152734bdd490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PseudoInv_t &amp;</type>
      <name>pinv</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>adc9e8a71396f9f313d9d56f376bb1e75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PseudoInvJacobian_t &amp;</type>
      <name>pinvJacobian</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad367ea9a28d94c646a49eb94a019ca5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSVD</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ac44ea31fe6d82a3a7f729cd1240d1913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePseudoInverse</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aa7eca8eb14282384efe2e1e83088ce52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePseudoInverseJacobian</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a4b234d2afcbf15d0ddfddc525d205106</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Matrix&lt; value_type, Eigen::Dynamic, 1 &gt; &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobianTimes</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad46c92857da408a1c1e2e612df639612</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Matrix&lt; value_type, Eigen::Dynamic, 1 &gt; &gt; &amp;rhs, Eigen::Ref&lt; Jacobian_t &gt; cache) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobianTransposeTimes</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ae15911c254a242b97ea25ad59d89f644</anchor>
      <arglist>(const Eigen::Ref&lt; const Eigen::Matrix&lt; value_type, Eigen::Dynamic, 1 &gt; &gt; &amp;rhs, Eigen::Ref&lt; Jacobian_t &gt; cache) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::JacobiSVD&lt; Value_t &gt; &amp;</type>
      <name>svd</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a36eafc1c68543feea5df04e59bb7c6bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>adaf51f8eda064f7fd89f3f90523d1c69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>nRows_</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>af622b9c323af91caa7d646220246cfcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>nCols_</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a48d45c27060002c04751c42cd588d1eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; ElementPtr_t &gt; &gt;</type>
      <name>elements_</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a6db0caf6699335f60347e636309ae453</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::Orientation</name>
    <filename>a00021.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Orientation</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a8e546f89cd9915c079e2482eea0597ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a6d62ce5a3aab2600dcd586560fa50170</anchor>
      <arglist>(const matrix3_t &amp;reference)</arglist>
    </member>
    <member kind="function">
      <type>const matrix3_t &amp;</type>
      <name>reference</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a47f1a6d819b86626acff29772fb95951</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Orientation</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>abb23ec45cd95e57ef151310641631f2a</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;, const JointPtr_t &amp;joint, const matrix3_t &amp;reference, std::vector&lt; bool &gt; mask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW OrientationPtr_t</type>
      <name>create</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a5b422467ba97bffb68e2127cd36ccdb9</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint, const matrix3_t &amp;reference, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OrientationPtr_t</type>
      <name>create</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a9135e39dc69399b7ead30dd5b46a5855</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint, const matrix3_t &amp;reference, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>size</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a849a88ec16e77f21059f09eba16161f8</anchor>
      <arglist>(std::vector&lt; bool &gt; mask)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ab536ee45c00f3789404b17f12da671a5</anchor>
      <arglist>(vectorOut_t result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>af666b0d09febbbfa5f282f5715be9490</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::Point</name>
    <filename>a00022.html</filename>
    <base>CalculusBase&lt; Point, eigen::vector3_t, JacobianMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0d011181ccdcb99779caea5d12b50b22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a38a7f27ed08d01cb0be7c0a4783fd72d</anchor>
      <arglist>(const CalculusBase&lt; Point, eigen::vector3_t, JacobianMatrix &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ad5362bf2a0385b9b7bd5be4287de14d3</anchor>
      <arglist>(const Point &amp;point)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a682fda7c44ff7072cc3fe2fef05ea287</anchor>
      <arglist>(const vector3_t &amp;point, size_t jacobianNbCols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a77f236a671ce0d200099e7d19f72a9ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>af5201dee0fe52ae2a7a6adcaf274a967</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::PointCom</name>
    <filename>a00023.html</filename>
    <base>CalculusBase&lt; PointCom &gt;</base>
    <member kind="function">
      <type></type>
      <name>PointCom</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a64999de79ae48eed3f19ac8e46a89b37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointCom</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>afa2947789e6c9cc1624bbc4e61ea9368</anchor>
      <arglist>(const CalculusBase&lt; PointCom &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointCom</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a493b0e7adafdebf449c39845cc30c826</anchor>
      <arglist>(const CenterOfMassComputationPtr_t &amp;comc)</arglist>
    </member>
    <member kind="function">
      <type>const JacobianMatrix &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ab4ec38a77ba038fb7980f47d5b7b9d06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const CenterOfMassComputationPtr_t &amp;</type>
      <name>centerOfMassComputation</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a77b36714abbeb0f295fc3c1b1c54bbb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a75117ea023e26fc2509aadca32a2978b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a0ee956b227bc2ccc6f736c1d6ad5b860</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CenterOfMassComputationPtr_t</type>
      <name>comc_</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ab67879fa13d6303f0df18f2a57d1e122</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::PointInJoint</name>
    <filename>a00024.html</filename>
    <base>CalculusBase&lt; PointInJoint &gt;</base>
    <member kind="typedef">
      <type>CalculusBase&lt; PointInJoint &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ae76772fb1ce19ed1ae389c2d24756171</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointInJoint</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a364ae756dbc3efcb5e82316cc50f3668</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointInJoint</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aa6f2d86868001c86c1512bfc570d3675</anchor>
      <arglist>(const CalculusBase&lt; PointInJoint &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointInJoint</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a3e67fea498f1fb2bf15564a35cede0c4</anchor>
      <arglist>(const PointInJoint &amp;pointInJoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointInJoint</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ab0bb23e69b7c8307648b3f25e5cfaeeb</anchor>
      <arglist>(const JointPtr_t &amp;joint, const vector3_t &amp;pointInLocalFrame)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointInJoint</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a9333480e26339ad6333b667f48fe2213</anchor>
      <arglist>(const JointPtr_t &amp;joint, const vector3_t &amp;pointInLocalFrame, size_type nbDof)</arglist>
    </member>
    <member kind="function">
      <type>const JointPtr_t &amp;</type>
      <name>joint</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a2cdbc92f6822f742b21cc972048e667b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>local</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a7d9db5bd4d76b199f9ec360a512ab885</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ab8fdcf22ec573e512246f0dcde9af3ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aa421a00a87848c0dfcb143c2b76ccc95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossRXl</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ad83a7490d0656d6929d20013ee4060bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointPtr_t</type>
      <name>joint_</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a1f23fd1cfde887638abc375ae778756f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3_t</type>
      <name>local_</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a23e92b5de9da7c0d0f77077d4c656faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>center_</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a97ae84972553b963b5c15de31335cfc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3_t</type>
      <name>g_</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a2663c7aacaf0b02f72ebe19610304757</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::Position</name>
    <filename>a00025.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Position</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a459d097a9cf16a5acd3852a8e2358b40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aa03d82b4c2d9b8d63ad56621a0e1f798</anchor>
      <arglist>(const vector3_t &amp;reference)</arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>reference</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>acacaaa6b7d93680d5fb0b33473b2d833</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Position</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ac336d16fcd42813d242d0c9315019af2</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint, const vector3_t &amp;pointInLocalFrame, const vector3_t &amp;targetInGlobalFrame, const matrix3_t &amp;rotation, std::vector&lt; bool &gt; mask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW PositionPtr_t</type>
      <name>create</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a21276ac368cbdd1c8ebbd5d943fb56de</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint, const vector3_t &amp;pointInLocalFrame, const vector3_t &amp;targetInGlobalFrame, const matrix3_t &amp;rotation=matrix3_t::getIdentity(), std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PositionPtr_t</type>
      <name>create</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a0590f0cce0350a4e47c9452963288594</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint, const vector3_t &amp;pointInLocalFrame, const vector3_t &amp;targetInGlobalFrame, const matrix3_t &amp;rotation=matrix3_t::getIdentity(), std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true))</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static matrix3_t</type>
      <name>I3</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a41b09db0afa7f300aadd21a10a0e7be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a92e7eeead8bd3f162e317eb4ec3de4b6</anchor>
      <arglist>(vectorOut_t result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a8c0fc24aa068c4522c6ef0777c6eb5ef</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::QPStaticStability</name>
    <filename>a00026.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="typedef">
      <type>StaticStability::Contact_t</type>
      <name>Contact_t</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8c9ea0e94c63542be38983d00184a4e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StaticStability::Contacts_t</type>
      <name>Contacts_t</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a16c5bae0b832b561302532e1e603fd98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConvexShapeContact::ForceData</type>
      <name>ForceData</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a1bbf2b5e9ee3a6a1c12d380b0ed6d8c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QPStaticStability</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>aca26c7bd42a114a2cc9612249ab91c92</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const Contacts_t &amp;contacts, const CenterOfMassComputationPtr_t &amp;com)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QPStaticStability</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ab8e2ef39ce8fa7151f7bfcedecf454a4</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const std::vector&lt; ForceData &gt; &amp;contacts, const CenterOfMassComputationPtr_t &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>MatrixOfExpressions &amp;</type>
      <name>phi</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a1fbc612377817a96bf51bc03442ded6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static QPStaticStabilityPtr_t</type>
      <name>create</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a100791026a62806d1117089ba1dcbdea</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const Contacts_t &amp;contacts, const CenterOfMassComputationPtr_t &amp;com)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static QPStaticStabilityPtr_t</type>
      <name>create</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a966f1de637659ee42eba5c10c5b0db4e</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const std::vector&lt; ForceData &gt; &amp;contacts, const CenterOfMassComputationPtr_t &amp;com)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static QPStaticStabilityPtr_t</type>
      <name>create</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a581164016ea1d419f001050dd06539d3</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const Contacts_t &amp;contacts, const CenterOfMassComputationPtr_t &amp;com)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Matrix&lt; value_type, 6, 1 &gt;</type>
      <name>Gravity</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a25127a45b7af942577ceb8d34f04e5f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::RelativeCom</name>
    <filename>a00027.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RelativeCom</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>afa955d091c18c54b5dddf4324a46d121</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeCom</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a72716fa9405893d74fa63381908d6e7c</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const CenterOfMassComputationPtr_t &amp;comc, const JointPtr_t &amp;joint, const vector3_t reference, std::vector&lt; bool &gt; mask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW RelativeComPtr_t</type>
      <name>create</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a9b69c055096583556e744162dd6866a5</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint, const vector3_t reference, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativeComPtr_t</type>
      <name>create</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a5f13012ced9858737a7d48f6f994dc30</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const CenterOfMassComputationPtr_t &amp;comc, const JointPtr_t &amp;joint, const vector3_t reference, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true))</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>afa37cc1891aebfcd498cfff7c0174fe5</anchor>
      <arglist>(vectorOut_t result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>af6574e64e997c3cf3e0cad9c7ee97089</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::RelativeOrientation</name>
    <filename>a00028.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RelativeOrientation</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a3cfb4706281813f7b69420d870e047ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>adee30a2155c7794fc05d5e88e6eef9e0</anchor>
      <arglist>(const matrix3_t &amp;reference)</arglist>
    </member>
    <member kind="function">
      <type>const matrix3_t &amp;</type>
      <name>reference</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a38f1e686076381299f712ee706bc2bd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativeOrientation</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>afdb0ffd205b2cf2730cb8c81c5da4e69</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const matrix3_t &amp;reference, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW RelativeOrientationPtr_t</type>
      <name>create</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ae0e06eb4304815973f696b65e4044b4f</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const matrix3_t &amp;reference, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativeOrientationPtr_t</type>
      <name>create</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a2f68a166e597747ee8229c5ca99d0560</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const matrix3_t &amp;reference, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true))</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a2ace1468e9c3e09d7d52efa131fe7e0b</anchor>
      <arglist>(vectorOut_t result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a893f6052be3010145c51cd488e68187f</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::RelativePosition</name>
    <filename>a00029.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RelativePosition</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a10be5338936cf86e40000e604c76f41b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RelativePosition</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a17619905ca399a77c5b4d871ccee547b</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const vector3_t &amp;point1, const vector3_t &amp;point2, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true))</arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>pointInJoint1</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a2cb8f7aaf0ed4dc803c614a0767a0371</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointInJoint1</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ae86d18e911bfc9bc3a7d0c36c9ae0588</anchor>
      <arglist>(const vector3_t &amp;reference)</arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>pointInJoint2</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a34ddc0c60e50746dad2149daaf97c907</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pointInJoint2</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a5dcd1a64aaba3e85b0e4a4397c146caf</anchor>
      <arglist>(const vector3_t &amp;reference)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW RelativePositionPtr_t</type>
      <name>create</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a03ce2003e9efab132ea6749c7d5ae32b</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const vector3_t &amp;point1, const vector3_t &amp;point2, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativePositionPtr_t</type>
      <name>create</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ae1e0c8347ac124ba36cea0339303463a</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const vector3_t &amp;point1, const vector3_t &amp;point2, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true))</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a6d516c88c7228f3022d5d0e71d1758ae</anchor>
      <arglist>(vectorOut_t result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a791b302fb249ea7056534701c9d27515</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::RelativeTransformation</name>
    <filename>a00030.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RelativeTransformation</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>abb4f403ebb27fb1ba495619d865ad275</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a955d2c2b76f06e549bf3a47495414256</anchor>
      <arglist>(const Transform3f &amp;reference)</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>reference</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a625ed07c4da96c42e1f80acbea55e7ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>joint1</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a65ab7c371532983f7a68e653eda30fff</anchor>
      <arglist>(const JointPtr_t &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>JointPtr_t</type>
      <name>joint1</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a0128236b3e4d588e3718590942b5679f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>joint2</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a37b115d0aaa43a07b2f4d438c11461aa</anchor>
      <arglist>(const JointPtr_t &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>JointPtr_t</type>
      <name>joint2</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>ac1ea6baf0c4ab1d669120d434531aacd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frame1InJoint1</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a3c7141b9576fa84f63d8e3d3537ec4f0</anchor>
      <arglist>(const Transform3f &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>frame1InJoint1</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a10ec89725b95e5b14db8855ae4c03132</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frame2InJoint2</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a55cb7a302c64db679268906aa5bc0216</anchor>
      <arglist>(const Transform3f &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>frame2InJoint2</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a18d083718e217e25c03b1cd2a06f5782</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativeTransformationPtr_t</type>
      <name>create</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>ae455f9842941782bd291a641563f895c</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const Transform3f &amp;reference, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true)(true)(true)(true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativeTransformationPtr_t</type>
      <name>create</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a82ec63650f83e9c301b156b23dbe7054</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const Transform3f &amp;reference, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true)(true)(true)(true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RelativeTransformationPtr_t</type>
      <name>create</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>af4cda21e511329aee2e10467c08363e0</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const Transform3f &amp;frame1, const Transform3f &amp;frame2, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true)(true)(true)(true))</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RelativeTransformation</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>ad84818205fb760d37d9fcc8a448c427f</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const Transform3f &amp;reference, std::vector&lt; bool &gt; mask)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RelativeTransformation</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>ac7529f6bfce98febb190d099a0db60bc</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const Transform3f &amp;frame1, const Transform3f &amp;frame2, std::vector&lt; bool &gt; mask)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a29dda37667d67ff42be91eb759eeaabd</anchor>
      <arglist>(vectorOut_t result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>ad17f5ce1bb39e2ccbb7f9e1fd700e6d5</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::RotationMultiply</name>
    <filename>a00031.html</filename>
    <templarg></templarg>
    <base>CalculusBase&lt; RotationMultiply&lt; RhsValue &gt; &gt;</base>
    <member kind="typedef">
      <type>CalculusBase&lt; RotationMultiply&lt; RhsValue &gt; &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a046322706509f7a558f677d56c08bc08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationMultiply</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>af70a00819c48781a96057c12c77da72b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationMultiply</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a0acbb4792b7928aecd804ed83dcf1fb5</anchor>
      <arglist>(const CalculusBase&lt; RotationMultiply &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationMultiply</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a6c1505bb0d02856e90d850e07bc70059</anchor>
      <arglist>(const typename Traits&lt; JointTranspose &gt;::Ptr_t &amp;joint, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RotationMultiply</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a2bd68ec7db8f36cea02bebf6ae93edad</anchor>
      <arglist>(const typename Traits&lt; model::Joint &gt;::Ptr_t &amp;joint, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs, bool transpose=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>aa3c375b55f990318dbd706bc338f3af4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a3d87fa888dbada48a8e967eb060783fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a84515153916909747dc613c7ad625cb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Expression&lt; model::Joint, RhsValue &gt;::Ptr_t</type>
      <name>e_</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a7d8a9a8fe79cd56fbb3841f8e580d4e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Expression&lt; model::Joint, RhsValue &gt;</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a2ea9af4ad4d74cf3454d124fbcbc583a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::ScalarMultiply</name>
    <filename>a00032.html</filename>
    <templarg></templarg>
    <base>CalculusBase&lt; ScalarMultiply&lt; RhsValue &gt; &gt;</base>
    <member kind="typedef">
      <type>CalculusBase&lt; ScalarMultiply&lt; RhsValue &gt; &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1f67e8d6e29abc09f31b450317a34e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarMultiply</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a318f0f7b405f8e5c8b9b516253afe1ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarMultiply</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5fa833fc8956f6598d197679573477e9</anchor>
      <arglist>(const CalculusBase&lt; ScalarMultiply &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarMultiply</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a47066b7735dd54a72ab7de1cd2653630</anchor>
      <arglist>(const typename Traits&lt; value_type &gt;::Ptr_t &amp;scalar, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a79465bd7a306f4a3a634853b7fae12af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac5430beee36b1ee34e5081a0d419c844</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a92ce40e51dd0485cc74f3f397e9f55e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Expression&lt; value_type, RhsValue &gt;::Ptr_t</type>
      <name>e_</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aca1bebfe7dbb1d3ec68c29c2e0a89b7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Expression&lt; value_type, RhsValue &gt;</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0a02d3b743c2cdce40f033b06b66bebe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::ScalarProduct</name>
    <filename>a00033.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>CalculusBase&lt; ScalarProduct&lt; LhsValue, RhsValue &gt;, value_type, RowJacobianMatrix &gt;</base>
    <member kind="typedef">
      <type>CalculusBase&lt; ScalarProduct&lt; LhsValue, RhsValue &gt;, value_type, RowJacobianMatrix &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>aa1e682a0a35d1fb55a1c5b55567b7da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarProduct</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ad6053e0ea1c10b480d1c9b660a0d3f55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarProduct</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>aec84176f5c4ecb555cbaa7b49730bbd5</anchor>
      <arglist>(const CalculusBase&lt; ScalarProduct &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarProduct</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>adcee34183c3a2e8251bfa61430111d1a</anchor>
      <arglist>(const typename Traits&lt; LhsValue &gt;::Ptr_t &amp;lhs, const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ac34f03e6cae8690b453fd8d7c37d9354</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a5d65e49527af53969025ffff3320d5a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a4a1fba1da665e774f6f84b6528723622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Expression&lt; LhsValue, RhsValue &gt;::Ptr_t</type>
      <name>e_</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a3207338fec26f20c1292c31455301d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Expression&lt; LhsValue, RhsValue &gt;</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ae418bc31959f758073988e8dd8f6d42c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::StaticStability</name>
    <filename>a00034.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <class kind="struct">hpp::constraints::StaticStability::Contact_t</class>
    <member kind="typedef">
      <type>std::vector&lt; Contact_t &gt;</type>
      <name>Contacts_t</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a54eaebe0159ac304ae434fab84cbac10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StaticStability</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a0eb3eb225bc600096756075cfd3dda33</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const Contacts_t &amp;contacts, const CenterOfMassComputationPtr_t &amp;com)</arglist>
    </member>
    <member kind="function">
      <type>MatrixOfExpressions &amp;</type>
      <name>phi</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a0a167782bbf9b5c00f667465874b707e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StaticStabilityPtr_t</type>
      <name>create</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a73b298cfc7c290f6f32d2d3918261e13</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const Contacts_t &amp;contacts, const CenterOfMassComputationPtr_t &amp;com)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StaticStabilityPtr_t</type>
      <name>create</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a075764bc79d00afccc97b63409f06fff</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const Contacts_t &amp;contacts, const CenterOfMassComputationPtr_t &amp;com)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const value_type</type>
      <name>G</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>aa02efa92a06c4639d7af0c82c70a5aad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::Matrix&lt; value_type, 6, 1 &gt;</type>
      <name>Gravity</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a2068156d25bbd9fce7a6433134deb3b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::Sum</name>
    <filename>a00035.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>CalculusBase&lt; Sum&lt; LhsValue, RhsValue &gt; &gt;</base>
    <member kind="typedef">
      <type>CalculusBase&lt; Sum&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>Parent_t</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>aaf9bc15e07818d98fd6eed0619f192dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sum</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>acb3a0e886929774b9457b2a20a846de6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sum</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>acf8e2d8a0b7f75b38624d60216f9664a</anchor>
      <arglist>(const CalculusBase&lt; Sum &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sum</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a9746800f6670f0024adae2b5f557a618</anchor>
      <arglist>(const typename Traits&lt; RhsValue &gt;::Ptr_t &amp;rhs, const typename Traits&lt; LhsValue &gt;::Ptr_t &amp;lhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>acb662af114ecba793591826a95e118be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ad3b57adf59b01f463f6e8e9e829e88c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>aabb563179e7ceb681586bb15133e7793</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Expression&lt; LhsValue, RhsValue &gt;::Ptr_t</type>
      <name>e_</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a0d1447946d5d3b43574900c2abd00a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Expression&lt; LhsValue, RhsValue &gt;</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ae418bc31959f758073988e8dd8f6d42c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::SymbolicFunction</name>
    <filename>a00036.html</filename>
    <templarg></templarg>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SymbolicFunction &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a19f4899271593c9c4af30af6041eadca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::weak_ptr&lt; SymbolicFunction &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a0a9c6fe063a588f0b974588a5a130100</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SymbolicFunction</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a38abb1640f57da1712f1372625bb959d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFunction</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>afd601b5472a316493b560571c44d6927</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const typename Traits&lt; Expression &gt;::Ptr_t expr, std::vector&lt; bool &gt; mask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW Ptr_t</type>
      <name>create</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a2449b99ec17b4792591c0b2b9dd200ce</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const typename Traits&lt; Expression &gt;::Ptr_t expr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ptr_t</type>
      <name>create</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a265ddfec9cc5bf95fd6178d15ff915e7</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const typename Traits&lt; Expression &gt;::Ptr_t expr, std::vector&lt; bool &gt; mask)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a11c38aa48713dacdbe472f9163efa652</anchor>
      <arglist>(vectorOut_t result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a3d16ff96ba9b098448f96ba24fcd9674</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>adcbf769c42e31a9679b5b900a9d531f4</anchor>
      <arglist>(const Ptr_t &amp;self)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::Traits</name>
    <filename>a00037.html</filename>
    <templarg>Class</templarg>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; Class &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; Class &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; CrossProduct&lt; LhsValue, RhsValue &gt; &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; CrossProduct&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; CrossProduct&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; Difference&lt; LhsValue, RhsValue &gt; &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; Difference&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; Difference&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; hpp::constraints::CalculusBaseAbstract&lt; value_type, RowJacobianMatrix &gt; &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; hpp::constraints::CalculusBaseAbstract&lt; value_type, RowJacobianMatrix &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; hpp::constraints::CalculusBaseAbstract&lt; value_type, RowJacobianMatrix &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; hpp::constraints::CrossProduct &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; hpp::constraints::CrossProduct &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; hpp::constraints::CrossProduct &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; hpp::constraints::Difference &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; hpp::constraints::Difference &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; hpp::constraints::Difference &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; hpp::constraints::Expression &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; hpp::constraints::Expression &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; hpp::constraints::Expression &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; hpp::constraints::PointCom &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; hpp::constraints::PointCom &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; hpp::constraints::PointCom &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; hpp::constraints::PointInJoint &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; hpp::constraints::PointInJoint &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; hpp::constraints::PointInJoint &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; hpp::constraints::RotationMultiply&lt; hpp::constraints::CrossProduct &gt; &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; hpp::constraints::RotationMultiply&lt; hpp::constraints::CrossProduct &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; hpp::constraints::RotationMultiply&lt; hpp::constraints::CrossProduct &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; JointFrame &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; JointFrame &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; JointFrame &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::Traits&lt; JointTranspose &gt;</name>
    <filename>a00038.html</filename>
    <member kind="typedef">
      <type>JointTranspose</type>
      <name>Ptr_t</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>adbe9ea847b37896d2906b266a4e30c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JointTranspose</type>
      <name>WkPtr_t</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a12c05d075a4107903b8f3253bcae002f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; LhsValue &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; LhsValue &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; LhsValue &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; MatrixOfExpressions&lt; eigen::vector3_t, JacobianMatrix &gt; &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; MatrixOfExpressions&lt; eigen::vector3_t, JacobianMatrix &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; MatrixOfExpressions&lt; eigen::vector3_t, JacobianMatrix &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; MatrixOfExpressions&lt; ValueType, JacobianType &gt; &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; MatrixOfExpressions&lt; ValueType, JacobianType &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; MatrixOfExpressions&lt; ValueType, JacobianType &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::Traits&lt; model::Joint &gt;</name>
    <filename>a00039.html</filename>
    <member kind="typedef">
      <type>JointPtr_t</type>
      <name>Ptr_t</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>a6a03fa404127c86ee6396ff6693f12ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JointPtr_t</type>
      <name>WkPtr_t</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aaa3f3ceded5beaf1fb817b0a515b0c87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; Point &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; Point &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; Point &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; PointCom &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; PointCom &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; PointCom &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; PointInJoint &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; PointInJoint &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; PointInJoint &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; RhsValue &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; RhsValue &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; RhsValue &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; RotationMultiply&lt; RhsValue &gt; &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; RotationMultiply&lt; RhsValue &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; RotationMultiply&lt; RhsValue &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; ScalarMultiply&lt; RhsValue &gt; &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; ScalarMultiply&lt; RhsValue &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; ScalarMultiply&lt; RhsValue &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; ScalarProduct&lt; LhsValue, RhsValue &gt; &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; ScalarProduct&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; ScalarProduct&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; Sum&lt; LhsValue, RhsValue &gt; &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; Sum&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; Sum&lt; LhsValue, RhsValue &gt; &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; T &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; T &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; T &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::constraints::Traits&lt; value_type &gt;</name>
    <filename>a00040.html</filename>
    <member kind="typedef">
      <type>value_type</type>
      <name>Ptr_t</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a51503c51228dbe53826d5a8ca847e332</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>WkPtr_t</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a16507ded51618664c658b8f39d9ee748</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Traits&lt; VectorInJoint &gt;</name>
    <filename>a00037.html</filename>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_REF&lt; VectorInJoint &gt;</type>
      <name>Ptr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a1987f53416b57f16e44d5c77fd5359e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_CB_WKREF&lt; VectorInJoint &gt;</type>
      <name>WkPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a815897fe8ffc4e14c0b3307f8b63d846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::Transformation</name>
    <filename>a00041.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Transformation</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>aa6541c42eaaa266b1e1c9fb97a82246f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a06a6aeb9b2e9a5f1ac52da466310e9b2</anchor>
      <arglist>(const Transform3f &amp;reference)</arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>reference</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a9c86b425d688434d44b2fe723c2754d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_MAKE_ALIGNED_OPERATOR_NEW TransformationPtr_t</type>
      <name>create</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a7a5b1dc8cd38c0096cf6d8d4e52a6cf6</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const Transform3f &amp;reference, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true)(true)(true)(true))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TransformationPtr_t</type>
      <name>create</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a1b145d40c025b98d4c2c7d5dc45ae018</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const Transform3f &amp;reference, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true)(true)(true)(true))</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Transformation</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a2f518d8ded9a01620805b8b915169182</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;, const JointPtr_t &amp;joint1, const Transform3f &amp;reference, std::vector&lt; bool &gt; mask)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a279f65bd0fa878e7b3d08d9e44f3b95d</anchor>
      <arglist>(vectorOut_t result, ConfigurationIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ab51c19b17a4e81e9ca04cc1e941d33cf</anchor>
      <arglist>(matrixOut_t jacobian, ConfigurationIn_t arg) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::constraints::VectorInJoint</name>
    <filename>a00042.html</filename>
    <base>CalculusBase&lt; VectorInJoint &gt;</base>
    <member kind="function">
      <type></type>
      <name>VectorInJoint</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a242cdc0b748347cf84355bec0c194902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorInJoint</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a137006c52bc0ec0e051f2bc07b0759c8</anchor>
      <arglist>(const CalculusBase&lt; VectorInJoint &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorInJoint</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a05460ebb8aed9e9472104985b9daa7ca</anchor>
      <arglist>(const VectorInJoint &amp;vectorInJoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorInJoint</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aed56a7435b4325f5546db4f9619665ac</anchor>
      <arglist>(const JointPtr_t &amp;joint, const vector3_t &amp;vectorInLocalFrame)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorInJoint</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa2fd77cf1ba73b686135099f43702366</anchor>
      <arglist>(const JointPtr_t &amp;joint, const vector3_t &amp;vectorInLocalFrame, const size_type &amp;nbDof)</arglist>
    </member>
    <member kind="function">
      <type>const JointPtr_t &amp;</type>
      <name>joint</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a3c7f03893986cebc1cf1d790862e5116</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const vector3_t &amp;</type>
      <name>vector</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a42c861faea36eb09f092d4f6ee19fa5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_value</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ae5a762d072d5539b2acfbb2312f630d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a11e0a2831017d34049e35346b1149e1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeCrossRXl</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aeea79e893cc4b54085fa63dde92b47a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointPtr_t</type>
      <name>joint_</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a1a6f2628ccb8c3ff33a381bc06094beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3_t</type>
      <name>vector_</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a8a52336e90293db7fb102b88a20843f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>vector3_t</type>
      <name>g_</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a6e9d95526d943efc8124519098d5fae1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp</name>
    <filename>a00066.html</filename>
    <namespace>hpp::constraints</namespace>
    <namespace>hpp::eigen</namespace>
  </compound>
  <compound kind="namespace">
    <name>hpp::constraints</name>
    <filename>a00067.html</filename>
    <namespace>hpp::constraints::eigen</namespace>
    <class kind="class">hpp::constraints::CalculusBase</class>
    <class kind="class">hpp::constraints::CalculusBaseAbstract</class>
    <class kind="class">hpp::constraints::ComBetweenFeet</class>
    <class kind="class">hpp::constraints::ConfigurationConstraint</class>
    <class kind="class">hpp::constraints::ConvexShape</class>
    <class kind="class">hpp::constraints::ConvexShapeContact</class>
    <class kind="class">hpp::constraints::ConvexShapeContactComplement</class>
    <class kind="class">hpp::constraints::CrossProduct</class>
    <class kind="class">hpp::constraints::Difference</class>
    <class kind="class">hpp::constraints::DifferentiableFunction</class>
    <class kind="class">hpp::constraints::DistanceBetweenBodies</class>
    <class kind="class">hpp::constraints::DistanceBetweenPointsInBodies</class>
    <class kind="class">hpp::constraints::Expression</class>
    <class kind="class">hpp::constraints::GenericTransformation</class>
    <class kind="class">hpp::constraints::JointFrame</class>
    <class kind="struct">hpp::constraints::JointTranspose</class>
    <class kind="class">hpp::constraints::MatrixOfExpressions</class>
    <class kind="class">hpp::constraints::Orientation</class>
    <class kind="class">hpp::constraints::Point</class>
    <class kind="class">hpp::constraints::PointCom</class>
    <class kind="class">hpp::constraints::PointInJoint</class>
    <class kind="class">hpp::constraints::Position</class>
    <class kind="class">hpp::constraints::QPStaticStability</class>
    <class kind="class">hpp::constraints::RelativeCom</class>
    <class kind="class">hpp::constraints::RelativeOrientation</class>
    <class kind="class">hpp::constraints::RelativePosition</class>
    <class kind="class">hpp::constraints::RelativeTransformation</class>
    <class kind="class">hpp::constraints::RotationMultiply</class>
    <class kind="class">hpp::constraints::ScalarMultiply</class>
    <class kind="class">hpp::constraints::ScalarProduct</class>
    <class kind="class">hpp::constraints::StaticStability</class>
    <class kind="class">hpp::constraints::Sum</class>
    <class kind="class">hpp::constraints::SymbolicFunction</class>
    <class kind="struct">hpp::constraints::Traits</class>
    <class kind="struct">hpp::constraints::Traits&lt; JointTranspose &gt;</class>
    <class kind="struct">hpp::constraints::Traits&lt; model::Joint &gt;</class>
    <class kind="struct">hpp::constraints::Traits&lt; value_type &gt;</class>
    <class kind="class">hpp::constraints::Transformation</class>
    <class kind="class">hpp::constraints::VectorInJoint</class>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 5, 1 &gt;</type>
      <name>vector5_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a61a6190065778aa215303d3b8a503f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::ObjectVector_t</type>
      <name>ObjectVector_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a5e4936b13bab4df6417026cf9e5e414c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::CollisionObjectPtr_t</type>
      <name>CollisionObjectPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad92daab926d11ed6b15471e78f0a6ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::Configuration_t</type>
      <name>Configuration_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad36515bd361fd258285842071dce99ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::ConfigurationIn_t</type>
      <name>ConfigurationIn_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a418980181fabf52dfc9b96a388a5d2a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::ConfigurationOut_t</type>
      <name>ConfigurationOut_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3dc7a35f0d4f9cd3f71aa0e6b289f530</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::Device</type>
      <name>Device</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ac53c0ab01c98e6eda22b116505814076</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::DevicePtr_t</type>
      <name>DevicePtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a7a61439cf039f5105a594e28c45376d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::CenterOfMassComputation</type>
      <name>CenterOfMassComputation</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aa30c4c20f61e31eb4d07bf2ff32490d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::CenterOfMassComputationPtr_t</type>
      <name>CenterOfMassComputationPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad6f0521e0ec0b0879f40b1ad07171278</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DifferentiableFunction &gt;</type>
      <name>DifferentiableFunctionPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af86fed84ae43e85f9e8643a5af42feb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::size_type</type>
      <name>size_type</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af93e03020b02d95109a6de6d72bd4e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::value_type</type>
      <name>value_type</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a7edbf4e735704ab9334f587122a292f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::JointPtr_t</type>
      <name>JointPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a882997f2edbb98ca7ce9db52aaab0bd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::vector3_t</type>
      <name>vector3_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>afb829a8e1f55ae982a2cabc013a13e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::matrix3_t</type>
      <name>matrix3_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a0084c48241b48e4c72f60d16247f4461</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::matrix_t</type>
      <name>matrix_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ade7dd4334133747a4f601e0e0e685779</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; const matrix_t &gt;</type>
      <name>matrixIn_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>adda38afd03d9829e1f876c58eec0c9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Ref&lt; matrix_t &gt;</type>
      <name>matrixOut_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ac27371d812fbe3af3375c781f7cd5e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::vector_t</type>
      <name>vector_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af083ddca1bc82df1ee39b487a58bbd00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::vectorIn_t</type>
      <name>vectorIn_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a610ddbc627eb91f8b130869746ab8bf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::vectorOut_t</type>
      <name>vectorOut_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a766ab9d00c7942a4a88a173fcb855156</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::ComJacobian_t</type>
      <name>ComJacobian_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a82cf992dbcda9db8439f97d9757b0938</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::JointJacobian_t</type>
      <name>JointJacobian_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a75f2b45df65a743e2acbd287b6d85cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::Transform3f</type>
      <name>Transform3f</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a20062c5987b884c903dbb5c7db6a2bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DistanceBetweenBodies &gt;</type>
      <name>DistanceBetweenBodiesPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae8aa66db0f13be7f030a9786660cbd50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DistanceBetweenPointsInBodies &gt;</type>
      <name>DistanceBetweenPointsInBodiesPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a15ee3f237e65b880c44706b41a8f8a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Orientation &gt;</type>
      <name>OrientationPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>adaa3650e7328397eafdf880365e314c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Position &gt;</type>
      <name>PositionPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>adb8f4d210fca36e53a12b5eb3960ece6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Transformation &gt;</type>
      <name>TransformationPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a26c24f12d8ffb5c4f2572dc6e4773d60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativeOrientation &gt;</type>
      <name>RelativeOrientationPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>acba64d3d130ab6869c5e2e5f566e0431</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativeCom &gt;</type>
      <name>RelativeComPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a4684a56a58b53b91a25746d4edff4650</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ComBetweenFeet &gt;</type>
      <name>ComBetweenFeetPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a935f1eb16b84796192b86a91af021419</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativePosition &gt;</type>
      <name>RelativePositionPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ac0bc5df5ffd19f9dec87b96e76afd819</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RelativeTransformation &gt;</type>
      <name>RelativeTransformationPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af4db8d10953253fa720cae60e5f6bdcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConvexShapeContact &gt;</type>
      <name>ConvexShapeContactPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aa74ca38325b6bc6dc38657cd1c80c755</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConvexShapeContactComplement &gt;</type>
      <name>ConvexShapeContactComplementPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a0f8a402193410e7679ea2a7c9178414d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; StaticStability &gt;</type>
      <name>StaticStabilityPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad54fc72681dcd79a25c2b77bac619b71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; QPStaticStability &gt;</type>
      <name>QPStaticStabilityPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3dd563dbf1b5b8560d2beb62bef7b00f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigurationConstraint &gt;</type>
      <name>ConfigurationConstraintPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a4830fba26342da49bd199af4a2411344</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_DEPRECATED ConvexShapeContact</type>
      <name>StaticStabilityGravity</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af95c1f506b5959e248368885afd5f653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_DEPRECATED ConvexShapeContactComplement</type>
      <name>StaticStabilityGravityComplement</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a9856a331291063d631db35a3ae6255e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_DEPRECATED ConvexShapeContactPtr_t</type>
      <name>StaticStabilityGravityPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a490b1e61263165c09c5fcd3773b59e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HPP_CONSTRAINTS_DEPRECATED ConvexShapeContactComplementPtr_t</type>
      <name>StaticStabilityGravityComplementPtr_t</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>abe9fe9175df03855de4dddf730839b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; PositionBit|OrientationBit &gt;</type>
      <name>Transformation2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>gaa150d4ab5c8f3858772af332f3d4ba79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; PositionBit &gt;</type>
      <name>Position2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga298f3bce23cfd4b26908a780f6d54bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; OrientationBit &gt;</type>
      <name>Orientation2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga7a6a28aa4fd89aa0eeb7b7fc79eae66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|PositionBit|OrientationBit &gt;</type>
      <name>RelativeTransformation2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>gab4b0536c297c0603f0e53e451e80c8f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|PositionBit &gt;</type>
      <name>RelativePosition2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga0af548908917b580d64f1deca42ca5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|OrientationBit &gt;</type>
      <name>RelativeOrientation2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga80bfc99b3d0a24672ad3d20e270255c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>eigen::matrix3_t</type>
      <name>CrossMatrix</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>gac3ce1835b556d06ebbd5598435c1ccac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 1, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>RowJacobianMatrix</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>gac9f4b1bc8b7f541c249d43d07cf541bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 3, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>JacobianMatrix</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ga515568ec06f6831be43ab4f95c122650</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closestPointToSegment</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aa52ba6e7c7b5f4aa5a009f8b1b32cee7</anchor>
      <arglist>(const fcl::Vec3f &amp;P, const fcl::Vec3f &amp;A, const fcl::Vec3f &amp;v, fcl::Vec3f &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga962ff736acd3e22ec80fd5c21a729c26</anchor>
      <arglist>(std::ostream &amp;os, const DifferentiableFunction &amp;f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a2b81f2c271a0cb8efa89e0ac8c549e80</anchor>
      <arglist>(DifferentiableFunction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ac1d4300ab7f40d189e6ecbf85d25c47c</anchor>
      <arglist>(DistanceBetweenBodies)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a9e64bad770c2cae3d8ae20097fbb59df</anchor>
      <arglist>(DistanceBetweenPointsInBodies)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ac841734490995e86f7ba900df8dbb5eb</anchor>
      <arglist>(Orientation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>abc4053774f96bc739dcc057973d2635f</anchor>
      <arglist>(Position)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a181d4d2bf4b8e812d0ef2d44f7086fd1</anchor>
      <arglist>(Transformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a48f490d8993173637421d83ed6dd5ea9</anchor>
      <arglist>(RelativeCom)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad9d3264a2664eae8b6a746bef9257444</anchor>
      <arglist>(ComBetweenFeet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3304543b7c9634e1727839682df05dee</anchor>
      <arglist>(RelativeOrientation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aff3a1d48c1e21b009022563fda0d9958</anchor>
      <arglist>(RelativePosition)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a07bdd7a5317a2dd8781f39c92ffc2642</anchor>
      <arglist>(RelativeTransformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3e6a69d9efcf95fb24bc700c44d4c07c</anchor>
      <arglist>(StaticStability)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a313654249287e5a86d3d216006831fcf</anchor>
      <arglist>(QPStaticStability)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad502d2cbbe178f788ae742865de9928c</anchor>
      <arglist>(ConvexShapeContact)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae4d24e70d40b78704b406ee378a0da13</anchor>
      <arglist>(ConvexShapeContactComplement)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>afc4e6e75743061bf13439d2e971ba412</anchor>
      <arglist>(ConfigurationConstraint)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Eigen::Ref&lt; const typename SVD::MatrixUType &gt;</type>
      <name>getU1</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>abca6a7c1ea3c15b230e798637fb1a245</anchor>
      <arglist>(const SVD &amp;svd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Eigen::Ref&lt; const typename SVD::MatrixUType &gt;</type>
      <name>getU2</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>abf280a90f74763a56a73baa51c3c18fc</anchor>
      <arglist>(const SVD &amp;svd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Eigen::Ref&lt; const typename SVD::MatrixUType &gt;</type>
      <name>getV1</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a20e41db5887dcc0e521376456df05ea8</anchor>
      <arglist>(const SVD &amp;svd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Eigen::Ref&lt; const typename SVD::MatrixUType &gt;</type>
      <name>getV2</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aaa66e5f73e2d74e66d6a6b8294a89e1d</anchor>
      <arglist>(const SVD &amp;svd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>pseudoInverse</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aee7a1aa205ea73b31df2424a77648e45</anchor>
      <arglist>(const SVD &amp;svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; pinvmat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectorOnSpan</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a1900d47920ae44fadb39669ebe4096b6</anchor>
      <arglist>(const SVD svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; projector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectorOnSpanOfInv</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae6d5afc01c0e5557d34bd75629dfe310</anchor>
      <arglist>(const SVD svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; projector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectorOnKernel</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a223f6574faa0cbaf988a6019af37f06e</anchor>
      <arglist>(const SVD svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; projector, const bool &amp;computeFullV=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectorOnKernelOfInv</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a27dacc558cfd1909beb691e1d1e0ce47</anchor>
      <arglist>(const SVD svd, Eigen::Ref&lt; typename SVD::MatrixType &gt; projector, const bool &amp;computeFullU=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLog</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a43dbc8703fa66f494fe5be4c438768cb</anchor>
      <arglist>(vectorOut_t result, double &amp;theta, const fcl::Matrix3f &amp;Rerror)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJlog</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a047463b927e7996b1cf82a0b2d9c50a8</anchor>
      <arglist>(const double &amp;theta, vectorIn_t r, eigen::matrix3_t &amp;Jlog)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeCrossMatrix</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aaa04907a27384cb8b798b742fa5ed369</anchor>
      <arglist>(const VectorType &amp;v, MatrixType &amp;m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OutType</type>
      <name>convert</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>abd637faeb58c7889f2c194b26207e6a1</anchor>
      <arglist>(const InType &amp;in, const std::size_t s)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>RelativeBit</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad0937f491bf9d868c367f8e5b1534459</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>PositionBit</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad70b41ea2207fcc52850cbfe5444b44d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>OrientationBit</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad210c3ef69740ea4722aac40214b2b33</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::constraints::eigen</name>
    <filename>a00068.html</filename>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
      <name>matrix3_t</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a6797f92ee716e5e8f825dfd48ba2e08e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 1 &gt;</type>
      <name>vector3_t</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ae36a3b62b49767aeb30c2ec93fc003d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::eigen</name>
    <filename>a00069.html</filename>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 3 &gt;</type>
      <name>matrix3_t</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ac0cb6b841a46760c4304365d55253a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, 3, 1 &gt;</type>
      <name>vector3_t</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a58e5d785239b0a1cd675e29d437d1960</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>symbolic_calculus</name>
    <title>Symbolic calculus</title>
    <filename>a00071.html</filename>
    <class kind="class">hpp::constraints::CalculusBaseAbstract</class>
    <class kind="struct">hpp::constraints::Traits</class>
    <class kind="class">hpp::constraints::Expression</class>
    <class kind="class">hpp::constraints::CrossProduct</class>
    <class kind="class">hpp::constraints::ScalarProduct</class>
    <class kind="class">hpp::constraints::Difference</class>
    <class kind="class">hpp::constraints::Sum</class>
    <class kind="class">hpp::constraints::ScalarMultiply</class>
    <class kind="class">hpp::constraints::RotationMultiply</class>
    <class kind="struct">hpp::constraints::Traits&lt; value_type &gt;</class>
    <class kind="struct">hpp::constraints::Traits&lt; model::Joint &gt;</class>
    <class kind="struct">hpp::constraints::JointTranspose</class>
    <class kind="struct">hpp::constraints::Traits&lt; JointTranspose &gt;</class>
    <class kind="class">hpp::constraints::CalculusBase</class>
    <class kind="class">hpp::constraints::PointInJoint</class>
    <class kind="class">hpp::constraints::VectorInJoint</class>
    <class kind="class">hpp::constraints::Point</class>
    <class kind="class">hpp::constraints::PointCom</class>
    <class kind="class">hpp::constraints::JointFrame</class>
    <class kind="class">hpp::constraints::MatrixOfExpressions</class>
    <member kind="typedef">
      <type>eigen::matrix3_t</type>
      <name>CrossMatrix</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>gac3ce1835b556d06ebbd5598435c1ccac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 1, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>RowJacobianMatrix</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>gac9f4b1bc8b7f541c249d43d07cf541bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 3, Eigen::Dynamic, Eigen::RowMajor &gt;</type>
      <name>JacobianMatrix</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ga515568ec06f6831be43ab4f95c122650</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>constraints</name>
    <title>Constraints</title>
    <filename>a00072.html</filename>
    <class kind="struct">hpp::constraints::ConvexShapeContact::ForceData</class>
    <class kind="class">hpp::constraints::ConvexShapeContact</class>
    <class kind="class">hpp::constraints::ConvexShapeContactComplement</class>
    <class kind="class">hpp::constraints::DifferentiableFunction</class>
    <class kind="class">hpp::constraints::GenericTransformation</class>
    <class kind="class">hpp::constraints::Orientation</class>
    <class kind="class">hpp::constraints::Position</class>
    <class kind="class">hpp::constraints::QPStaticStability</class>
    <class kind="class">hpp::constraints::RelativeCom</class>
    <class kind="class">hpp::constraints::RelativeOrientation</class>
    <class kind="class">hpp::constraints::RelativePosition</class>
    <class kind="class">hpp::constraints::RelativeTransformation</class>
    <class kind="struct">hpp::constraints::StaticStability::Contact_t</class>
    <class kind="class">hpp::constraints::StaticStability</class>
    <class kind="class">hpp::constraints::Transformation</class>
    <member kind="typedef">
      <type>GenericTransformation&lt; PositionBit|OrientationBit &gt;</type>
      <name>Transformation2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>gaa150d4ab5c8f3858772af332f3d4ba79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; PositionBit &gt;</type>
      <name>Position2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga298f3bce23cfd4b26908a780f6d54bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; OrientationBit &gt;</type>
      <name>Orientation2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga7a6a28aa4fd89aa0eeb7b7fc79eae66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|PositionBit|OrientationBit &gt;</type>
      <name>RelativeTransformation2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>gab4b0536c297c0603f0e53e451e80c8f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|PositionBit &gt;</type>
      <name>RelativePosition2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga0af548908917b580d64f1deca42ca5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|OrientationBit &gt;</type>
      <name>RelativeOrientation2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga80bfc99b3d0a24672ad3d20e270255c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga962ff736acd3e22ec80fd5c21a729c26</anchor>
      <arglist>(std::ostream &amp;os, const DifferentiableFunction &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title></title>
    <filename>index</filename>
    <docanchor file="index" title="Introduction">sec_intro_hpp_model</docanchor>
    <docanchor file="index" title="Main classes">sec_hpp_model_main_classes</docanchor>
    <docanchor file="index" title="Joints">subsec_hpp_model_joint</docanchor>
    <docanchor file="index" title="Joint configuration">hpp_model_joint_configuration</docanchor>
    <docanchor file="index" title="Device">subsec_hpp_model_device</docanchor>
    <docanchor file="index">Configuration</docanchor>
    <docanchor file="index">Velocity</docanchor>
    <docanchor file="index" title="Operations between configurations and velocities">hpp_model_operation_between_configurations_and_velocities</docanchor>
  </compound>
</tagfile>
