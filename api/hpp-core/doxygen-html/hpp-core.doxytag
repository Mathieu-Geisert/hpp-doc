<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>basic-configuration-shooter.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00087</filename>
    <includes id="a00097" name="configuration-shooter.hh" local="no" imported="no">hpp/core/configuration-shooter.hh</includes>
    <class kind="class">hpp::core::BasicConfigurationShooter</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>body-pair-collision.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/src/continuous-collision-checking/progressive/</path>
    <filename>a00088</filename>
    <includes id="a00152" name="straight-path.hh" local="no" imported="no">hpp/core/straight-path.hh</includes>
    <includes id="a00117" name="interpolated-path.hh" local="no" imported="no">hpp/core/interpolated-path.hh</includes>
    <class kind="struct">hpp::core::continuousCollisionChecking::progressive::CoefficientVelocity</class>
    <class kind="struct">hpp::core::continuousCollisionChecking::progressive::PathVelocity</class>
    <class kind="class">hpp::core::continuousCollisionChecking::progressive::BodyPairCollision</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::continuousCollisionChecking</namespace>
    <namespace>hpp::core::continuousCollisionChecking::progressive</namespace>
    <member kind="typedef">
      <type>std::vector&lt; CoefficientVelocity &gt;</type>
      <name>CoefficientVelocities_t</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a995e107e7bc572acad40e042f4fd3c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga521fd61da699d9e61add000705df570c</anchor>
      <arglist>(BodyPairCollision)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision-path-validation-report.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00089</filename>
    <includes id="a00132" name="path-validation-report.hh" local="no" imported="no">hpp/core/path-validation-report.hh</includes>
    <includes id="a00090" name="collision-validation-report.hh" local="no" imported="no">hpp/core/collision-validation-report.hh</includes>
    <class kind="struct">hpp::core::CollisionPathValidationReport</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>collision-validation-report.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00090</filename>
    <includes id="a00154" name="validation-report.hh" local="no" imported="no">hpp/core/validation-report.hh</includes>
    <class kind="struct">hpp::core::CollisionValidationReport</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>collision-validation.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00091</filename>
    <includes id="a00090" name="collision-validation-report.hh" local="no" imported="no">hpp/core/collision-validation-report.hh</includes>
    <includes id="a00095" name="config-validation.hh" local="no" imported="no">hpp/core/config-validation.hh</includes>
    <class kind="class">hpp::core::CollisionValidation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>comparison-type.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00092</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::ComparisonType</class>
    <class kind="class">hpp::core::Equality</class>
    <class kind="class">hpp::core::EqualToZero</class>
    <class kind="class">hpp::core::ComparisonTypes</class>
    <class kind="class">hpp::core::Inequality</class>
    <class kind="class">hpp::core::Inequality</class>
    <class kind="class">hpp::core::DoubleInequality</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <member kind="typedef">
      <type>Inequality&lt; ComparisonType::Superior &gt;</type>
      <name>SuperiorIneq</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>ga07ff2078ca5d2e762bfe31c1207cc7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inequality&lt; ComparisonType::Inferior &gt;</type>
      <name>InferiorIneq</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>gaaaf8442127c6ec24c54c43b4ec9d125f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SuperiorIneq &gt;</type>
      <name>SuperiorPtr_t</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>gaccaf36101f017c928100815751d4ba5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; InferiorIneq &gt;</type>
      <name>InferiorPtr_t</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>gaf3261ebb78e0323141ab1c544a844020</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>config-optimization.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/path-optimization/</path>
    <filename>a00093</filename>
    <includes id="a00129" name="path-optimizer.hh" local="no" imported="no">hpp/core/path-optimizer.hh</includes>
    <includes id="a00134" name="path-vector.hh" local="no" imported="no">hpp/core/path-vector.hh</includes>
    <class kind="struct">hpp::core::pathOptimization::ConfigOptimizationTraits</class>
    <class kind="class">hpp::core::pathOptimization::ConfigOptimization</class>
    <class kind="struct">hpp::core::pathOptimization::ConfigOptimization::Parameters</class>
    <class kind="struct">hpp::core::pathOptimization::ConfigOptimization::Optimizer</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
  </compound>
  <compound kind="file">
    <name>config-projector.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00094</filename>
    <includes id="a00100" name="constraint.hh" local="no" imported="no">hpp/core/constraint.hh</includes>
    <includes id="a00092" name="comparison-type.hh" local="no" imported="no">hpp/core/comparison-type.hh</includes>
    <includes id="a00124" name="numerical-constraint.hh" local="no" imported="no">hpp/core/numerical-constraint.hh</includes>
    <class kind="class">hpp::core::ConfigProjector</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>config-validation.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00095</filename>
    <includes id="a00154" name="validation-report.hh" local="no" imported="no">hpp/core/validation-report.hh</includes>
    <includes id="a00147" name="relative-motion.hh" local="no" imported="no">hpp/core/relative-motion.hh</includes>
    <class kind="class">hpp::core::ConfigValidation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>config-validations.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00096</filename>
    <includes id="a00095" name="config-validation.hh" local="no" imported="no">hpp/core/config-validation.hh</includes>
    <class kind="class">hpp::core::ConfigValidations</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>configuration-shooter.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00097</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::ConfigurationShooter</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>connected-component.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00098</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00123" name="node.hh" local="no" imported="no">hpp/core/node.hh</includes>
    <class kind="class">hpp::core::ConnectedComponent</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>constraint-set.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00099</filename>
    <includes id="a00100" name="constraint.hh" local="no" imported="no">hpp/core/constraint.hh</includes>
    <class kind="class">hpp::core::ConstraintSet</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>constraint.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00100</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::Constraint</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>gac19b1e5c7ce1ad90ee52aa3491bd2e9f</anchor>
      <arglist>(std::ostream &amp;os, const Constraint &amp;constraint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>container.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00101</filename>
    <class kind="class">hpp::core::Containers</class>
    <class kind="struct">hpp::core::Containers::traits</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>cost.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/path-optimization/</path>
    <filename>a00102</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::pathOptimization::Cost</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
  </compound>
  <compound kind="file">
    <name>continuous-collision-checking/dichotomy.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/continuous-collision-checking/</path>
    <filename>a00103</filename>
    <includes id="a00089" name="collision-path-validation-report.hh" local="no" imported="no">hpp/core/collision-path-validation-report.hh</includes>
    <includes id="a00133" name="path-validation.hh" local="no" imported="no">hpp/core/path-validation.hh</includes>
    <class kind="class">hpp::core::continuousCollisionChecking::Dichotomy</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::continuousCollisionChecking</namespace>
    <namespace>hpp::core::continuousCollisionChecking::dichotomy</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BodyPairCollision &gt;</type>
      <name>BodyPairCollisionPtr_t</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>gacb1c39e153c6655e0cae887b7fd1ab2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; BodyPairCollisionPtr_t &gt;</type>
      <name>BodyPairCollisions_t</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga4c266add883459e283d131572adf7508</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>gab13c9e4772035258ef0d4d83d36b1a8e</anchor>
      <arglist>(BodyPairCollision)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>path-projector/dichotomy.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/path-projector/</path>
    <filename>a00104</filename>
    <includes id="a00131" name="path-projector.hh" local="yes" imported="no">hpp/core/path-projector.hh</includes>
    <class kind="class">hpp::core::pathProjector::Dichotomy</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathProjector</namespace>
  </compound>
  <compound kind="file">
    <name>diffusing-planner.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00105</filename>
    <includes id="a00130" name="path-planner.hh" local="no" imported="no">hpp/core/path-planner.hh</includes>
    <class kind="class">hpp::core::DiffusingPlanner</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>discretized-collision-checking.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00106</filename>
    <includes id="a00132" name="path-validation-report.hh" local="no" imported="no">hpp/core/path-validation-report.hh</includes>
    <includes id="a00107" name="discretized-path-validation.hh" local="no" imported="no">hpp/core/discretized-path-validation.hh</includes>
    <class kind="class">hpp::core::DiscretizedCollisionChecking</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>discretized-path-validation.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00107</filename>
    <includes id="a00133" name="path-validation.hh" local="no" imported="no">hpp/core/path-validation.hh</includes>
    <class kind="class">hpp::core::DiscretizedPathValidation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>distance-between-objects.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00108</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::DistanceBetweenObjects</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>distance.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00109</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00123" name="node.hh" local="no" imported="no">hpp/core/node.hh</includes>
    <class kind="class">hpp::core::Distance</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>edge.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00110</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::Edge</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>equation.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00111</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00092" name="comparison-type.hh" local="no" imported="no">hpp/core/comparison-type.hh</includes>
    <class kind="class">hpp::core::Equation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>explicit-numerical-constraint.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00112</filename>
    <includes id="a00124" name="numerical-constraint.hh" local="no" imported="no">hpp/core/numerical-constraint.hh</includes>
    <class kind="class">hpp::core::ExplicitNumericalConstraint</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>explicit-relative-transformation.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00113</filename>
    <includes id="a00112" name="explicit-numerical-constraint.hh" local="no" imported="no">hpp/core/explicit-numerical-constraint.hh</includes>
    <class kind="class">hpp::core::ExplicitRelativeTransformation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>fwd.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00001</filename>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::continuousCollisionChecking</namespace>
    <namespace>hpp::core::nearestNeighbor</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
    <namespace>hpp::core::pathProjector</namespace>
    <namespace>hpp::core::steeringMethod</namespace>
    <namespace>hpp::core::problemTarget</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ComparisonType &gt;</type>
      <name>ComparisonTypePtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a514a138b44e473a113fa7d20dac23f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Equality &gt;</type>
      <name>EqualityPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a8be06dc19c81c94ba8bc866b93ac21f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; EqualToZero &gt;</type>
      <name>EqualToZeroPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a394609b30ab634b18d86581e4c4e76fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ComparisonTypes &gt;</type>
      <name>ComparisonTypesPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>adac2b7d14b18b46317459a25ee20fcb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DoubleInequality &gt;</type>
      <name>DoubleInequalityPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>abf4b9699642d5b95dc1f23d920d2ca34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BasicConfigurationShooter &gt;</type>
      <name>BasicConfigurationShooterPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a39013e53c64524c2d1c43724cfca784f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::model::Body</type>
      <name>Body</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a92f2c35fa84d036d19b283a69845e94e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::model::BodyPtr_t</type>
      <name>BodyPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>abb8a8457dcebb34665cf40b33314a7f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionPathValidationReport &gt;</type>
      <name>CollisionPathValidationReportPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ade0108edfd5efe11699a893ac2cdfec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CollisionPathValidationReport &gt;</type>
      <name>CollisionPathValidationReports_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa28f6ce0bbe980544c5e7efc63ce9038</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionValidation &gt;</type>
      <name>CollisionValidationPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a5ba952d2597ae21f5cd6f8d9d28e1c6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionValidationReport &gt;</type>
      <name>CollisionValidationReportPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a9c7932fefd2d84bac3e94fa0ed7f1154</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::CollisionObjectPtr_t</type>
      <name>CollisionObjectPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a3a076e9a013c9009fee520a0ab863e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::Configuration_t</type>
      <name>Configuration_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a037e2082076da74f11789e522c85effa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::ConfigurationIn_t</type>
      <name>ConfigurationIn_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a7efa4075b56c5c57683530d304f28c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::ConfigurationOut_t</type>
      <name>ConfigurationOut_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad685339fc55002540b62369038cef2ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::ConfigurationPtr_t</type>
      <name>ConfigurationPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ae8ddad7de4abe63be497614a0c6ce3a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ConfigurationPtr_t &gt;</type>
      <name>Configurations_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a555df35840ca80af0778fa3589522419</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Configurations_t::iterator</type>
      <name>ConfigIterator_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a76d9d091e942b1f40871a71420e99094</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Configurations_t::const_iterator</type>
      <name>ConfigConstIterator_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a8f6b83824859081b28bae9342ed0b3e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigurationShooter &gt;</type>
      <name>ConfigurationShooterPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac2f4ac8058ccd404c47481f65cbfc5f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigProjector &gt;</type>
      <name>ConfigProjectorPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a87a37d1e50af286182f596142bd92b9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigValidation &gt;</type>
      <name>ConfigValidationPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a030f93d853343d7f5a4b661450080e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigValidations &gt;</type>
      <name>ConfigValidationsPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa53b4b5b3da1f2df3002677b8e09ef42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConnectedComponent &gt;</type>
      <name>ConnectedComponentPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a87c561eb5d2515b1565dcd2af9f4fa35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; ConnectedComponentPtr_t &gt;</type>
      <name>ConnectedComponents_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a0a0f76f318c278589f3e0864028da2b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Constraint &gt;</type>
      <name>ConstraintPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aae51393dbe50864be441251296aa1aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConstraintSet &gt;</type>
      <name>ConstraintSetPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa0c7dcd4ad373beb17324b76f4aebbd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const ConstraintSet &gt;</type>
      <name>ConstraintSetConstPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa8956276a26006f945ec6e51a9bcd34e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; ConstraintPtr_t &gt;</type>
      <name>Constraints_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>adb2ff8cfb4463f5dea2f9fcf3ba019b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::Device</type>
      <name>Device_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>af55f1801c9be8f1a38cfec3a01e5e691</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::DevicePtr_t</type>
      <name>DevicePtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a64d249ab7bf6122a82c517666267fd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::DeviceWkPtr_t</type>
      <name>DeviceWkPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad7596366438650e212c16538fc6ffa11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::CenterOfMassComputationPtr_t</type>
      <name>CenterOfMassComputationPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a391140cb97501f13a503bfc24a29dc9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; DevicePtr_t &gt;</type>
      <name>Devices_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aacc07c1f8902ecc52457eaa7dea4917b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::DifferentiableFunction</type>
      <name>DifferentiableFunction</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac2e7f3781b4fe72388e13d49651e677f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::DifferentiableFunctionPtr_t</type>
      <name>DifferentiableFunctionPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>acadaa17624fe50d234d025e370d2079d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DiffusingPlanner &gt;</type>
      <name>DiffusingPlannerPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a45f0c26b60d1cdb9d2ad70fc02bf5bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DiscretizedCollisionChecking &gt;</type>
      <name>DiscretizedCollisionCheckingPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aaca3dcf93021abb202ae3eba99eb7554</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DiscretizedPathValidation &gt;</type>
      <name>DiscretizedPathValidationPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a003eaf891bb8e2307f5f08909007a0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Distance &gt;</type>
      <name>DistancePtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a86df25709d657aa5607817e510a95434</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DistanceBetweenObjects &gt;</type>
      <name>DistanceBetweenObjectsPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ae0de76904f27310b270370cdabd0359c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::DistanceResult</type>
      <name>DistanceResult</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad57aef5d23b02705e961845dbe7eba54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::DistanceResults_t</type>
      <name>DistanceResults_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa62803f4c1aca1f31fd895e15cf259d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Edge *</type>
      <name>EdgePtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a5ba26e20e074d0ce7db359cf5788ec86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; Edge * &gt;</type>
      <name>Edges_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a6b045aa2ba41d2f8119c931479abd276</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ExplicitNumericalConstraint &gt;</type>
      <name>ExplicitNumericalConstraintPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac1f8b1229e8158444ddbb95f829cb3e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ExplicitRelativeTransformation &gt;</type>
      <name>ExplicitRelativeTransformationPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad50c1ff9385ff190ff0a78a564a0c7a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ExtractedPath &gt;</type>
      <name>ExtractedPathPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a03775a562555949e27a8558513c1d55e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::JointJacobian_t</type>
      <name>JointJacobian_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a3990de24365bee830f894feed3e05876</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::Joint</type>
      <name>Joint</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>acf4c1eb81ef255ba2f353eac373b44f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::JointConstPtr_t</type>
      <name>JointConstPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a07e2f08a3aa44fb05f61e954d2f791b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::JointPtr_t</type>
      <name>JointPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a6d4bb29a5d2f99b5a44ac658551e658e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; JointBoundValidation &gt;</type>
      <name>JointBoundValidationPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac84e30c13037c7becde45492054e20c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; JointBoundValidationReport &gt;</type>
      <name>JointBoundValidationReportPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aef1173e2689796b1fd597ee426ef75e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::HalfJointJacobian_t</type>
      <name>HalfJointJacobian_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a33f7d9fbb8de9304cc262bae11fdf564</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::JointVector_t</type>
      <name>JointVector_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa59d7c01766c5ef1ea76704e24b4a28c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KDTree *</type>
      <name>KDTreePtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a8b4e1106dc1ea73492a8b34dd3dd1480</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; LockedJoint &gt;</type>
      <name>LockedJointPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ab723a2e17566c45f9aceadda1c02b3fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Equation &gt;</type>
      <name>EquationPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a574f68e832b7a494bb8bd0b7d2be3772</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const LockedJoint &gt;</type>
      <name>LockedJointConstPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a42f838026e9d7d5c488bf2b7ccc03716</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; NumericalConstraint &gt;</type>
      <name>NumericalConstraintPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>acca9c4fa413ab40080f8bd3b77d92d54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; LockedJointPtr_t &gt;</type>
      <name>LockedJoints_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a7ca20732fb1d53feb9944df404fa39c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::matrix_t</type>
      <name>matrix_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a518e378f04b43f695fbc4c6dbc2c6a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::matrixIn_t</type>
      <name>matrixIn_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>af55f0f0f180b108c82a9059780206ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::matrixOut_t</type>
      <name>matrixOut_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ae599e865ecccaaaea7128e34451ee4fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::size_type</type>
      <name>size_type</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a0650844e4f9492232bd719a86ca51c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::value_type</type>
      <name>value_type</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>af5f0522acc7cc30518ff2e65a8e012cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; value_type, value_type &gt;</type>
      <name>interval_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa1eaaf92fb6075a80b6429631fe3e7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; size_type, size_type &gt;</type>
      <name>SizeInterval_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad78423503529e47ad9f90dce5f513fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; SizeInterval_t &gt;</type>
      <name>SizeIntervals_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a4221ad634b8be0202f321a91b362d4de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; SizeIntervals_t &gt;</type>
      <name>IntervalsContainer_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a81151427d398bdb7baa114509bbb2cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Node *</type>
      <name>NodePtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aaa1154a22c5a3cc1cbce0ab6cef46568</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; NodePtr_t &gt;</type>
      <name>Nodes_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac612183d50fd36786841219d1c05799b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; NodePtr_t &gt;</type>
      <name>NodeVector_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a36540bea2751b959b990f9ce06d1e984</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::ObjectVector_t</type>
      <name>ObjectVector_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a62fb0fffc32477ddaff5df19574c2766</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Path &gt;</type>
      <name>PathPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ace7cc447422da6b26fae4c31940dd444</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const Path &gt;</type>
      <name>PathConstPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac63e80a2b059ec831d1329b9fe4bf598</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathOptimizer &gt;</type>
      <name>PathOptimizerPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a7be517aaea26ea8502a0f0e4bc4ac5cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathPlanner &gt;</type>
      <name>PathPlannerPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad40ce0ab724662ec472bf78c1c0a73c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ProblemTarget &gt;</type>
      <name>ProblemTargetPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aaca4fba95373d73fc144050fe022b88a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathValidation &gt;</type>
      <name>PathValidationPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac29e6238dd3231986f3f3e8d323bc003</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathValidationReport &gt;</type>
      <name>PathValidationReportPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a51bcf6b3e015b1054da572494e904f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathVector &gt;</type>
      <name>PathVectorPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a4e193a9670d76e2574324171f9dbc44b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const PathVector &gt;</type>
      <name>PathVectorConstPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a917a99f5f7102616bb84db210cfb3c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PlanAndOptimize &gt;</type>
      <name>PlanAndOptimizePtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a7351f2b8dd868b1bf97078f25bfce4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Problem *</type>
      <name>ProblemPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>af7ef42f739933c4e250fa6d969a49662</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProblemSolver *</type>
      <name>ProblemSolverPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a1946314f3983277f4c5284308d18b051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RandomShortcut &gt;</type>
      <name>RandomShortcutPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ab3cc03ef2c42b647fdbb1345231d0dfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Roadmap &gt;</type>
      <name>RoadmapPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a490aff87ba3b21101dfbef637372c5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; StraightPath &gt;</type>
      <name>StraightPathPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a5518a19fa67c1517314d81ab0186f9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const StraightPath &gt;</type>
      <name>StraightPathConstPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>afd6446c211bb8a5c2ca41242e8535d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ReedsSheppPath &gt;</type>
      <name>ReedsSheppPathPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a8fd704f02ef4a28f5ae91b5da4282e5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const ReedsSheppPath &gt;</type>
      <name>ReedsSheppPathConstPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a70a7bd2f114a3aa792d7839c19992e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; InterpolatedPath &gt;</type>
      <name>InterpolatedPathPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ace5a5ad364c598f93238668fb2d4c388</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const InterpolatedPath &gt;</type>
      <name>InterpolatedPathConstPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a2ba9dc5971823acbb5c7751376722f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SteeringMethod &gt;</type>
      <name>SteeringMethodPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a0053bc3437cb01218dd6dc00e8c1d9f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SteeringMethodStraight &gt;</type>
      <name>SteeringMethodStraightPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>add1a1e165036c3fe80d11f481f6907e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; PathPtr_t &gt;</type>
      <name>Paths_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad336ad2a888d48e7731b62861a3ff486</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; PathVectorPtr_t &gt;</type>
      <name>PathVectors_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a2a525d697c13a5222f0346c4495a3f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::Transform3f</type>
      <name>Transform3f</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa47e854e977c0889b749c8d048cf08e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::vector3_t</type>
      <name>vector3_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad323a6eb9dded170d7a2082f8150bfe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 2, 1 &gt;</type>
      <name>vector2_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aab9337f20c1674f75c893a99e170ec41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::vector_t</type>
      <name>vector_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a168116d9d33e88b3259fa91586a98d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::vectorIn_t</type>
      <name>vectorIn_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a40789f1e939143d8a93dfd2aa65f4529</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::vectorOut_t</type>
      <name>vectorOut_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa9b7332e7a0572728ee51a444a22057d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 1, Eigen::Dynamic &gt;</type>
      <name>rowvector_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a53851c7c70479f33f371f1737f5b9f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; VisibilityPrmPlanner &gt;</type>
      <name>VisibilityPrmPlannerPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a1ba74fc93c8c706fe3e5f841edce4c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ValidationReport &gt;</type>
      <name>ValidationReportPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a0705cba97a4d1ae359ae407f76283685</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; WeighedDistance &gt;</type>
      <name>WeighedDistancePtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a08e2e9036e1ce01111ee4e01c25a1591</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, NumericalConstraintPtr_t &gt;</type>
      <name>NumericalConstraintMap_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a78e21d9e25df0316dfc8af47a5db423b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, ComparisonTypePtr_t &gt;</type>
      <name>ComparisonTypeMap_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a0db998011f5660d868f18703548d8dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, SizeIntervals_t &gt;</type>
      <name>SizeIntervalsMap_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa11fefe9d90cafb3273820bf2fcd4512</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; NumericalConstraintPtr_t &gt;</type>
      <name>NumericalConstraints_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa459487bb6d15cc99a34d570ed589e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, CenterOfMassComputationPtr_t &gt;</type>
      <name>CenterOfMassComputationMap_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>acaf9af2b82f866d54b12e46942f0433c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; CollisionObjectPtr_t, CollisionObjectPtr_t &gt;</type>
      <name>CollisionPair_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a06134c4064cfe0caeef8cdb16ca639f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; CollisionPair_t &gt;</type>
      <name>CollisionPairs_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad7ee03fd20613a9644e16ad84bfa7a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Dichotomy &gt;</type>
      <name>DichotomyPtr_t</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>aeb06b196d458d08467ad5cc7017897da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Progressive &gt;</type>
      <name>ProgressivePtr_t</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a5e8c76a9c9b8fa28bb831e6bead59215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NearestNeighbor *</type>
      <name>NearestNeighborPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a645c9ed99cb8fb5c02113ba42811c18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KDTree *</type>
      <name>KDTreePtr_t</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>ad7bb0151c114887548e601d1ed626cef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Basic *</type>
      <name>BasicPtr_t</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a199a21933e46d2032dfc4fa227005d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Cost &gt;</type>
      <name>CostPtr_t</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a1961dfc4ae6e548f711040c98c235193</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GradientBased &gt;</type>
      <name>GradientBasedPtr_t</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a8ad66c731b9ab5ccebb460697280b672</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathLength &gt;</type>
      <name>PathLengthPtr_t</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>ae74e4b9a49bb45f7f2316d5343252ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PartialShortcut &gt;</type>
      <name>PartialShortcutPtr_t</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>abb8daefc2c1a8cd02da36f78d5eaeff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigOptimization &gt;</type>
      <name>ConfigOptimizationPtr_t</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a52c52eb468b4bae87aec69b6c4b8fc8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathProjector &gt;</type>
      <name>PathProjectorPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>acd16e05d1b627514c689e55d35ee5dc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Global &gt;</type>
      <name>GlobalPtr_t</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a46ec3eb85b8743ea4c8d456dc9bfcaaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Dichotomy &gt;</type>
      <name>DichotomyPtr_t</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a8e49bd7ae5008b130b160cd7d81fbdfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Progressive &gt;</type>
      <name>ProgressivePtr_t</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a0db46ea53ddfbc8d643b454ecdf42aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Interpolated &gt;</type>
      <name>InterpolatedPtr_t</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>af58d96581bfb8587fc5d45691be7e0af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ReedsShepp &gt;</type>
      <name>ReedsSheppPtr_t</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>adf70b4adad33a619dcde7f62eea109b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GoalConfigurations &gt;</type>
      <name>GoalConfigurationsPtr_t</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a5b199c94158433428667eb1e970247d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; TaskTarget &gt;</type>
      <name>TaskTargetPtr_t</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a08b6f9043e55d79e3302d3600f73c67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a85fc59645035584dd8051c0465a9913f</anchor>
      <arglist>(BasicConfigurationShooter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a6ed9a4cd15c75f5327979357c4a3e63e</anchor>
      <arglist>(CollisionPathValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a2167169fa8af2cc00a4f5f463b788d23</anchor>
      <arglist>(CollisionValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad3ec7349de8f0dc7504724da5124cc46</anchor>
      <arglist>(CollisionValidationReport)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac94e7acd08f63ddfa2133416ded9dafb</anchor>
      <arglist>(ConfigurationShooter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a8311bd5400d203db7df24ea03b59426d</anchor>
      <arglist>(ConfigProjector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>add02c514415417ab4b8b914e5f741190</anchor>
      <arglist>(ConfigValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a11bacdeb089c9a66c430707980a66ff3</anchor>
      <arglist>(ConfigValidations)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>afa5e13487da5f25b8466ba5104fec736</anchor>
      <arglist>(ConnectedComponent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a4a974fea2650924cb1999dca9f5040bd</anchor>
      <arglist>(Constraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ab5de251f2f1bfa367068fc26b6ad440a</anchor>
      <arglist>(ConstraintSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a965629a64a025c2e6e6f240da05b75f7</anchor>
      <arglist>(DiffusingPlanner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a33f177097b9d908822ab15a2ff674fb8</anchor>
      <arglist>(Distance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa9e7cca73a7b0eaf230d062bbd289e5b</anchor>
      <arglist>(DistanceBetweenObjects)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a9f4082d55abdbf064c399097ddc190bb</anchor>
      <arglist>(DiscretizedCollisionChecking)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad7b71bd720d70597c3e32e2e745a1494</anchor>
      <arglist>(DiscretizedPathValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>af3ed23244c6b066fb124d94b5f702f7d</anchor>
      <arglist>(Equation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a7bb2b32d2fb4fac94e4cefb9c458189b</anchor>
      <arglist>(ExplicitNumericalConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>af33d84537680ad296fd6df347c2f4d85</anchor>
      <arglist>(ExplicitRelativeTransformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a2be83881de07adc5664e4de91f3556be</anchor>
      <arglist>(NumericalConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>afc306e555ad0357d64e82e6110564206</anchor>
      <arglist>(LockedJoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a73d2ab29a49cc705e6a1f06fc0a81ae9</anchor>
      <arglist>(ExtractedPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a6ac5fb1471e1932896ed5c78f4628ffb</anchor>
      <arglist>(JointBoundValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa728f221db12a1afb747eb9f33677391</anchor>
      <arglist>(Path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a653ee049387accb711897f44393ed90b</anchor>
      <arglist>(PathOptimizer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a9790ac608c0a25cf4aa7acae38adfd36</anchor>
      <arglist>(PathPlanner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa99755b02258dbf65860185ccc20f98f</anchor>
      <arglist>(ProblemTarget)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a560f6a29ed5a9ad39099c57fcbe0dc2a</anchor>
      <arglist>(PathVector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aca6b632cecd7c718d70c221776970e12</anchor>
      <arglist>(PathValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ab1ad444bdb7808d69b718b60e2e71989</anchor>
      <arglist>(PlanAndOptimize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a97710024ca6869f82ca48292d0182a41</anchor>
      <arglist>(Problem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ada9880b33578df46fbf2b1be142ae3a2</anchor>
      <arglist>(RandomShortcut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa204dbe6835f9640d2988a30f90ed1d5</anchor>
      <arglist>(Roadmap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a14ab4ed2bea455402224921945e1a87e</anchor>
      <arglist>(SteeringMethod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a2ac97392d132066dabba09d546000ce5</anchor>
      <arglist>(SteeringMethodStraight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aae8a0c6463f41c3c13fe7bfb776f1c97</anchor>
      <arglist>(StraightPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a4336b71884424eb417d2b61cc7e8ae77</anchor>
      <arglist>(InterpolatedPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>adc6485953e44f5876e42cf17594b4e18</anchor>
      <arglist>(ReedsSheppPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a60622ae657703c813320688b0c48df40</anchor>
      <arglist>(ValidationReport)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a988fec29c02856c309455f39c67e9120</anchor>
      <arglist>(VisibilityPrmPlanner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac1a0115a014bff841665ca660302c401</anchor>
      <arglist>(WeighedDistance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a8b78feb3d79472cb7e9d93562e81deb2</anchor>
      <arglist>(Dichotomy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a6c42edd5a757306480ded3deef3d02e5</anchor>
      <arglist>(Progressive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>ae1ba543a90f5ca6ea36cfb8137c30e8a</anchor>
      <arglist>(Cost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a9eba7cc09d8f17930205c119db2af35f</anchor>
      <arglist>(GradientBased)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a68d3425720b126c08f04dce21022ad1d</anchor>
      <arglist>(PathLength)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a7ca6a13378a55ecd651a8100efb0469e</anchor>
      <arglist>(PartialShortcut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a152fb63bebb1a1d38de541d5515b519b</anchor>
      <arglist>(ConfigOptimization)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac200530dfd3f4bf573f0ec5aa4ff7959</anchor>
      <arglist>(PathProjector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ac49d62d9c9f730b9a30049d0f84a6b59</anchor>
      <arglist>(Global)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a6bdc47dcf6ef337fcc5a746318af82bf</anchor>
      <arglist>(Dichotomy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a294ce2fadb99b3eab085eea2b8aece1c</anchor>
      <arglist>(Progressive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>af4072cd5a7aaefdd07ea766d786b678a</anchor>
      <arglist>(Interpolated)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a8211ae4089cdc6043bbadfbfff797d22</anchor>
      <arglist>(ReedsShepp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ac3948e11644a9eac9cc22011a5ef588d</anchor>
      <arglist>(GoalConfigurations)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ad7d34b357f6c12e02f4dc5d992c58985</anchor>
      <arglist>(TaskTarget)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>global.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/path-projector/</path>
    <filename>a00114</filename>
    <includes id="a00131" name="path-projector.hh" local="yes" imported="no">hpp/core/path-projector.hh</includes>
    <class kind="class">hpp::core::pathProjector::Global</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathProjector</namespace>
  </compound>
  <compound kind="file">
    <name>goal-configurations.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/problem-target/</path>
    <filename>a00115</filename>
    <includes id="a00139" name="problem-target.hh" local="no" imported="no">hpp/core/problem-target.hh</includes>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::problemTarget::GoalConfigurations</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::problemTarget</namespace>
  </compound>
  <compound kind="file">
    <name>gradient-based.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/path-optimization/</path>
    <filename>a00116</filename>
    <includes id="a00129" name="path-optimizer.hh" local="no" imported="no">hpp/core/path-optimizer.hh</includes>
    <includes id="a00134" name="path-vector.hh" local="no" imported="no">hpp/core/path-vector.hh</includes>
    <includes id="a00150" name="steering-method-straight.hh" local="no" imported="no">hpp/core/steering-method-straight.hh</includes>
    <class kind="class">hpp::core::pathOptimization::GradientBased</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
    <member kind="typedef">
      <type>std::vector&lt; CollisionConstraintsResult &gt;</type>
      <name>CollisionConstraintsResults_t</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga8ec3de1032309ec7c79adf9edfc48c99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>interpolated-path.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00117</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00135" name="path.hh" local="no" imported="no">hpp/core/path.hh</includes>
    <class kind="class">hpp::core::InterpolatedPath</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>interpolated-steering-method.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/steering-method/</path>
    <filename>a00118</filename>
    <includes id="a00151" name="steering-method.hh" local="no" imported="no">hpp/core/steering-method.hh</includes>
    <includes id="a00117" name="interpolated-path.hh" local="no" imported="no">hpp/core/interpolated-path.hh</includes>
    <includes id="a00156" name="weighed-distance.hh" local="no" imported="no">hpp/core/weighed-distance.hh</includes>
    <class kind="class">hpp::core::steeringMethod::Interpolated</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::steeringMethod</namespace>
  </compound>
  <compound kind="file">
    <name>joint-bound-validation.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00119</filename>
    <includes id="a00095" name="config-validation.hh" local="no" imported="no">hpp/core/config-validation.hh</includes>
    <class kind="class">hpp::core::JointBoundException</class>
    <class kind="class">hpp::core::JointBoundValidationReport</class>
    <class kind="class">hpp::core::JointBoundValidation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>locked-joint.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00120</filename>
    <includes id="a00111" name="equation.hh" local="no" imported="no">hpp/core/equation.hh</includes>
    <class kind="class">hpp::core::LockedJoint</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a52594d27eb2d6ad3d5f0d170e05496c0</anchor>
      <arglist>(std::ostream &amp;os, const LockedJoint &amp;lj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nearest-neighbor.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00121</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::NearestNeighbor</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>news.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/doc/main-page/</path>
    <filename>a00122</filename>
  </compound>
  <compound kind="file">
    <name>node.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00123</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::Node</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ga1947b6d9b37f1a315e596b194adc6159</anchor>
      <arglist>(std::ostream &amp;os, const Node &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>numerical-constraint.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00124</filename>
    <includes id="a00111" name="equation.hh" local="no" imported="no">hpp/core/equation.hh</includes>
    <class kind="class">hpp::core::NumericalConstraint</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>package.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/doc/main-page/</path>
    <filename>a00125</filename>
  </compound>
  <compound kind="file">
    <name>partial-shortcut.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/path-optimization/</path>
    <filename>a00126</filename>
    <includes id="a00129" name="path-optimizer.hh" local="no" imported="no">hpp/core/path-optimizer.hh</includes>
    <class kind="struct">hpp::core::pathOptimization::PartialShortcutTraits</class>
    <class kind="class">hpp::core::pathOptimization::PartialShortcut</class>
    <class kind="struct">hpp::core::pathOptimization::PartialShortcut::Parameters</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
  </compound>
  <compound kind="file">
    <name>partial-spline-path.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/path-optimization/</path>
    <filename>a00127</filename>
    <includes id="a00135" name="path.hh" local="no" imported="no">hpp/core/path.hh</includes>
    <includes id="a00134" name="path-vector.hh" local="no" imported="no">hpp/core/path-vector.hh</includes>
    <class kind="class">hpp::core::pathOptimization::PartialSplinePath</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
  </compound>
  <compound kind="file">
    <name>path-length.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/path-optimization/</path>
    <filename>a00128</filename>
    <includes id="a00102" name="cost.hh" local="no" imported="no">hpp/core/path-optimization/cost.hh</includes>
    <class kind="class">hpp::core::pathOptimization::PathLength</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
  </compound>
  <compound kind="file">
    <name>path-optimizer.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00129</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::PathOptimizer</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>path-planner.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00130</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::PathPlanner</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>path-projector.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00131</filename>
    <includes id="a00001" name="fwd.hh" local="yes" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00135" name="path.hh" local="no" imported="no">hpp/core/path.hh</includes>
    <includes id="a00152" name="straight-path.hh" local="no" imported="no">hpp/core/straight-path.hh</includes>
    <class kind="class">hpp::core::PathProjector</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>path-validation-report.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00132</filename>
    <includes id="a00154" name="validation-report.hh" local="no" imported="no">hpp/core/validation-report.hh</includes>
    <class kind="struct">hpp::core::PathValidationReport</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>path-validation.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00133</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00147" name="relative-motion.hh" local="no" imported="no">hpp/core/relative-motion.hh</includes>
    <class kind="class">hpp::core::PathValidation</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>path-vector.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00134</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00135" name="path.hh" local="no" imported="no">hpp/core/path.hh</includes>
    <class kind="class">hpp::core::PathVector</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>path.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00135</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00099" name="constraint-set.hh" local="no" imported="no">hpp/core/constraint-set.hh</includes>
    <includes id="a00143" name="projection-error.hh" local="no" imported="no">hpp/core/projection-error.hh</includes>
    <class kind="class">hpp::core::Path</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac90e244c2dcfbdf7f95f0b59d825ac51</anchor>
      <arglist>(std::ostream &amp;os, const Path &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>plan-and-optimize.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00136</filename>
    <includes id="a00130" name="path-planner.hh" local="no" imported="no">hpp/core/path-planner.hh</includes>
    <class kind="class">hpp::core::PlanAndOptimize</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>porting-notes.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/doc/main-page/</path>
    <filename>a00137</filename>
  </compound>
  <compound kind="file">
    <name>problem-solver.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00138</filename>
    <includes id="a00140" name="problem.hh" local="no" imported="no">hpp/core/problem.hh</includes>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00094" name="config-projector.hh" local="no" imported="no">hpp/core/config-projector.hh</includes>
    <includes id="a00101" name="container.hh" local="no" imported="no">hpp/core/container.hh</includes>
    <class kind="class">hpp::core::ProblemSolver</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <member kind="typedef">
      <type>boost::function&lt; PathOptimizerPtr_t(const Problem &amp;) &gt;</type>
      <name>PathOptimizerBuilder_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a8cef489d46a492887079fb69c1cc0101</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; PathPlannerPtr_t(const Problem &amp;, const RoadmapPtr_t &amp;) &gt;</type>
      <name>PathPlannerBuilder_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a3fbb1d69deb998d881f44a8f3cc31574</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; PathValidationPtr_t(const DevicePtr_t &amp;, const value_type &amp;) &gt;</type>
      <name>PathValidationBuilder_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a1b466240de9d55c35eb729f17e87ab81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; PathProjectorPtr_t(const DistancePtr_t &amp;, const SteeringMethodPtr_t &amp;, value_type) &gt;</type>
      <name>PathProjectorBuilder_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a9d96b9777b4c7fa8dbc5981c2fcffd8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; ConfigurationShooterPtr_t(const DevicePtr_t &amp;) &gt;</type>
      <name>ConfigurationShooterBuilder_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a0fd87d567905b38589d6e92ba575e814</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; SteeringMethodPtr_t(const ProblemPtr_t &amp;) &gt;</type>
      <name>SteeringMethodBuilder_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a00ba8cd09fea3b293e082275944a92da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>problem-target.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00139</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::ProblemTarget</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>problem.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00140</filename>
    <includes id="a00151" name="steering-method.hh" local="no" imported="no">hpp/core/steering-method.hh</includes>
    <includes id="a00101" name="container.hh" local="no" imported="no">hpp/core/container.hh</includes>
    <class kind="class">hpp::core::Problem</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>continuous-collision-checking/progressive.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/continuous-collision-checking/</path>
    <filename>a00141</filename>
    <includes id="a00089" name="collision-path-validation-report.hh" local="no" imported="no">hpp/core/collision-path-validation-report.hh</includes>
    <includes id="a00133" name="path-validation.hh" local="no" imported="no">hpp/core/path-validation.hh</includes>
    <class kind="class">hpp::core::continuousCollisionChecking::Progressive</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::continuousCollisionChecking</namespace>
    <namespace>hpp::core::continuousCollisionChecking::progressive</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BodyPairCollision &gt;</type>
      <name>BodyPairCollisionPtr_t</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga843636fb56aef23255988af3ef7307a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; BodyPairCollisionPtr_t &gt;</type>
      <name>BodyPairCollisions_t</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga8797a5012167ca526851c2f07b1bd476</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga521fd61da699d9e61add000705df570c</anchor>
      <arglist>(BodyPairCollision)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>path-projector/progressive.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/path-projector/</path>
    <filename>a00142</filename>
    <includes id="a00131" name="path-projector.hh" local="yes" imported="no">hpp/core/path-projector.hh</includes>
    <class kind="class">hpp::core::pathProjector::Progressive</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::pathProjector</namespace>
  </compound>
  <compound kind="file">
    <name>projection-error.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00143</filename>
    <class kind="struct">hpp::core::projection_error</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>random-shortcut.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00144</filename>
    <includes id="a00129" name="path-optimizer.hh" local="no" imported="no">hpp/core/path-optimizer.hh</includes>
    <class kind="class">hpp::core::RandomShortcut</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>reeds-shepp-path.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00145</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00135" name="path.hh" local="no" imported="no">hpp/core/path.hh</includes>
    <class kind="class">hpp::core::ReedsSheppPath</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>reeds-shepp.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/steering-method/</path>
    <filename>a00146</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00151" name="steering-method.hh" local="no" imported="no">hpp/core/steering-method.hh</includes>
    <includes id="a00145" name="reeds-shepp-path.hh" local="no" imported="no">hpp/core/reeds-shepp-path.hh</includes>
    <class kind="class">hpp::core::steeringMethod::ReedsShepp</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::steeringMethod</namespace>
  </compound>
  <compound kind="file">
    <name>relative-motion.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00147</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="struct">hpp::core::RelativeMotion</class>
    <class kind="struct">Eigen::NumTraits&lt; hpp::core::RelativeMotion::RelativeMotionType &gt;</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>Eigen</namespace>
  </compound>
  <compound kind="file">
    <name>roadmap-factory.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/parser/</path>
    <filename>a00148</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::parser::RoadmapFactory</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::parser</namespace>
    <member kind="typedef">
      <type>hpp::util::parser::SequenceFactory&lt; std::string &gt;</type>
      <name>StringSequence</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ga6a93d581ac8f3ae38e05cedf2d8e3bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::util::parser::SequenceFactory&lt; double &gt;</type>
      <name>ConfigurationFactory</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>gaddac3c470d5ddef6a2dbbdd69ee46327</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::util::parser::SequenceFactory&lt; unsigned int &gt;</type>
      <name>IdSequence</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ga3dabee6e928569a6a1c3e77f84c0314b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRoadmap</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ga50b557a4d968611b4cb9370a9762c6f2</anchor>
      <arglist>(std::ostream &amp;o, const ProblemPtr_t &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function">
      <type>RoadmapPtr_t</type>
      <name>readRoadmap</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ga8db26505fc7081063e9e5b00cd7498d1</anchor>
      <arglist>(const std::string &amp;filename, const ProblemPtr_t &amp;problem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>roadmap.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00149</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::Roadmap</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ga8ae1800d63fa0035ab3281311e873193</anchor>
      <arglist>(std::ostream &amp;os, const Roadmap &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>steering-method-straight.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00150</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00140" name="problem.hh" local="no" imported="no">hpp/core/problem.hh</includes>
    <includes id="a00151" name="steering-method.hh" local="no" imported="no">hpp/core/steering-method.hh</includes>
    <includes id="a00152" name="straight-path.hh" local="no" imported="no">hpp/core/straight-path.hh</includes>
    <includes id="a00156" name="weighed-distance.hh" local="no" imported="no">hpp/core/weighed-distance.hh</includes>
    <includes id="a00094" name="config-projector.hh" local="no" imported="no">hpp/core/config-projector.hh</includes>
    <class kind="class">hpp::core::SteeringMethodStraight</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>steering-method.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00151</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00135" name="path.hh" local="no" imported="no">hpp/core/path.hh</includes>
    <class kind="class">hpp::core::SteeringMethod</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>straight-path.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00152</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <includes id="a00135" name="path.hh" local="no" imported="no">hpp/core/path.hh</includes>
    <class kind="class">hpp::core::StraightPath</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>task-target.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/problem-target/</path>
    <filename>a00153</filename>
    <includes id="a00139" name="problem-target.hh" local="no" imported="no">hpp/core/problem-target.hh</includes>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::problemTarget::TaskTarget</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <namespace>hpp::core::problemTarget</namespace>
  </compound>
  <compound kind="file">
    <name>validation-report.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00154</filename>
    <includes id="a00001" name="fwd.hh" local="no" imported="no">hpp/core/fwd.hh</includes>
    <class kind="class">hpp::core::ValidationReport</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga656195c66d722769e89c7a8af48181a2</anchor>
      <arglist>(std::ostream &amp;os, const ValidationReport &amp;report)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>visibility-prm-planner.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00155</filename>
    <includes id="a00130" name="path-planner.hh" local="no" imported="no">hpp/core/path-planner.hh</includes>
    <class kind="class">hpp::core::VisibilityPrmPlanner</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="file">
    <name>weighed-distance.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-core/include/hpp/core/</path>
    <filename>a00156</filename>
    <includes id="a00109" name="distance.hh" local="no" imported="no">hpp/core/distance.hh</includes>
    <class kind="class">hpp::core::WeighedDistance</class>
    <namespace>hpp</namespace>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="class">
    <name>hpp::core::BasicConfigurationShooter</name>
    <filename>a00004.html</filename>
    <base>hpp::core::ConfigurationShooter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ConfigurationPtr_t</type>
      <name>shoot</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a881270618e35327ca51be663b33430e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BasicConfigurationShooterPtr_t</type>
      <name>create</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a6a802b0773301ff5f857d33576e11dec</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BasicConfigurationShooter</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>aaa471d30e42f8168f1c916d7d9abfd24</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a931d6083c525bcdf84722488015f60b5</anchor>
      <arglist>(const BasicConfigurationShooterPtr_t &amp;self)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::continuousCollisionChecking::progressive::BodyPairCollision</name>
    <filename>a00005.html</filename>
    <member kind="function">
      <type>const std::vector&lt; JointConstPtr_t &gt; &amp;</type>
      <name>joints</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ab48de3244832f0899400983a903cd4d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const JointConstPtr_t &amp;</type>
      <name>joint_a</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a4da49371c196f246de0bf836de104b96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const JointConstPtr_t &amp;</type>
      <name>joint_b</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a2c7c6056414b4f907ff4681008c3edc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObjectTo_b</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a047fbf453ea1bea18a3941a900b9ce9b</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>const ObjectVector_t &amp;</type>
      <name>objects_b</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ae679f3f0384ec6260949f4a431214eda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeObjectTo_b</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a78b6901495f2d831134909041a21dfb1</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>path</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>abcf33bb4a5a5dbf9e91685b4b463db4f</anchor>
      <arglist>(const PathPtr_t &amp;path, bool reverse)</arglist>
    </member>
    <member kind="function">
      <type>PathConstPtr_t</type>
      <name>path</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a67c422c42f5d72cc8994090be53de751</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validateConfiguration</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ad63b48df048604c7a49343a2ed11c191</anchor>
      <arglist>(const value_type &amp;t, value_type &amp;tmin, CollisionValidationReport &amp;report) HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validateConfiguration</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a60ccb79b0df0b104b617d99e4983398a</anchor>
      <arglist>(const value_type &amp;t, value_type &amp;tmin, CollisionValidationReportPtr_t &amp;report)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>tolerance</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a8085ca98d9d2b7b05af5cffdadbe481e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>maximalVelocity</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a87a06a627fb7ae8693f449a0939ae552</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a874c3ee86724f661bb98d1d3436535de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BodyPairCollisionPtr_t</type>
      <name>create</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a2c8940086c34d3f7006d0f0063f3521d</anchor>
      <arglist>(const JointConstPtr_t &amp;joint_a, const ObjectVector_t &amp;objects_b, value_type tolerance)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BodyPairCollisionPtr_t</type>
      <name>create</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>ac86722658d2761115991bdf9874a6e3b</anchor>
      <arglist>(const JointConstPtr_t &amp;joint_a, const JointConstPtr_t &amp;joint_b, value_type tolerance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BodyPairCollision</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a3adff50077ede22ef22111db1abad0f3</anchor>
      <arglist>(const JointConstPtr_t &amp;joint_a, const JointConstPtr_t &amp;joint_b, value_type tolerance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BodyPairCollision</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a8756c13d1144d4e91f800802810b1cc4</anchor>
      <arglist>(const JointConstPtr_t &amp;joint_a, const ObjectVector_t &amp;objects_b, value_type tolerance)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::continuousCollisionChecking::progressive::CoefficientVelocity</name>
    <filename>a00006.html</filename>
    <member kind="function">
      <type></type>
      <name>CoefficientVelocity</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a922d056c4ea17fd105ba41c0917cb3f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>JointConstPtr_t</type>
      <name>joint_</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>addcf93588b21618d3bb6bcbb6f2deb46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>value_</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a645ef4754038e728514eb33e1bb30957</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::CollisionPathValidationReport</name>
    <filename>a00007.html</filename>
    <base>hpp::core::PathValidationReport</base>
    <member kind="function">
      <type></type>
      <name>CollisionPathValidationReport</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a94fc0c2db0c943cf37d1c568682b67f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionPathValidationReport</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a3bb4d034301cd2cd48631d73554c9430</anchor>
      <arglist>(const value_type &amp;param, const ValidationReportPtr_t &amp;report)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::CollisionValidation</name>
    <filename>a00008.html</filename>
    <base>hpp::core::ConfigValidation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>validate</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a58d156f9e6bdb13aa91e6e6eb7de2b4e</anchor>
      <arglist>(const Configuration_t &amp;config, ValidationReportPtr_t &amp;validationReport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>afbb84c2d78affedd7feb16da7230b108</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a60737cc5af31ae81485e78d90d8a117b</anchor>
      <arglist>(const JointPtr_t &amp;joint, const CollisionObjectPtr_t &amp;obstacle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a43e5ea22885467df61884838abe4ded4</anchor>
      <arglist>(const RelativeMotion::matrix_type &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkParameterized</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ab94240545d357d90e068f04edb3666cd</anchor>
      <arglist>(bool active)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkParameterized</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a9a291da017d6cb6429da6ff11145622e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionValidationPtr_t</type>
      <name>create</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a43cb5fba4e6c46de2d0e5577b4a14781</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="variable">
      <type>fcl::CollisionRequest</type>
      <name>collisionRequest_</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a5dc347e95ac68bfa72c6fa7ba6c4810f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CollisionValidation</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae401e96e3cd9d40a366aec64fe848a8b</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DevicePtr_t</type>
      <name>robot_</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a93649ab8602e905fba4c93767188d807</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::CollisionValidationReport</name>
    <filename>a00009.html</filename>
    <base>hpp::core::ValidationReport</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>ae5e23a28f1f14f1541d016ccda945725</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>CollisionObjectPtr_t</type>
      <name>object1</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a9b639eeb6d611e05d52ffa324453d296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CollisionObjectPtr_t</type>
      <name>object2</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a66fe78ff42925ea3699e34bd10dac57d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>fcl::CollisionResult</type>
      <name>result</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>af96e84ce5122ca10cf6cd5ef982cab48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ComparisonType</name>
    <filename>a00010.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac5b66d153446646237babb6e86994914</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Equality</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac5b66d153446646237babb6e86994914a0115932decfb52b5eb15335d35e46b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EqualToZero</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac5b66d153446646237babb6e86994914a6965fdd7e60711b139b3252a9e8732ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Superior</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac5b66d153446646237babb6e86994914a416bad1243fedfd6e87084cc55808396</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Inferior</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac5b66d153446646237babb6e86994914affe73c5af77b5780fb786020966955f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DoubleInequality</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac5b66d153446646237babb6e86994914ae2a8bfe08180f083c7219ca0bcf4ca58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Type &gt;</type>
      <name>VectorOfTypes</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a669756dc62de3b490d93096424136ff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Equality</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac5b66d153446646237babb6e86994914a0115932decfb52b5eb15335d35e46b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EqualToZero</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac5b66d153446646237babb6e86994914a6965fdd7e60711b139b3252a9e8732ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Superior</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac5b66d153446646237babb6e86994914a416bad1243fedfd6e87084cc55808396</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Inferior</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac5b66d153446646237babb6e86994914affe73c5af77b5780fb786020966955f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DoubleInequality</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ac5b66d153446646237babb6e86994914ae2a8bfe08180f083c7219ca0bcf4ca58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a25cd54552ff34e0228db39aa54390820</anchor>
      <arglist>(vectorOut_t value, matrixOut_t jacobian) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a84ea4e6df0e124039bfd7b239de17fdb</anchor>
      <arglist>(vectorOut_t value) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constantRightHandSide</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a86e8db1419efa2b46046b34e6b35446f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ComparisonTypePtr_t</type>
      <name>createDefault</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a6f47fbf36fb7a7b0204d2d5cdb1e07e7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ComparisonTypes</name>
    <filename>a00011.html</filename>
    <base>hpp::core::ComparisonType</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a8d465aaaf000c51a947d4680dc947f6e</anchor>
      <arglist>(vectorOut_t value, matrixOut_t jacobian) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aa05f16172f8bdbe7b28b8d9e870eee33</anchor>
      <arglist>(vectorOut_t value) const </arglist>
    </member>
    <member kind="function">
      <type>ComparisonTypePtr_t &amp;</type>
      <name>at</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aa6d455bd2361e713ac22137c399a97d1</anchor>
      <arglist>(const std::size_t index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ComparisonTypesPtr_t</type>
      <name>create</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a955581d24c030924ff6122a2751fb9e9</anchor>
      <arglist>(size_t dim)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ComparisonTypesPtr_t</type>
      <name>create</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a7d894c51e4be8e1414e1e90b17f36975</anchor>
      <arglist>(const std::vector&lt; ComparisonType::Type &gt; types)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ComparisonTypes</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a592c0e3b0442ce220067e139e0b65ab8</anchor>
      <arglist>(const std::vector&lt; ComparisonType::Type &gt; types)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathOptimization::ConfigOptimization</name>
    <filename>a00012.html</filename>
    <base>hpp::core::PathOptimizer</base>
    <class kind="struct">hpp::core::pathOptimization::ConfigOptimization::Optimizer</class>
    <class kind="struct">hpp::core::pathOptimization::ConfigOptimization::Parameters</class>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>optimize</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a2c5eafbf648acbc6c425e07a47b17f9b</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigOptimizationPtr_t</type>
      <name>createWithTraits</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a599c8ac279d7a269f83dcef2dbbc27f6</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigOptimizationPtr_t</type>
      <name>create</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a33f165b7d1b9a7859cc3cbe20c8f2287</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="variable">
      <type>struct hpp::core::pathOptimization::ConfigOptimization::Parameters</type>
      <name>parameters</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>af75bf6b8e6ad7ae136d1c64a6addd07a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; Optimizer &gt;</type>
      <name>Optimizers_t</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a3844cac6fdcd6e8b8e2561ba68d0681c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConfigOptimization</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a1d34f6f3918d63d41078ad10b181fcaa</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual NumericalConstraintPtr_t</type>
      <name>createNumConstraint</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a03a3445cddfd495a4f6ddae9c84459ed</anchor>
      <arglist>(const PathVector &amp;path) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>buildOptimizers</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a4ac6e03f6a218a94d9b266b4b3b11baa</anchor>
      <arglist>(const PathVector &amp;pv, Optimizers_t &amp;projectors)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::pathOptimization::ConfigOptimizationTraits</name>
    <filename>a00013.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>addConfigConstraintToPath</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>ab347cebf6703cf8072b18d5e784a22d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>numberOfPass</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aef72f093470c755b817eb394a4e6df85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>numberOfIterations</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aa56997a31615ab1ce4f4e7098fce248a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static value_type</type>
      <name>alphaInit</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a5fd7f0975d6964c3982cae6e2a760c49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Configuration_t</type>
      <name>getGoal</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a00562680f9490cd658011ca6737fce55</anchor>
      <arglist>(const PathVector &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigProjectorPtr_t</type>
      <name>getConfigProjector</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a245459d93409ac7cf14573bef2d80bfa</anchor>
      <arglist>(const PathPtr_t &amp;before, const PathPtr_t &amp;after, bool &amp;isReverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>shouldFilter</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>aa62cceb74515cec2465bb6ecf797a4aa</anchor>
      <arglist>(const JointPtr_t joint, const size_type iDof)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ConfigProjector</name>
    <filename>a00014.html</filename>
    <base>hpp::core::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstraintPtr_t</type>
      <name>copy</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>af7a1ffd4f8fa2aff752103626088af6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a6759f6bcf2688bd5fcfd5e0b06b93a21</anchor>
      <arglist>(const NumericalConstraintPtr_t &amp;numericalConstraint, const SizeIntervals_t &amp;passiveDofs=SizeIntervals_t(0), const std::size_t priority=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lastIsOptional</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a1c7ccf6cc897b0d194a19dafb7933a99</anchor>
      <arglist>(bool optional)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lastIsOptional</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a442674d17ac86b2624a9a863135f8278</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>optimize</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a5afa0c2a6811b447d66ea1275748efd0</anchor>
      <arglist>(ConfigurationOut_t config, std::size_t maxIter=0, const value_type alpha=0.2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ade37d75708cf8e55cd17ed070f5b0c59</anchor>
      <arglist>(const LockedJointPtr_t &amp;lockedJoint)</arglist>
    </member>
    <member kind="function">
      <type>const DevicePtr_t &amp;</type>
      <name>robot</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a95670e3606c5db863a3e62b550b44e3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectVectorOnKernel</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ad6ef24ca8fbfe54ebdedc5771a76edc2</anchor>
      <arglist>(ConfigurationIn_t from, vectorIn_t velocity, vectorOut_t result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>projectOnKernel</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a7a2b5537787ded46a1a0702054d69560</anchor>
      <arglist>(ConfigurationIn_t from, ConfigurationIn_t to, ConfigurationOut_t result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValueAndJacobian</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ab430985dea08e3eb9d0048c8f2c993f8</anchor>
      <arglist>(ConfigurationIn_t configuration, vectorOut_t value, matrixOut_t reducedJacobian)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>oneStep</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a616642e27fc8b7e993e9bc1d5b39ea69</anchor>
      <arglist>(ConfigurationOut_t config, vectorOut_t dq, const value_type &amp;alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeIncrement</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>aa7f80a4719138171ce114fc599214d8e</anchor>
      <arglist>(vectorIn_t value, matrixIn_t reducedJacobian, const value_type &amp;alpha, vectorOut_t dq)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePrioritizedIncrement</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ac105f7946bf0a00f494cd06384c9cd3f</anchor>
      <arglist>(vectorIn_t value, matrixIn_t reducedJacobian, const value_type &amp;alpha, vectorOut_t dq)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computePrioritizedIncrement</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a88145b7b72d76e61a4780ec508e593ff</anchor>
      <arglist>(vectorIn_t value, matrixIn_t reducedJacobian, const value_type &amp;alpha, vectorOut_t dq, const std::size_t &amp;level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxIterations</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>af023831e0150fa7482609907f243ede9</anchor>
      <arglist>(size_type iterations)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>maxIterations</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ad7891b75a61f922e61e608b895536b27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorThreshold</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a190d1bc25303204eb02a4323e4f6e3e7</anchor>
      <arglist>(const value_type &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>errorThreshold</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a1d689b339bd4312c7861fbdce2d1c4ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>residualError</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>af5fee5da111f2994356af659d4a33998</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ac8d82e2d8f8436172555b7277e061f26</anchor>
      <arglist>(ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a7ee48db6cb9ad86b2042515f59ea8657</anchor>
      <arglist>(ConfigurationIn_t config, vector_t &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>::hpp::statistics::SuccessStatistics &amp;</type>
      <name>statistics</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a9809159f18f944ee71a3d5256e0d4cb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NumericalConstraints_t</type>
      <name>numericalConstraints</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a6108cc6a1a1744153cfa43f5cb5ae81c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IntervalsContainer_t</type>
      <name>passiveDofs</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a409abf790e9d123d7d05ade65d603671</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LockedJoints_t</type>
      <name>lockedJoints</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a3906faef02c35838536feac277a7aaba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>numberNonLockedDof</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ae592e629767eaac8057078408823c10a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dimension</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>abb9580c20cb085354e2f1d298c912de2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compressVector</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a37c81f972f468b5cded419ebf7051f54</anchor>
      <arglist>(vectorIn_t normal, vectorOut_t small) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompressVector</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>aee3c925da7c0b8b29fb1f3e7a818dad7</anchor>
      <arglist>(vectorIn_t small, vectorOut_t normal) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compressMatrix</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a7a9c1e82c13a2497cb3ff37e5187a82d</anchor>
      <arglist>(matrixIn_t normal, matrixOut_t small, bool rows=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompressMatrix</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a2df0d4f2e7784483a3843038bdac1bc1</anchor>
      <arglist>(matrixIn_t small, matrixOut_t normal, bool rows=true) const </arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a7a415907d15cd08bac66437db9472f13</anchor>
      <arglist>(ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSide</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a6e756716583b3c0846bfb73df4d5a290</anchor>
      <arglist>(const vector_t &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSide</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a192cf17a2d797fce006688c801b0a7eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRightHandSide</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a35c7d0bd14015afbe85f2000dc2ccfe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigProjectorPtr_t</type>
      <name>create</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a1c3585a35f3047b59d7d00bd0d3dc50b</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const std::string &amp;name, value_type errorThreshold, size_type maxIterations)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigProjectorPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a95022384eede6dd1a5e857fa72b46d36</anchor>
      <arglist>(const ConfigProjectorPtr_t cp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConfigProjector</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>abf5079013a7d78fa48cea1cab07dba26</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const std::string &amp;name, value_type errorThreshold, size_type maxIterations)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConfigProjector</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a59c90dde55cfdcb7a8a5c9951b1005d7</anchor>
      <arglist>(const ConfigProjector &amp;cp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a11a1c94133cbab0b7bf64e388098b910</anchor>
      <arglist>(const ConfigProjectorPtr_t &amp;self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a543afdfee795aeca0c8ded9cd04687f5</anchor>
      <arglist>(ConfigurationOut_t configuration)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeLockedDofs</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ad9aceca5d8a6c6c9385d2f9383241bca</anchor>
      <arglist>(ConfigurationOut_t configuration)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>numberNonLockedDof</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>ae592e629767eaac8057078408823c10a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dimension</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>abb9580c20cb085354e2f1d298c912de2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compressVector</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a37c81f972f468b5cded419ebf7051f54</anchor>
      <arglist>(vectorIn_t normal, vectorOut_t small) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompressVector</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>aee3c925da7c0b8b29fb1f3e7a818dad7</anchor>
      <arglist>(vectorIn_t small, vectorOut_t normal) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compressMatrix</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a7a9c1e82c13a2497cb3ff37e5187a82d</anchor>
      <arglist>(matrixIn_t normal, matrixOut_t small, bool rows=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompressMatrix</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a2df0d4f2e7784483a3843038bdac1bc1</anchor>
      <arglist>(matrixIn_t small, matrixOut_t normal, bool rows=true) const </arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a7a415907d15cd08bac66437db9472f13</anchor>
      <arglist>(ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSide</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a6e756716583b3c0846bfb73df4d5a290</anchor>
      <arglist>(const vector_t &amp;param)</arglist>
    </member>
    <member kind="function">
      <type>vector_t</type>
      <name>rightHandSide</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a192cf17a2d797fce006688c801b0a7eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRightHandSide</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a35c7d0bd14015afbe85f2000dc2ccfe4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ConfigurationShooter</name>
    <filename>a00015.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual ConfigurationPtr_t</type>
      <name>shoot</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ga016609b3d7968d914d9620e2677ea3be</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConfigurationShooter</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ga6d4743d6735b50ad4868d58222be365a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>gad7e9a66c680fd8ba7395fe5b048da84a</anchor>
      <arglist>(const ConfigurationShooterWkPtr_t &amp;weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ConfigValidation</name>
    <filename>a00016.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>validate</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a7c3355070428a489615c440068e554d7</anchor>
      <arglist>(const Configuration_t &amp;config, ValidationReportPtr_t &amp;validationReport)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ae07785365f17cfc17ebd33390533e604</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ad73d1a3f49244a8f93db620476dd3a01</anchor>
      <arglist>(const JointPtr_t &amp;, const CollisionObjectPtr_t &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ab71b76ef98fab3ae47331afe5eeb039c</anchor>
      <arglist>(const RelativeMotion::matrix_type &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConfigValidation</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a4920e4e75fd8b8c0ff1b2c730d5c9cfd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ConfigValidations</name>
    <filename>a00017.html</filename>
    <base>hpp::core::ConfigValidation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>validate</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>abe52a8efe25366032d7c31ee9bc7125d</anchor>
      <arglist>(const Configuration_t &amp;config, ValidationReportPtr_t &amp;validationReport)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>addba678cc219f82887eae54034f82b02</anchor>
      <arglist>(const ConfigValidationPtr_t &amp;configValidation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a2c242eaa9b1e7215566ca553cc56b679</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a444c4ab9cc0d7e4c09f20e780e07c49e</anchor>
      <arglist>(const JointPtr_t &amp;joint, const CollisionObjectPtr_t &amp;obstacle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a11965ec06cb946cda6d133d681ad70f5</anchor>
      <arglist>(const RelativeMotion::matrix_type &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConfigValidationsPtr_t</type>
      <name>create</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a4900bba9445c1fab1c956b27eaaa7a32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConfigValidations</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad2f00329ea3ec8b309f0ebd4f1f9e596</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ConnectedComponent</name>
    <filename>a00018.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ac978bb39c1fab28f9dbd143cbdeee10f</anchor>
      <arglist>(const ConnectedComponentPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConnectedComponent</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a578732266f807b44abd0eb9a6b42836a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addNode</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a7cf53886e3dfa77fe7a1a0603d629c7f</anchor>
      <arglist>(const NodePtr_t &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>const NodeVector_t &amp;</type>
      <name>nodes</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ad5add1e8ce0112b0605a333a1c31c3ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canReach</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a086158983a4f4d69c1ac141d54898d27</anchor>
      <arglist>(const ConnectedComponentPtr_t &amp;cc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canReach</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>add42e067a95fc77196d2c5666c3750bd</anchor>
      <arglist>(const ConnectedComponentPtr_t &amp;cc, ConnectedComponents_t &amp;cc2Tocc1)</arglist>
    </member>
    <member kind="function">
      <type>const ConnectedComponents_t &amp;</type>
      <name>reachableTo</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ab4334e241368bd7aa51c38f209a8c38c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ConnectedComponents_t &amp;</type>
      <name>reachableFrom</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a42dae6acc8ba3271ba10a023c8cbd579</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConnectedComponentPtr_t</type>
      <name>create</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>abcd0cffc447b9e1339d9d76dc93d4486</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static unsigned int</type>
      <name>globalFinishTime_</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a7908e6528af3ad8782d72f2bf16ad8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConnectedComponent</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a74fff8400e3d2d475019ad1963746a0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a29da047510ffa425d553bba0131f8e13</anchor>
      <arglist>(const ConnectedComponentPtr_t &amp;shPtr)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Roadmap</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a07fbd00a87b2baaf8091241bdc6ef7c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>clean</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a9073e183b0ad40ef40878a4530047fb7</anchor>
      <arglist>(ConnectedComponents_t &amp;set)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canReach</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a086158983a4f4d69c1ac141d54898d27</anchor>
      <arglist>(const ConnectedComponentPtr_t &amp;cc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canReach</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>add42e067a95fc77196d2c5666c3750bd</anchor>
      <arglist>(const ConnectedComponentPtr_t &amp;cc, ConnectedComponents_t &amp;cc2Tocc1)</arglist>
    </member>
    <member kind="function">
      <type>const ConnectedComponents_t &amp;</type>
      <name>reachableTo</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ab4334e241368bd7aa51c38f209a8c38c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ConnectedComponents_t &amp;</type>
      <name>reachableFrom</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a42dae6acc8ba3271ba10a023c8cbd579</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Constraint</name>
    <filename>a00019.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a429bce2911a05611b4605b2c12c84fda</anchor>
      <arglist>(ConfigurationOut_t configuration)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a8d86d3866cc767326d7d241c9908984b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a613dc89bd75e348e436a5d235e9139a6</anchor>
      <arglist>(ConfigurationIn_t config)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a00a26a9cb959837c4df3a70096b65290</anchor>
      <arglist>(ConfigurationIn_t config, vector_t &amp;error)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ConstraintPtr_t</type>
      <name>copy</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a4091a59212e4d912ab579ba037b3988d</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a327bace24d2482c102edae5bddbb4bdd</anchor>
      <arglist>(ConfigurationOut_t configuration)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a6dc385e4a4a96cb9390819cf82c65389</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a32ca18ff601784330a57a7f138c2c708</anchor>
      <arglist>(const Constraint &amp;constraint)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a5798ef49ecbfeeb54d2c271edb90934c</anchor>
      <arglist>(const ConstraintPtr_t &amp;self)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ConstraintSet</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a00cbb3fc5907a1cdfdc3ccfacf1dd3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>LockedJoint</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a0cf7227681ba376fe4a1b9cf700e7726</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ConfigProjector</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>aa0b7cb74bdaccc4f0639fd10583f68ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a540e56ec36b238e688a33277ed0e69e7</anchor>
      <arglist>(std::ostream &amp;os, const Constraint &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ConstraintSet</name>
    <filename>a00020.html</filename>
    <base>hpp::core::Constraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual ConstraintPtr_t</type>
      <name>copy</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ae251989aca246b8937321cbdbbf9eb5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraint</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a0895c1976ca15022e36fb3984dba5abe</anchor>
      <arglist>(const ConstraintPtr_t &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type>ConfigProjectorPtr_t</type>
      <name>configProjector</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a8dc1e74e5c4012ecfedd66b51e50e4e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Constraints_t::iterator</type>
      <name>begin</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a7149c01b5e01453b81cd0528584a9702</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Constraints_t::iterator</type>
      <name>end</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ac811e8cf8943cee81611cdb89209509b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad02c09e134300a9affb35fcdb5eff24e</anchor>
      <arglist>(ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a087f13a1806166d615b5527cb32a95f3</anchor>
      <arglist>(ConfigurationIn_t config, vector_t &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>numberNonLockedDof</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a830b73100653fbc3f184cdc1198fb233</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compressVector</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a80f800b50662a4bad150ccb8c3c74da1</anchor>
      <arglist>(vectorIn_t normal, vectorOut_t small) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompressVector</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>abc9c9a04ff80600691a6c084f3bc7ab6</anchor>
      <arglist>(vectorIn_t small, vectorOut_t normal) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compressMatrix</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>abc9a6662bb48bafd0ab7f82f900b200c</anchor>
      <arglist>(matrixIn_t normal, matrixOut_t small, bool rows=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompressMatrix</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>af615e7b550919575806a6bd55ff69ba1</anchor>
      <arglist>(matrixIn_t small, matrixOut_t normal, bool rows=true) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstraintSetPtr_t</type>
      <name>create</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad6c2d5b23757df6b5d402b683548ade4</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstraintSetPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>addfb385a1955ab5087841eaa3def135a</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;cs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConstraintSet</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a06324e6ccb98d0b6fe4cde9bf9ba7e52</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConstraintSet</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a44276fa064ae282317235907ee51e9ff</anchor>
      <arglist>(const ConstraintSet &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ac7385c5df7fcb726019523d0cf79b03d</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad6622e24ca6e638d22ac1ff6d1df9ae9</anchor>
      <arglist>(ConfigurationOut_t configuration)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad8ca0d93ffaa24515611422d1377ff22</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>LockedJoint</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a0cf7227681ba376fe4a1b9cf700e7726</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Constraint</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a697ed9eaa8955d595a023663ab1e8418</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ConfigProjector</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aa0b7cb74bdaccc4f0639fd10583f68ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>numberNonLockedDof</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a830b73100653fbc3f184cdc1198fb233</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compressVector</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a80f800b50662a4bad150ccb8c3c74da1</anchor>
      <arglist>(vectorIn_t normal, vectorOut_t small) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompressVector</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>abc9c9a04ff80600691a6c084f3bc7ab6</anchor>
      <arglist>(vectorIn_t small, vectorOut_t normal) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compressMatrix</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>abc9a6662bb48bafd0ab7f82f900b200c</anchor>
      <arglist>(matrixIn_t normal, matrixOut_t small, bool rows=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompressMatrix</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>af615e7b550919575806a6bd55ff69ba1</anchor>
      <arglist>(matrixIn_t small, matrixOut_t normal, bool rows=true) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Containers</name>
    <filename>a00021.html</filename>
    <templarg>Types</templarg>
    <templarg>Key</templarg>
    <class kind="struct">hpp::core::Containers::traits</class>
    <member kind="function">
      <type>const traits&lt; Element &gt;::Map_t &amp;</type>
      <name>map</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ab1173821e0f2974e2688547f8f8fa26b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a29242c2eb86dd81ac34cfba3cd07a880</anchor>
      <arglist>(const Key &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a31fff5a57b5232d0b20601e2ef4fa6cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a803e0eb06987fcd1b3f648bfe8de9179</anchor>
      <arglist>(const Key &amp;name, const Element &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>af763c98be1bad0897126755982e271e0</anchor>
      <arglist>(const Key &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>const Element &amp;</type>
      <name>get</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a913bc1be7c23c03d669b6698f659a3fc</anchor>
      <arglist>(const Key &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a6a0ca167d7e01b5f61462df08a627a1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a8c305ca86bccd9fd0ce5e48e0c8433be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>af1613205b0a4dd55f8d7ce4d2cfdd744</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printPointer</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>aa757f1df31c713cc9f8ebcfb39523acb</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Containers&lt; boost::mpl::vector&lt; boost::any &gt; &gt;</name>
    <filename>a00021.html</filename>
    <member kind="function">
      <type>const traits&lt; Element &gt;::Map_t &amp;</type>
      <name>map</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ab1173821e0f2974e2688547f8f8fa26b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a29242c2eb86dd81ac34cfba3cd07a880</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a31fff5a57b5232d0b20601e2ef4fa6cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a803e0eb06987fcd1b3f648bfe8de9179</anchor>
      <arglist>(const std::string &amp;name, const Element &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>af763c98be1bad0897126755982e271e0</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const Element &amp;</type>
      <name>get</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a913bc1be7c23c03d669b6698f659a3fc</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a6a0ca167d7e01b5f61462df08a627a1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a8c305ca86bccd9fd0ce5e48e0c8433be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>af1613205b0a4dd55f8d7ce4d2cfdd744</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printPointer</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>aa757f1df31c713cc9f8ebcfb39523acb</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Containers&lt; boost::mpl::vector&lt; PathPlannerBuilder_t, PathOptimizerBuilder_t, PathValidationBuilder_t, PathProjectorBuilder_t, ConfigurationShooterBuilder_t, NumericalConstraintPtr_t, SteeringMethodBuilder_t &gt; &gt;</name>
    <filename>a00021.html</filename>
    <member kind="function">
      <type>const traits&lt; Element &gt;::Map_t &amp;</type>
      <name>map</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ab1173821e0f2974e2688547f8f8fa26b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a29242c2eb86dd81ac34cfba3cd07a880</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a31fff5a57b5232d0b20601e2ef4fa6cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a803e0eb06987fcd1b3f648bfe8de9179</anchor>
      <arglist>(const std::string &amp;name, const Element &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>af763c98be1bad0897126755982e271e0</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>const Element &amp;</type>
      <name>get</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a913bc1be7c23c03d669b6698f659a3fc</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getAllAs</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a6a0ca167d7e01b5f61462df08a627a1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>getKeys</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a8c305ca86bccd9fd0ce5e48e0c8433be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>af1613205b0a4dd55f8d7ce4d2cfdd744</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printPointer</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>aa757f1df31c713cc9f8ebcfb39523acb</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathOptimization::Cost</name>
    <filename>a00022.html</filename>
    <base>hpp::constraints::DifferentiableFunction</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>hessian</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ab26d699ac64b61541970816f15752b71</anchor>
      <arglist>(matrixOut_t hessian) const  =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Cost</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2afb70fd2c71d8a1d389a04d8df9b1fa</anchor>
      <arglist>(size_type inputSize, size_type inputDerivativeSize, const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::continuousCollisionChecking::Dichotomy</name>
    <filename>a00023.html</filename>
    <base>hpp::core::PathValidation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>validate</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga27f86ba34e4ca51b45ad6e207133309b</anchor>
      <arglist>(const PathPtr_t &amp;path, bool reverse, PathPtr_t &amp;validPart, PathValidationReportPtr_t &amp;report)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga731cb9a6c113024bf96d2c9dd416a77a</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>gabd70823f916058d63b3599b78e531bfc</anchor>
      <arglist>(const JointPtr_t &amp;joint, const CollisionObjectPtr_t &amp;obstacle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Dichotomy</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga08d4c7054f5eaaebe528dc1b10227f07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DichotomyPtr_t</type>
      <name>create</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga5f676eee8fa0cda5944dbfff2d3f092f</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;tolerance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Dichotomy</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga0c4d868306a004e2c0793313c05c9a54</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;tolerance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathProjector::Dichotomy</name>
    <filename>a00024.html</filename>
    <base>hpp::core::PathProjector</base>
    <member kind="typedef">
      <type>hpp::core::StraightPath</type>
      <name>StraightPath</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a03adf80c6fa9a75e098509efba7966ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::core::StraightPathPtr_t</type>
      <name>StraightPathPtr_t</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a9394c63b5e66a9fc9d54ce690a27cad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DichotomyPtr_t</type>
      <name>create</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a0a5a6041fe99ef5a6404c44ece892f88</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const SteeringMethodPtr_t &amp;steeringMethod, value_type maxPathLength)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>impl_apply</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4820c4f7207c0983d7665f2cb8526924</anchor>
      <arglist>(const PathPtr_t &amp;path, PathPtr_t &amp;projection) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Dichotomy</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a1ea1ce232faea905d919f81f222411ce</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const SteeringMethodPtr_t &amp;steeringMethod, value_type maxPathLength)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>applyToStraightPath</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a1a4e469465fbc63a574c4ebed001c865</anchor>
      <arglist>(const StraightPathPtr_t &amp;path, PathPtr_t &amp;projection) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::DiffusingPlanner</name>
    <filename>a00025.html</filename>
    <base>hpp::core::PathPlanner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oneStep</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a791f8399fc5697b3111fed6c0e915a08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configurationShooter</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>aad70741d89a7e861908ee6281f36d3b0</anchor>
      <arglist>(const ConfigurationShooterPtr_t &amp;shooter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DiffusingPlannerPtr_t</type>
      <name>createWithRoadmap</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a17d816e65b09034a785b32c659c74049</anchor>
      <arglist>(const Problem &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DiffusingPlannerPtr_t</type>
      <name>create</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a03253becd83250a7fd2fac6fed3867a5</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DiffusingPlanner</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>af630f760834c5cab89dad400535d2877</anchor>
      <arglist>(const Problem &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DiffusingPlanner</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a204aeb9ef68f3e15d388062194f13729</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a20ee83b94302a13fa4fa82bd80fb6fc5</anchor>
      <arglist>(const DiffusingPlannerWkPtr_t &amp;weak)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>extend</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a040f1c6903000f1e9d6bcb3b1ff4759a</anchor>
      <arglist>(const NodePtr_t &amp;near, const ConfigurationPtr_t &amp;target)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::DiscretizedCollisionChecking</name>
    <filename>a00026.html</filename>
    <base>hpp::core::DiscretizedPathValidation</base>
    <member kind="function" static="yes">
      <type>static DiscretizedCollisionCheckingPtr_t</type>
      <name>create</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a2f9009dcf959e7e675cb494221262e73</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;stepSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DiscretizedCollisionChecking</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a6b1f5bbd46604cd7c277472e49ac913a</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;stepSize)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::DiscretizedPathValidation</name>
    <filename>a00027.html</filename>
    <base>hpp::core::PathValidation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>validate</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>addec5b4c7a133439f4b595a3d60df890</anchor>
      <arglist>(const PathPtr_t &amp;path, bool reverse, PathPtr_t &amp;validPart, PathValidationReportPtr_t &amp;report)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a0aa84d78ac8b0b4b07e67526049f8081</anchor>
      <arglist>(const ConfigValidationPtr_t &amp;configValidation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>af8195206e11bbd54c97aef91ee7f4dec</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>aa67a6530654a7899be46f4613d2cc8fc</anchor>
      <arglist>(const JointPtr_t &amp;joint, const CollisionObjectPtr_t &amp;obstacle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a3cde9036741e3e8b31c12ddebb5a6b63</anchor>
      <arglist>(const RelativeMotion::matrix_type &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DiscretizedPathValidationPtr_t</type>
      <name>create</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a3a7f4b3dcd7239ddb5cd5638d7dcfc29</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;stepSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DiscretizedPathValidation</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a30acf58a9d71866f473bb29e2dc44ec8</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;stepSize)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>stepSize_</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>abd008c5eb8c61567ee56c4e271a87812</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Distance</name>
    <filename>a00028.html</filename>
    <member kind="function">
      <type>value_type</type>
      <name>operator()</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a3c75dcf2c7e82c43c46d09bf834ed9fa</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator()</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>acb40f8d9ed47fcaa3cd5b72868b17153</anchor>
      <arglist>(NodePtr_t n1, NodePtr_t n2) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DistancePtr_t</type>
      <name>clone</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a1f409b28c25202ae65b893e1ba74ce12</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Distance</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a56a0a2c7c1873c23e52e3132fb6dd01d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual value_type</type>
      <name>impl_distance</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a43c43e4c075acd0c48f4861e426f4341</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const  =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>impl_distance</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a10748dc598cf771bb1e9da4854bf586e</anchor>
      <arglist>(NodePtr_t n1, NodePtr_t n2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::DistanceBetweenObjects</name>
    <filename>a00029.html</filename>
    <member kind="function">
      <type></type>
      <name>DistanceBetweenObjects</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ac1dd944826adb10b280bc7c88b75577d</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObstacle</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a434eb368dfd51b5b851030aa0416a9fd</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>obstacles</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a569ced6c307987c71d44364eaca10b7f</anchor>
      <arglist>(const ObjectVector_t &amp;obstacles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeDistances</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a3d0b688c142887836e4dfcd2a4a8cdd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DistanceResults_t &amp;</type>
      <name>distanceResults</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a772a864c70888ba7d0679b73f7e34d2b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::DoubleInequality</name>
    <filename>a00030.html</filename>
    <base>hpp::core::ComparisonType</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>aa75ee1329beb10c63f4186c6cc37b1b9</anchor>
      <arglist>(vectorOut_t value, matrixOut_t jacobian) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a93b4ee0eea9ddc41732984f3d3c62643</anchor>
      <arglist>(vectorOut_t value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>threshold</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a6a912cf1a5c2cf74c0db6487613b6965</anchor>
      <arglist>(const value_type &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ComparisonTypePtr_t</type>
      <name>create</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>afb92e39710dcbf3efed8c74f9f004645</anchor>
      <arglist>(const value_type width, const value_type &amp;threshold=1e-3)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DoubleInequality</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>aea06b74599f109a6e230af583564eeb9</anchor>
      <arglist>(const value_type width, const value_type &amp;threshold)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Edge</name>
    <filename>a00031.html</filename>
    <member kind="function">
      <type></type>
      <name>Edge</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a5a267e059a12f5d614858f6455f7706b</anchor>
      <arglist>(NodePtr_t n1, NodePtr_t n2, const PathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>from</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a75b0bb2121466b1d3b54225b9706cf2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>to</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a537d8df73d6e5493407f1caf071661db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PathPtr_t</type>
      <name>path</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>ab50d91fc93b307762867b1e4b8bb9c7b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Equality</name>
    <filename>a00032.html</filename>
    <base>hpp::core::ComparisonType</base>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aad36803bc1de9cd9e65b8a338656e42f</anchor>
      <arglist>(vectorOut_t, matrixOut_t) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3318595727f6581b442705a73e4360d9</anchor>
      <arglist>(vectorOut_t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>constantRightHandSide</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a02702a875e90676bc48e96dac83bb705</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EqualityPtr_t</type>
      <name>create</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aeec516e78f3ab9b8c5d7f1df1fd4d5a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static EqualityPtr_t</type>
      <name>unique_</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae7ddb61da6ef9f0634c5972d0113d14b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::EqualToZero</name>
    <filename>a00033.html</filename>
    <base>hpp::core::ComparisonType</base>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a759529cc193defa08104c55d0e53dd09</anchor>
      <arglist>(vectorOut_t, matrixOut_t) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>abb57e73a4530207b74b0c5f5269c15e4</anchor>
      <arglist>(vectorOut_t) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EqualToZeroPtr_t</type>
      <name>create</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a507adcd8b947c8ced00af13ae2b2c080</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static EqualToZeroPtr_t</type>
      <name>unique_</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a4cc2f69e943a4f127a3f5f8f780352cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Equation</name>
    <filename>a00034.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual EquationPtr_t</type>
      <name>copy</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a3eade4eb49df55152a694b3633b349eb</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a9c569710355d7874c4c8715708149ad5</anchor>
      <arglist>(ConfigurationIn_t config)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSide</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a286a83cfbc648b5b7354c4c6505cca31</anchor>
      <arglist>(vectorIn_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>vectorIn_t</type>
      <name>rightHandSide</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>aeae0a1508f3fcb05cda9b68ab05ae74f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rhsSize</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>abe5faee3ca4321f68fc18332a2612fa5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ComparisonTypePtr_t &amp;</type>
      <name>comparisonType</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>abb06d410d3b274c32bba082b57b0c710</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comparisonType</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a1722d7d8212c384841185031705293be</anchor>
      <arglist>(const ComparisonTypePtr_t &amp;comp)</arglist>
    </member>
    <member kind="function">
      <type>vectorOut_t</type>
      <name>nonConstRightHandSide</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a925eb8786e3f1247236285f9a881d3d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Equation</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a4a96d699c84b65eca5ac21b7adbab1dc</anchor>
      <arglist>(const ComparisonTypePtr_t &amp;comp, vectorIn_t rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Equation</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a6cf6e1e0e2150e018ee4533d2352ff02</anchor>
      <arglist>(const Equation &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a9fe6e0a71d738fbf0ec6aceb3604dc58</anchor>
      <arglist>(const EquationWkPtr_t &amp;weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ExplicitNumericalConstraint</name>
    <filename>a00035.html</filename>
    <base>hpp::core::NumericalConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual EquationPtr_t</type>
      <name>copy</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ae73ebba5029a8eb821f9e7ca19d4cf9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ad1a7e4c99842670d73feea5118819524</anchor>
      <arglist>(ConfigurationOut_t configuration)</arglist>
    </member>
    <member kind="function">
      <type>const SizeIntervals_t &amp;</type>
      <name>outputConf</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ab677443149c43764cfe9bdae877f3881</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SizeIntervals_t &amp;</type>
      <name>outputVelocity</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a170ffb6bc8ac7bd6729721bb221dffa1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExplicitNumericalConstraintPtr_t</type>
      <name>create</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a279b189a156123c41700d5dbddecf3aa</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const DifferentiableFunctionPtr_t &amp;function, const SizeIntervals_t &amp;outputConf, const SizeIntervals_t &amp;outputVelocity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExplicitNumericalConstraintPtr_t</type>
      <name>create</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a2b187648d8286c62bde81ddc8015f92c</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const DifferentiableFunctionPtr_t &amp;function, const SizeIntervals_t &amp;outputConf, const SizeIntervals_t &amp;outputVelocity, vectorIn_t rhs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExplicitNumericalConstraintPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a07b868b37bf09d4688d5206f3058e9f1</anchor>
      <arglist>(const ExplicitNumericalConstraintPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExplicitNumericalConstraint</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ad98fa625ecd09aaa052dd2a6b9478560</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const DifferentiableFunctionPtr_t &amp;function, const SizeIntervals_t &amp;outputConf, const SizeIntervals_t &amp;outputVelocity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExplicitNumericalConstraint</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ae61b5d680924b281837986b0d104ecdb</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const DifferentiableFunctionPtr_t &amp;function, const SizeIntervals_t &amp;outputConf, const SizeIntervals_t &amp;outputVelocity, vectorIn_t rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExplicitNumericalConstraint</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a5db57b90215652ab0b1a4f05904f004f</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;implicitConstraint, const SizeIntervals_t &amp;outputConf, const SizeIntervals_t &amp;outputVelocity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExplicitNumericalConstraint</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a5ea08a80f07fd7ee6614bc826bfabd13</anchor>
      <arglist>(const ExplicitNumericalConstraint &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a0a5c7ec29f1043e530f92156817e1b9e</anchor>
      <arglist>(const ExplicitNumericalConstraintWkPtr_t &amp;weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ExplicitRelativeTransformation</name>
    <filename>a00036.html</filename>
    <base>hpp::core::ExplicitNumericalConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual EquationPtr_t</type>
      <name>copy</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>aadbc23181ab6ccdf68cb941d6d134216</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a37d90c275258e904ea56ceb7bff43fff</anchor>
      <arglist>(ConfigurationOut_t configuration)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExplicitRelativeTransformationPtr_t</type>
      <name>create</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a3b14d99a9ad90a57bc54f7551fd4a58c</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const Transform3f &amp;frame1, const Transform3f &amp;frame2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ExplicitRelativeTransformationPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>abb30596e78d8d8be17476d7c407ef10e</anchor>
      <arglist>(const ExplicitRelativeTransformationPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExplicitRelativeTransformation</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a1ae41444af107c472c5e839c7426822c</anchor>
      <arglist>(const std::string &amp;name, const DevicePtr_t &amp;robot, const JointPtr_t &amp;joint1, const JointPtr_t &amp;joint2, const Transform3f &amp;frame1, const Transform3f &amp;frame2, std::vector&lt; bool &gt; mask=boost::assign::list_of(true)(true)(true)(true)(true)(true))</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExplicitRelativeTransformation</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a54cb86f673577b27fdf50bb97f3c77dc</anchor>
      <arglist>(const ExplicitRelativeTransformation &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a19bddd431cd3ce3b09c6d5881e47592a</anchor>
      <arglist>(const ExplicitRelativeTransformationWkPtr_t &amp;weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathProjector::Global</name>
    <filename>a00037.html</filename>
    <base>hpp::core::PathProjector</base>
    <member kind="typedef">
      <type>hpp::core::StraightPath</type>
      <name>StraightPath</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a92e8d266d5335f1c6cae07b6a882a0a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::core::StraightPathPtr_t</type>
      <name>StraightPathPtr_t</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ad746fae9de974ebd50c78cec7347f985</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlobalPtr_t</type>
      <name>create</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a90e020c8368941cb642cb68c9b20db5d</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const SteeringMethodPtr_t &amp;steeringMethod, value_type step)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>impl_apply</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a2a4c82ea4af5b828c012731597b85b60</anchor>
      <arglist>(const PathPtr_t &amp;path, PathPtr_t &amp;projection) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Global</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aa73e38cfe7a2b77c8a8a5e55749b9a74</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const SteeringMethodPtr_t &amp;steeringMethod, value_type step)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::problemTarget::GoalConfigurations</name>
    <filename>a00038.html</filename>
    <base>hpp::core::ProblemTarget</base>
    <member kind="function">
      <type>void</type>
      <name>check</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a79ba63bff8d1f2cf43a081f5696a1f82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initRoadmap</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a7d52d25db0dcbec542daec6a15fa91ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalConfig</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>abaf9c2ffe55e3e6069bdf4c06a786d4a</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GoalConfigurationsPtr_t</type>
      <name>create</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a582238b0150a152e31df9e3cb031fae7</anchor>
      <arglist>(const PathPlannerPtr_t &amp;planner)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GoalConfigurations</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a14d1fa23498234a404eb7cb798081080</anchor>
      <arglist>(const PathPlannerPtr_t &amp;planner)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathOptimization::GradientBased</name>
    <filename>a00039.html</filename>
    <base>hpp::core::PathOptimizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>optimize</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga333c9ed253e1901223f3ab95ce2bc970</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GradientBasedPtr_t</type>
      <name>create</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga3395c68307cad504abcf8cac8ea725fa</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GradientBased</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga53fdf87420e173ddc6ddee85a4f2eaf9</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Inequality</name>
    <filename>a00040.html</filename>
    <templarg>T</templarg>
    <base>hpp::core::ComparisonType</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a28f796c0ed38bf763d40f99a2965ff56</anchor>
      <arglist>(vectorOut_t value, matrixOut_t jacobian) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>operator()</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a354845ceb69c935543c0c7851dc3125a</anchor>
      <arglist>(vectorOut_t value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>threshold</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a99a5337fcd14b1c86b95e4c82671fd70</anchor>
      <arglist>(const value_type &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ComparisonTypePtr_t</type>
      <name>create</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>acbb9313c3355961a512c030e9bafa4f8</anchor>
      <arglist>(const value_type &amp;threshold=1e-3)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Inequality</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>afa017bc06b7ffb3b66fc624771b98f4f</anchor>
      <arglist>(const value_type &amp;threshold)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::steeringMethod::Interpolated</name>
    <filename>a00041.html</filename>
    <base>hpp::core::SteeringMethod</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SteeringMethodPtr_t</type>
      <name>copy</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a1f6e65d86a95d8cf7590384baaa7a7f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>impl_compute</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>aacbd6a2640d97ad1f7d111c3e7ec879c</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolatedPtr_t</type>
      <name>create</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>af12f299917083020dc89030de1b001d0</anchor>
      <arglist>(const DevicePtr_t &amp;device)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolatedPtr_t</type>
      <name>create</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a883dc872b83dfab8fb1889919db0ebd9</anchor>
      <arglist>(const DevicePtr_t &amp;device, const WeighedDistancePtr_t &amp;distance)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolatedPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ab2a38cc80e6ffcf9d188e0e93710feaf</anchor>
      <arglist>(const InterpolatedPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ab72747cb4228a6f293397073ea74d31a</anchor>
      <arglist>(const DevicePtr_t &amp;device)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a9df24b8b3c1ab5b6d436221e76f590f9</anchor>
      <arglist>(const DevicePtr_t &amp;device, const WeighedDistancePtr_t &amp;distance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Interpolated</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a0a72116bad671a84c7c78945dffc0084</anchor>
      <arglist>(const Interpolated &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a01a79dfa2852960d5eefc2e66e561d78</anchor>
      <arglist>(InterpolatedWkPtr_t weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::InterpolatedPath</name>
    <filename>a00042.html</filename>
    <base>hpp::core::Path</base>
    <member kind="typedef">
      <type>std::pair&lt; value_type, Configuration_t &gt;</type>
      <name>InterpolationPoint_t</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a47b71403400f83fef12e5f29283b7bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; value_type, Configuration_t, std::less&lt; value_type &gt;, Eigen::aligned_allocator&lt; InterpolationPoint_t &gt; &gt;</type>
      <name>InterpolationPoints_t</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a5d0ac2e9734c6a5340e9ff185eea5215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Path</type>
      <name>parent_t</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aaef91811efba37e7d1f078f8320d7bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterpolatedPath</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a4d148afcfcbfb278c73b717544e62501</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>af68224281cf8d23a477718a18c2ce724</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ac1092a4dc260d196eb3e7b4684a0fd82</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>extract</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a89b5b908e0d7fa0e1571cf59172fbc11</anchor>
      <arglist>(const interval_t &amp;subInterval) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>reverse</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a3b0c5ab6290388c28ed484d6404c292a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DevicePtr_t</type>
      <name>device</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>abca244452bb7502b5265bad98ca87064</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a4a0b268a03705ecad57c0fa582d871a6</anchor>
      <arglist>(const value_type &amp;time, ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>initial</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a181482dd6afecc106945789a7c704402</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>end</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>aa6dc3b958f69b4abf1e63c3b4153e555</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const InterpolationPoints_t &amp;</type>
      <name>interpolationPoints</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a6331d06586685bf3e40230e13d34709d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolatedPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a02f74cda18f54c7d59ec9b987618517c</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, value_type length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolatedPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>acc751fe7054cd2f0efaaed380152018e</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, value_type length, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolatedPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a7cf1e09f2ae20e228b385972a59b0e8b</anchor>
      <arglist>(const InterpolatedPathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolatedPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a4c39ba2a15c161121737326cf9adc597</anchor>
      <arglist>(const PathPtr_t &amp;path, const DevicePtr_t &amp;device, const std::size_t &amp;nbSamples)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolatedPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a21b2623d03b4be5fb30f24636cfdcc69</anchor>
      <arglist>(const InterpolatedPathPtr_t &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ae52b1694c5ed7acf7fd90f1be8cb18f8</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InterpolatedPath</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a1987d0c859ee8a6fee4787ba59fa6f58</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InterpolatedPath</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a332f15ab5735c464c846e31e9e2e4efb</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type length, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InterpolatedPath</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a7dff12acac29453366ea7fdce3481523</anchor>
      <arglist>(const InterpolatedPath &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InterpolatedPath</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a2a4eda1b73ed6adaf7a0aecac3f27e1b</anchor>
      <arglist>(const InterpolatedPath &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ab9de2705f1eb9ac1cb4f6fc12a1d2467</anchor>
      <arglist>(InterpolatedPathPtr_t self)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initCopy</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a199e8b4cbe3d541b5bc2c58a4a21aebc</anchor>
      <arglist>(InterpolatedPathPtr_t self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ab92e65d03750a4c02263a94138add2d1</anchor>
      <arglist>(ConfigurationOut_t result, value_type param) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::JointBoundException</name>
    <filename>a00043.html</filename>
    <member kind="function">
      <type></type>
      <name>JointBoundException</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a7113206863ff2a9b860d5df23b0fffb3</anchor>
      <arglist>(const std::string &amp;what, const JointPtr_t &amp;joint, size_type rank, value_type lowerBound, value_type upperBound, value_type value) HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="variable">
      <type>JointPtr_t</type>
      <name>joint_</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>af47e02857b6e26d0b1a58eccf6bdadcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>rank_</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a221f35fba27c9c9a4e57710e24bc33fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>lowerBound_</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>af23646e67ed85f4159436d868c4a326d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>upperBound_</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a6b0f265f78273260bb3d5d0c89f4575b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>value_</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a2d1b5220dae7c25fe12f77b8b78f4db7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::JointBoundValidation</name>
    <filename>a00044.html</filename>
    <base>hpp::core::ConfigValidation</base>
    <member kind="function">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a9b1bfdb1b4e4811b6b14bcd239f2cd42</anchor>
      <arglist>(const Configuration_t &amp;config, ValidationReportPtr_t &amp;validationReport)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JointBoundValidationPtr_t</type>
      <name>create</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ae694cec562d8f06573293abb5a57a3aa</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JointBoundValidation</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a7da76950b3ebb8cd5b0515b9bc6cb281</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::JointBoundValidationReport</name>
    <filename>a00045.html</filename>
    <base>hpp::core::ValidationReport</base>
    <member kind="function">
      <type></type>
      <name>JointBoundValidationReport</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a5c409efb16dd9d54cf011d9685aa9e6f</anchor>
      <arglist>(const JointPtr_t &amp;joint, size_type rank, value_type lowerBound, value_type upperBound, value_type value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a6d86ba6d54f8ed55aacb0709fa9a0e57</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>JointPtr_t</type>
      <name>joint_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a28a269ded377c700629bf2c870607658</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>rank_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a8a0873f04f072108807ad8d5880e18b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>lowerBound_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a8f7c746951e69f353b6b60e85ebed067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>upperBound_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ae7cc9c8e8a81ecf9839cc5d99acfe770</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>value_</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>aed425da6d68c393d97f79ee7189f3ff0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::LockedJoint</name>
    <filename>a00046.html</filename>
    <base>hpp::core::Equation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual EquationPtr_t</type>
      <name>copy</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a47853ac787fe411d72abdb59782c8d20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>rankInConfiguration</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ac39862e24fd64659347e4e2d3ecb6990</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>rankInVelocity</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aeadebb3210bf1ec0d0f0fdde89d806c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ae0cf456e3bc5d766108d11da9a02958a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberDof</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a416ee5a86dbe8d5e6c3b2b43ef741a7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vectorIn_t</type>
      <name>value</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aaa9e31c22b30195bdb9cbd47e430be90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>value</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aaf22cfa7936ac1523fd8358b5a9a0534</anchor>
      <arglist>(vectorIn_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a3bd82d2bbd51272d8b1263e1a2ceb994</anchor>
      <arglist>(ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>abb5535fc900f3a8bfe397e3b54fa04ff</anchor>
      <arglist>(ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a1ba1f6e1502841ccd170535ceeb97832</anchor>
      <arglist>(ConfigurationIn_t config, vector_t &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>jointName</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a8bcfadf6cc33138f054f445c97c761f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a862fc3b6d148ff41c1fc6201324da87c</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LockedJointPtr_t</type>
      <name>create</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a2d4c8bfdcef8967e2b7b310c2a5f2e21</anchor>
      <arglist>(const JointPtr_t &amp;joint, vectorIn_t value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LockedJointPtr_t</type>
      <name>create</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ac064bf2fc131178a0c9c90fcd170d078</anchor>
      <arglist>(const JointPtr_t &amp;joint, const size_type index, vectorIn_t value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LockedJointPtr_t</type>
      <name>create</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a3955ec9b9d474f5851373ef3d1bb407d</anchor>
      <arglist>(const DevicePtr_t &amp;dev, const size_type index, vectorIn_t value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LockedJointPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a0a4782a80eeba7d9f5320bb7a5b8346e</anchor>
      <arglist>(LockedJointConstPtr_t other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LockedJoint</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ab3eb837a27f529d2b48098de863b4b46</anchor>
      <arglist>(const JointPtr_t &amp;joint, vectorIn_t value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LockedJoint</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a4ae78d21503a823d18498e2c4db97467</anchor>
      <arglist>(const JointPtr_t &amp;joint, const size_type index, vectorIn_t value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LockedJoint</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a15c0538f57194ab9a491e92e6e3e0a5c</anchor>
      <arglist>(const DevicePtr_t &amp;dev, const size_type index, vectorIn_t value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LockedJoint</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a66d3b8ed86303676a771658b2421a9bc</anchor>
      <arglist>(const LockedJoint &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a92786f00d70976a846da95c24726e7ff</anchor>
      <arglist>(const LockedJointPtr_t &amp;self)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ConfigProjector</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aa0b7cb74bdaccc4f0639fd10583f68ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::NearestNeighbor</name>
    <filename>a00047.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>aa193b570951cbe30f2bab37f04b54c3b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addNode</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a70e5483ce16492c16d51090b4422e954</anchor>
      <arglist>(const NodePtr_t &amp;node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual NodePtr_t</type>
      <name>search</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a3ef0ecc1305b6e89e132b3b1a20b29e2</anchor>
      <arglist>(const ConfigurationPtr_t &amp;configuration, const ConnectedComponentPtr_t &amp;connectedComponent, value_type &amp;distance)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual NodePtr_t</type>
      <name>search</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a329e15aefc77e0ad80b858fd81c04a27</anchor>
      <arglist>(const NodePtr_t &amp;node, const ConnectedComponentPtr_t &amp;connectedComponent, value_type &amp;distance)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Nodes_t</type>
      <name>KnearestSearch</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>abf88936c44c8a057b3059d165d9146d8</anchor>
      <arglist>(const ConfigurationPtr_t &amp;configuration, const ConnectedComponentPtr_t &amp;connectedComponent, const std::size_t K, value_type &amp;distance)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Nodes_t</type>
      <name>KnearestSearch</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ae9660326278416bb3cb081b73795db7e</anchor>
      <arglist>(const NodePtr_t &amp;node, const ConnectedComponentPtr_t &amp;connectedComponent, const std::size_t K, value_type &amp;distance)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a5f5e6f4d53aa6bdb5e35af48b3d3e0c2</anchor>
      <arglist>(ConnectedComponentPtr_t cc1, ConnectedComponentPtr_t cc2)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DistancePtr_t</type>
      <name>distance</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>ac79f9e2f549e651a3b53e08cbc13c773</anchor>
      <arglist>() const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Node</name>
    <filename>a00048.html</filename>
    <member kind="typedef">
      <type>std::list&lt; EdgePtr_t &gt;</type>
      <name>Edges_t</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a74c65456f9d57e36c035c96fbe4ce063</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a1d90b9dde9df4703255dbbd89e352eec</anchor>
      <arglist>(const ConfigurationPtr_t &amp;configuration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae74cbbfb862aec394420cf8d949e3859</anchor>
      <arglist>(const ConfigurationPtr_t &amp;configuration, ConnectedComponentPtr_t connectedComponent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOutEdge</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6fd511c2789e92a17e65e742dd2e3095</anchor>
      <arglist>(EdgePtr_t edge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addInEdge</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a3004c16946fdc3f77f0a31343709381b</anchor>
      <arglist>(EdgePtr_t edge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connectedComponent</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aa2e71f412975ae33209ec0c49e9b9954</anchor>
      <arglist>(const ConnectedComponentPtr_t &amp;cc)</arglist>
    </member>
    <member kind="function">
      <type>ConnectedComponentPtr_t</type>
      <name>connectedComponent</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a6b8707eb8f1492a925ffbfd0a37737cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Edges_t &amp;</type>
      <name>outEdges</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>aa31da8eb583fc227adf7f01e661e1206</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Edges_t &amp;</type>
      <name>inEdges</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a3eedf5267fc11f232072aa45d9cc2189</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOutNeighbor</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a9217584e43f81178546fdb10e389f301</anchor>
      <arglist>(const NodePtr_t &amp;n) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInNeighbor</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a2b40445652ac10f12c5d70d3a9a11687</anchor>
      <arglist>(const NodePtr_t &amp;n) const </arglist>
    </member>
    <member kind="function">
      <type>ConfigurationPtr_t</type>
      <name>configuration</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>ae02456293889a1ca42cde3143eeb0eb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00048.html</anchorfile>
      <anchor>a4004fdb5baa2a3e03d0fc497243ef2d2</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::NumericalConstraint</name>
    <filename>a00049.html</filename>
    <base>hpp::core::Equation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual EquationPtr_t</type>
      <name>copy</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a884656a80029fe5bce1d1dc4eb3abecd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rightHandSideFromConfig</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>aea0c288364c574f30d9c8ee4109a7986</anchor>
      <arglist>(ConfigurationIn_t config)</arglist>
    </member>
    <member kind="function">
      <type>DifferentiableFunction &amp;</type>
      <name>function</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a8b338190d78b72556f0a28bab312c7d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DifferentiableFunctionPtr_t &amp;</type>
      <name>functionPtr</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a8d9c51bbdc9e79143d8a53498304239c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>vector_t &amp;</type>
      <name>value</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a37615794a847db47ce4e5cb1134d1435</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>matrix_t &amp;</type>
      <name>jacobian</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>acb24e17090901c8c1b2dd07d2de8aebf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NumericalConstraintPtr_t</type>
      <name>create</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>af44658be9309bc21cf3c969a6b0c0c73</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;function, ComparisonTypePtr_t comp=ComparisonType::createDefault())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NumericalConstraintPtr_t</type>
      <name>create</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a5d659159ffda1306c14e27f910ab6806</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;function, ComparisonTypePtr_t comp, vectorIn_t rhs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NumericalConstraintPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>ad614cb1eb08c1302749a3b4997596349</anchor>
      <arglist>(const NumericalConstraintPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NumericalConstraint</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a0bdf8d82f5fea0321f9cf1e0a2603de6</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;function, ComparisonTypePtr_t comp=ComparisonType::createDefault())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NumericalConstraint</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>abcd03694c89b72350f90093c8a9913d7</anchor>
      <arglist>(const DifferentiableFunctionPtr_t &amp;function, ComparisonTypePtr_t comp, vectorIn_t rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NumericalConstraint</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a9e5e321418b95541aabd89cd67d47083</anchor>
      <arglist>(const NumericalConstraint &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a809b3fc18b33a3a396694a6863d42d9c</anchor>
      <arglist>(const NumericalConstraintWkPtr_t &amp;weak)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::NumTraits&lt; hpp::core::RelativeMotion::RelativeMotionType &gt;</name>
    <filename>a00050.html</filename>
  </compound>
  <compound kind="struct">
    <name>hpp::core::pathOptimization::ConfigOptimization::Optimizer</name>
    <filename>a00051.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>optimize</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>a8d697db7e94d77a081539fadce9a63ab</anchor>
      <arglist>(ConfigurationOut_t q, const std::size_t numIter, const value_type alpha) const </arglist>
    </member>
    <member kind="variable">
      <type>ConfigProjectorPtr_t</type>
      <name>proj</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>ac1641307adfabc8edb5a62a80672efac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::pathOptimization::PartialShortcut::Parameters</name>
    <filename>a00052.html</filename>
    <member kind="function">
      <type></type>
      <name>Parameters</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a4a3d6a8dad54d8ac7b69f9f3865b9cbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>removeLockedJoints</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a91f454c2a1dc8a4f70458756d8182b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>onlyFullShortcut</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a75970d058e9ae521a69966e93387cce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>numberOfConsecutiveFailurePerJoints</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>aaebcce816b7f58576329f4b69d5923c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>progressionMargin</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>ad5efb6dfeee0176f179cb50539f3dba7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::pathOptimization::ConfigOptimization::Parameters</name>
    <filename>a00053.html</filename>
    <member kind="function">
      <type></type>
      <name>Parameters</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a64e907f6231a4030dabad6a48a70c744</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>addConfigConstraintToPath</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a55f528a7a9541b189707892cbe18f625</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>numberOfPass</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>afb32dd134b598e4c80c2af2d48dbe096</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>numberOfIterations</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a6e16493a982e79997425c2acb8806b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>alphaInit</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a9ffe7d53309d3810d20ea6c58fdf9036</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::function&lt; Configuration_t(const PathVector &amp;)&gt;</type>
      <name>getGoal</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a90ad13bdca35d20fb4274f7f47dbb9c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::function&lt; ConfigProjectorPtr_t(const PathPtr_t &amp;, const PathPtr_t &amp;, bool &amp;) &gt;</type>
      <name>getConfigProjector</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ab0452c9919314b06db8ec86f8daf9c18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::function&lt; bool(const JointPtr_t, const size_type)&gt;</type>
      <name>shouldFilter</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a0ddb3f472aa3a7f3856a08de50484784</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathOptimization::PartialShortcut</name>
    <filename>a00054.html</filename>
    <base>hpp::core::PathOptimizer</base>
    <class kind="struct">hpp::core::pathOptimization::PartialShortcut::Parameters</class>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>optimize</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a0d8e7ab14f011bb8175c7c4835dcd081</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PartialShortcutPtr_t</type>
      <name>createWithTraits</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a5785846798bda80cad24da42c2ae6adc</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PartialShortcutPtr_t</type>
      <name>create</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a044fea82f50f1bfdd352136de44a6a4e</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="variable">
      <type>struct hpp::core::pathOptimization::PartialShortcut::Parameters</type>
      <name>parameters</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a622c6e6d44093fcc0528d99f858abe8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PartialShortcut</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>ae24a6353a4c5e706d4032226564fd685</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::pathOptimization::PartialShortcutTraits</name>
    <filename>a00055.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>removeLockedJoints</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>aa848895a48edf98e54194b89a4890828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>onlyFullShortcut</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>af557460e690ad76a108fe04cfc6f7e26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>numberOfConsecutiveFailurePerJoints</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>aa76e488e2690e1b2090dade2a2631f96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static value_type</type>
      <name>progressionMargin</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a93af513a86e37e465ce62a230aef41fd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathOptimization::PartialSplinePath</name>
    <filename>a00056.html</filename>
    <base>hpp::core::Path</base>
    <member kind="typedef">
      <type>Path</type>
      <name>parent_t</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>aa96bdab8aa1b92b45236f3591a2e8c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a5260ee19d0e70c482dc2d6e2edd901fc</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PartialSplinePath</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a7948cd5c3322c4d06335adaeba8f16a0</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const PathPtr_t &amp;path, const JointVector_t &amp;joints, const std::vector&lt; value_type &gt; &amp;knots)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PartialSplinePath</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>ae6518f85b7dc8f5656582f9322438c05</anchor>
      <arglist>(const PartialSplinePathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>ab493c1629049c3b4ebe83fb72e5fd118</anchor>
      <arglist>(PartialSplinePathPtr_t self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>acb40b1d57dbc69cfe7c8e7cd2ab24d39</anchor>
      <arglist>(ConfigurationOut_t result, value_type t) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PartialSplinePathPtr_t</type>
      <name>create</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a8540b89612a750b33d73e01ad123b605</anchor>
      <arglist>(const PathPtr_t &amp;path, const JointVector_t &amp;joints, const std::vector&lt; value_type &gt; &amp;knots)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PartialSplinePathPtr_t</type>
      <name>create</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>af80f02f8f79d8d72be3b328cf022a0aa</anchor>
      <arglist>(const roboptim::trajectory::CubicBSpline &amp;spline)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>ac458b650c7d671d5a8c2dad302849831</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PartialSplinePath</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>ae9412bccbf2db2ae15f9fbc2db9f1d89</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Path</name>
    <filename>a00057.html</filename>
    <member kind="function">
      <type>Configuration_t</type>
      <name>operator()</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a4af5898885700c3bebc772baee6d3584</anchor>
      <arglist>(const value_type &amp;t) const HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>operator()</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ab0197180f3c672f683e60094fd770e8b</anchor>
      <arglist>(const value_type &amp;t, bool &amp;success) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a2c7d849a715b983475bef29b367b9f07</anchor>
      <arglist>(ConfigurationOut_t result, const value_type &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>at</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a880fabfc50a4712392746aadbe1b2dcd</anchor>
      <arglist>(const value_type &amp;t, ConfigurationOut_t result) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a9ac19554f8769acd1fb3b56924612542</anchor>
      <arglist>(ConfigurationOut_t configuration, value_type t) const  =0</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>outputSize</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a6b1c90dd15edb7433f2d312f44729331</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>outputDerivativeSize</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a4dce1e58bd78277aef41b3cf06599100</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const interval_t &amp;</type>
      <name>timeRange</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a35ae47ffb43b4cd64eb18c67b5e8a862</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>length</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a2a291fb0a47e09e9e3bf19ad579d577f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Configuration_t</type>
      <name>initial</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ab3587ba34b658bc155c095ac72d4dd78</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Configuration_t</type>
      <name>end</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a9d3c0d0607b3b0541b5a50f532306072</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Path</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a34c160f000b93c5dac39f0fb8fa2eb53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>af610d3c7f53cfc8eff6de172a2e832be</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a9ac01c76b22a9d1638551d9251533074</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const  =0</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; T &gt;</type>
      <name>as</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a301067df334969c0c76d7fb47a3bfc1a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; const T &gt;</type>
      <name>as</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ac2dca4742b8e471d5a983a98cb838abe</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>extract</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>aed9877c8780e174769d53be92538a9e7</anchor>
      <arglist>(const interval_t &amp;subInterval) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>reverse</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a742d849c702a1ce98a217a7466214d07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ConstraintSetPtr_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a365a0deb55193e3a9f3b355971120832</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>aac3b8bf068b06c0c6522f10ba0409f3d</anchor>
      <arglist>(std::ostream &amp;os) const  =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Path</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>afae1e18629d3fabd76872cbd99307cad</anchor>
      <arglist>(const interval_t &amp;interval, size_type outputSize, size_type outputDerivativeSize, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Path</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a4b31ad9780b79d48b75d4a084d71fbac</anchor>
      <arglist>(const interval_t &amp;interval, size_type outputSize, size_type outputDerivativeSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Path</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>adf26ad74e174ef8898169d388c5dd353</anchor>
      <arglist>(const Path &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Path</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>aa626b174e01a5a42fd1636633cd24dd1</anchor>
      <arglist>(const Path &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a1a46a663979007da4e7d0cc9454943cc</anchor>
      <arglist>(const PathPtr_t &amp;self)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initCopy</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ae261e253776fe1fb98261b7f7798bbbc</anchor>
      <arglist>(const PathPtr_t &amp;self)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>constraints</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a92a695e72bdf3f3261089324ec2f3a8a</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraint)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkPath</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a1fe007369d3bdee974fda756dea5b00d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>interval_t</type>
      <name>timeRange_</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a3974c8f97f2ac2740ee2c58d878d8624</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a5ea27806529a992b2754d027a0c0303f</anchor>
      <arglist>(std::ostream &amp;os, const Path &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Path</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a34c160f000b93c5dac39f0fb8fa2eb53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>af610d3c7f53cfc8eff6de172a2e832be</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a9ac01c76b22a9d1638551d9251533074</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const  =0</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; T &gt;</type>
      <name>as</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a301067df334969c0c76d7fb47a3bfc1a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; const T &gt;</type>
      <name>as</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ac2dca4742b8e471d5a983a98cb838abe</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>extract</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>aed9877c8780e174769d53be92538a9e7</anchor>
      <arglist>(const interval_t &amp;subInterval) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>reverse</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a742d849c702a1ce98a217a7466214d07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ConstraintSetPtr_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a365a0deb55193e3a9f3b355971120832</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathOptimization::PathLength</name>
    <filename>a00058.html</filename>
    <base>hpp::core::pathOptimization::Cost</base>
    <member kind="function" static="yes">
      <type>static PathLengthPtr_t</type>
      <name>create</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ace1fcb7755db254c7a999909beb5578b</anchor>
      <arglist>(const WeighedDistancePtr_t &amp;distance, const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathLength</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a03f09628abe283d88c9f9174ba0064eb</anchor>
      <arglist>(const WeighedDistancePtr_t &amp;distance, const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_compute</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a92f3a5584bf04b93ab419aa9ddc28a6b</anchor>
      <arglist>(vectorOut_t result, vectorIn_t argument) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>impl_jacobian</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>af18075f786f0ddb9eb6fee49daef2194</anchor>
      <arglist>(matrixOut_t jacobian, vectorIn_t arg) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>hessian</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a9115263879b0cee6597e0a2ffbfa6c7b</anchor>
      <arglist>(matrixOut_t result) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::PathOptimizer</name>
    <filename>a00059.html</filename>
    <member kind="function">
      <type>const Problem &amp;</type>
      <name>problem</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga9d07d63edbc71df565164e70cb807057</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PathVectorPtr_t</type>
      <name>optimize</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga04d8e315addf200833541c8bb01ef360</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interrupt</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga945c65ca497efd7c4098cd99dd26c413</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathOptimizer</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga1dbe27ed7b7e7706778be064443061e1</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PathPtr_t</type>
      <name>steer</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga1fe4d818491c40aa735dbdafab2353e9</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>interrupt_</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga8ada4f7cabc118faaac5d3f48ac4c56e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::PathPlanner</name>
    <filename>a00060.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const RoadmapPtr_t &amp;</type>
      <name>roadmap</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>abc9d0f87290140294426a57a5351d25a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Problem &amp;</type>
      <name>problem</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>af10fd1b9d58700918c12c8fbbad1b5ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startSolve</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ad309affd83643ec92dedf255c91e539a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>solve</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a8fa2699cbd9b88e87894e64ef556734b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tryDirectPath</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a0327dbf7953e0784ddd0aefda98daa35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>oneStep</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a7df08171eba296112c900c636f603145</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>finishSolve</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a8ed743cc43c1f972b067640936c07645</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interrupt</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>aef447a681b5d2d00605b71b99d4a4ba8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PathVectorPtr_t</type>
      <name>computePath</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a07d0aa10a14488b370b7d53743a17699</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathPlanner</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a23f89105a10a7d9f158c775ee4ffacd5</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathPlanner</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ac4fec20ca2705d619abde2cce20b32b0</anchor>
      <arglist>(const Problem &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ac77b5d64432f2dcf5f09ea7e550c278e</anchor>
      <arglist>(const PathPlannerWkPtr_t &amp;weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::PathProjector</name>
    <filename>a00061.html</filename>
    <member kind="typedef">
      <type>hpp::core::Path</type>
      <name>Path</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a4864c23a5b2f1a15f310eff37397616d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::core::PathPtr_t</type>
      <name>PathPtr_t</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a8b6760eee83a8cc63fa9ac179792729b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::core::PathVector</type>
      <name>PathVector</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a34693f323fadda64b138315a4875dbaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::core::PathVectorPtr_t</type>
      <name>PathVectorPtr_t</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ae01104d166bbaf6421f78aafd6259c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PathProjector</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a448f1f6886cb7eeb653f3d2851c394f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a29266645c7b310610120b738aa2d1c09</anchor>
      <arglist>(const PathPtr_t &amp;path, PathPtr_t &amp;projection) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathProjector</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a1b02ea82552838a5ead31104ad09f88c</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const SteeringMethodPtr_t &amp;steeringMethod, bool keepSteeringMethodConstraints=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>impl_apply</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a3a751999cec051ef577b2af6f7a8d7a2</anchor>
      <arglist>(const PathPtr_t &amp;path, PathPtr_t &amp;projection) const  =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>value_type</type>
      <name>d</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a727e64726a50146a3faba8d9029efb7a</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PathPtr_t</type>
      <name>steer</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a77be67d453c3d17fcf568d67692a1054</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::PathValidation</name>
    <filename>a00062.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>validate</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a3118cbc5c819da8606525cb6d891b584</anchor>
      <arglist>(const PathPtr_t &amp;path, bool reverse, PathPtr_t &amp;validPart, PathValidationReportPtr_t &amp;report)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a286f8655f22cf90542c9f809bd68b9c8</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>af85fdbcd96112a47881c4f712e157942</anchor>
      <arglist>(const JointPtr_t &amp;, const CollisionObjectPtr_t &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a9f3bfacdbde336da64fabb483884353a</anchor>
      <arglist>(const RelativeMotion::matrix_type &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathValidation</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>afade6a235342145afc83a3aaf3a9700c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::PathValidationReport</name>
    <filename>a00063.html</filename>
    <base>hpp::core::ValidationReport</base>
    <member kind="function">
      <type></type>
      <name>PathValidationReport</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a3a9ebc2ed615299bee4a18c3c11e16bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathValidationReport</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a31d669bb881a4ecda6b539c00241bebc</anchor>
      <arglist>(const value_type &amp;param, const ValidationReportPtr_t &amp;report)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a012320238f1660e80b515310f729c1f0</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>parameter</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a8957141b5259236d39addd2aab335dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValidationReportPtr_t</type>
      <name>configurationReport</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ad31d2396992f77eef9ff4b2064dc6658</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::PathVector</name>
    <filename>a00064.html</filename>
    <base>hpp::core::Path</base>
    <member kind="typedef">
      <type>Path</type>
      <name>parent_t</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a9d0963990b44621452fd480a0a9d9eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numberPaths</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a434f94aba30ecee8a4c5aa6fd46d02eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PathPtr_t</type>
      <name>pathAtRank</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a27100e71bf8826dc0183943ba5d16b4e</anchor>
      <arglist>(std::size_t rank) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>rankAtParam</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a6f3b78390c6f96c0b023fc7e32cfa34a</anchor>
      <arglist>(const value_type &amp;param, value_type &amp;localParam) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendPath</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ab825e8cf2a2f07bb2626ce177ff5b463</anchor>
      <arglist>(const PathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>concatenate</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a400e2724413b28a990f3c11892507dce</anchor>
      <arglist>(const PathVector &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>extract</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>af1841684c9ccbe67fc12c8bf10beb53b</anchor>
      <arglist>(const interval_t &amp;subInterval) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Configuration_t</type>
      <name>initial</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a44b17db99a70e273be3beb39da0c5530</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Configuration_t</type>
      <name>end</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a14c21734af4a8184e0c88bebef3a55f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flatten</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>abbe749b63ba2e320bc9a67f52532a9e6</anchor>
      <arglist>(PathVectorPtr_t flattenedPath) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a3ed5f2ad6048195722b60d42232efe75</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathVector</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a88edeb2655919b239a436771786fb6d4</anchor>
      <arglist>(std::size_t outputSize, std::size_t outputDerivativeSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathVector</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>acba690f46e308a067645b4ef875512d9</anchor>
      <arglist>(const PathVector &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathVector</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a35b9c0797fcb947c56195d26f74acd5b</anchor>
      <arglist>(const PathVector &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a8e0c0fc8430743380e0889d6032ed27f</anchor>
      <arglist>(PathVectorPtr_t self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a5f95d1d5a1dbd4c4d49106d5ca7ef472</anchor>
      <arglist>(ConfigurationOut_t result, value_type t) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PathVectorPtr_t</type>
      <name>create</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aee21d3c1ad1ec521d07eaa716072f036</anchor>
      <arglist>(size_type outputSize, size_type outputDerivativeSize)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PathVectorPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a53d43b22de1075eff2135aef3b18937d</anchor>
      <arglist>(const PathVector &amp;original)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PathVectorPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a20edc2e7cc680be1e8d089bbd0038e71</anchor>
      <arglist>(const PathVector &amp;original, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ad72d108ccf5d3b36a36bde8fcaa4b79a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ae8014bb98cb6ad3dcf0eed14d2b4c461</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PathVector</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ae593580985345d9180e4807b1f404357</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::continuousCollisionChecking::progressive::PathVelocity</name>
    <filename>a00065.html</filename>
    <member kind="typedef">
      <type>std::map&lt; value_type, value_type &gt;</type>
      <name>Velocities_t</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a4bce98d244408e46997b86637a03dcd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathVelocity</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ae6507a34de25bc2ba62d7bd3f3d2f385</anchor>
      <arglist>(CoefficientVelocities_t const *coefs, PathPtr_t path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PathVelocity</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ad983e708a653112224fd84f20ec2b71d</anchor>
      <arglist>(CoefficientVelocities_t const *coefs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a8b354bd808466f9a20274d6df4e83667</anchor>
      <arglist>(StraightPathPtr_t path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ac38896655ba8a83870b74e2f47594936</anchor>
      <arglist>(InterpolatedPathPtr_t path)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>maximalVelocity</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a9ad93b0e7ee8543a26b73d46ceb54903</anchor>
      <arglist>(const value_type &amp;t) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>computeMaximalVelocity</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ad4265420a1bea12be7c16c89d0dc919a</anchor>
      <arglist>(const value_type &amp;t0, ConfigurationIn_t q0, const value_type &amp;t1, ConfigurationIn_t q1)</arglist>
    </member>
    <member kind="variable">
      <type>Velocities_t</type>
      <name>maximalVelocities_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>abac6d188da1b493c8308c7053ccac15e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>value_type</type>
      <name>maximalVelocity_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a227474d13c7686a4ac89967c83bb3ea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CoefficientVelocities_t const *</type>
      <name>coefs_</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a29f524391b463de8ed967698188fe5e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::PlanAndOptimize</name>
    <filename>a00066.html</filename>
    <base>hpp::core::PathPlanner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startSolve</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a95bcf6b0e30a9df28a7a4c668140ff67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oneStep</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a393a3a5fa8052a12b04b48a50426f336</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>finishSolve</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>aa1f5576ab4f1a3cfe1cbfd1d8b783c83</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPathOptimizer</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ad229a2d13c14112cd2c5aa04a050b1b8</anchor>
      <arglist>(const PathOptimizerPtr_t &amp;optimizer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PlanAndOptimizePtr_t</type>
      <name>create</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a4653211dc2dd9d209e86559a4cbfd4f2</anchor>
      <arglist>(const PathPlannerPtr_t &amp;pathPlanner)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlanAndOptimize</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ad31070fab8f26d24965ec9bfb279d301</anchor>
      <arglist>(const PathPlannerPtr_t &amp;pathPlanner)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Problem</name>
    <filename>a00067.html</filename>
    <base>Containers&lt; boost::mpl::vector&lt; boost::any &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>Problem</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ab341b06760c84f5ac13f06cbcb9e3175</anchor>
      <arglist>(DevicePtr_t robot)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Problem</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad71c5c3d40a310fc05a8b8f902aef662</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>checkProblem</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a8278ea41c7f852ff1039bf833cacb3bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getParameter</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>afa96a122f9ff93627d29dd362c050a1c</anchor>
      <arglist>(const std::string &amp;name, const T &amp;defaultValue) const </arglist>
    </member>
    <member kind="function">
      <type>const DevicePtr_t &amp;</type>
      <name>robot</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a429115157c3b547de8c2bbe2b3309e5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robot</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3916aeb7af73ab26f5df3621a8da964e</anchor>
      <arglist>(const DevicePtr_t &amp;device)</arglist>
    </member>
    <member kind="function">
      <type>const ConfigurationPtr_t &amp;</type>
      <name>initConfig</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af4b33ede4c2988ea0864b131dc51117b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initConfig</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aacac640a0598d327b2b9d9792ca6d287</anchor>
      <arglist>(const ConfigurationPtr_t &amp;inConfig)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a1021a256cdab219b77219dfe1ff239c7</anchor>
      <arglist>(const ProblemTargetPtr_t &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const ProblemTargetPtr_t &amp;</type>
      <name>target</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a0b328967ea4d46b9e33b42297ddf5e10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Configurations_t &amp;</type>
      <name>goalConfigs</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ab4ca6ffb30e66d23c102d76f8e5e5ced</anchor>
      <arglist>() const HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalConfig</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a96b0712ab6b3994f1312c76cf906c095</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config) HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetGoalConfigs</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aad8d5061840fc2fbd749391a3a4b1f37</anchor>
      <arglist>() HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>steeringMethod</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a53758cec7eaddc48d821526f1665d4bd</anchor>
      <arglist>(const SteeringMethodPtr_t &amp;sm)</arglist>
    </member>
    <member kind="function">
      <type>SteeringMethodPtr_t</type>
      <name>steeringMethod</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3bf4fa157afe6fdf545cea5f178e2aef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a67e9731f7ccf2ac0ea7eb16156c45245</anchor>
      <arglist>(const DistancePtr_t &amp;distance)</arglist>
    </member>
    <member kind="function">
      <type>const DistancePtr_t &amp;</type>
      <name>distance</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a93c6675723890982979fe7064b9ecba8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configValidation</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a0e88eb870d1211782c02a039e846a895</anchor>
      <arglist>(const ConfigValidationsPtr_t &amp;configValidations)</arglist>
    </member>
    <member kind="function">
      <type>const ConfigValidationsPtr_t &amp;</type>
      <name>configValidations</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae0866d20650baaa2922804ad276d0808</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pathValidation</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a69ebdbd75d46d9c6e364da410f4d677b</anchor>
      <arglist>(const PathValidationPtr_t &amp;pathValidation)</arglist>
    </member>
    <member kind="function">
      <type>PathValidationPtr_t</type>
      <name>pathValidation</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad31a632de24bec9bcc56fca6e3597e46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configurationShooter</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a6e92df7128471fdd3787abeb1cc77857</anchor>
      <arglist>(const ConfigurationShooterPtr_t &amp;configurationShooter)</arglist>
    </member>
    <member kind="function">
      <type>ConfigurationShooterPtr_t</type>
      <name>configurationShooter</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae018a7e15c6cafa840cbc0ab068580bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pathProjector</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a415047384c5f2dc7da4a89be6f309a34</anchor>
      <arglist>(const PathProjectorPtr_t &amp;pathProjector)</arglist>
    </member>
    <member kind="function">
      <type>PathProjectorPtr_t</type>
      <name>pathProjector</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aa9f4fb784216b41587fad4fe545d9f35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constraints</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a95c6a22d3833fdee9ed376cf69b36bfd</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintSetPtr_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a2a9caec6d6a4d4026169e3853b7bb831</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObstacle</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>adb930803f20e64defd87bea28ea3e6b0</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3eb8889ec260d11f4af8632b33e3e277</anchor>
      <arglist>(const JointPtr_t &amp;joint, const CollisionObjectPtr_t &amp;obstacle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a69d9daa9dafadddc4ebda9744608f0c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectVector_t &amp;</type>
      <name>collisionObstacles</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad708473c643d5a06d149d30e7954c81b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collisionObstacles</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a38a0f3f563eaa1ebf8bdc7637588c01a</anchor>
      <arglist>(const ObjectVector_t &amp;collisionObstacles)</arglist>
    </member>
    <member kind="function">
      <type>const DevicePtr_t &amp;</type>
      <name>robot</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a429115157c3b547de8c2bbe2b3309e5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>robot</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3916aeb7af73ab26f5df3621a8da964e</anchor>
      <arglist>(const DevicePtr_t &amp;device)</arglist>
    </member>
    <member kind="function">
      <type>const ConfigurationPtr_t &amp;</type>
      <name>initConfig</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af4b33ede4c2988ea0864b131dc51117b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initConfig</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aacac640a0598d327b2b9d9792ca6d287</anchor>
      <arglist>(const ConfigurationPtr_t &amp;inConfig)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>target</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a1021a256cdab219b77219dfe1ff239c7</anchor>
      <arglist>(const ProblemTargetPtr_t &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const ProblemTargetPtr_t &amp;</type>
      <name>target</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a0b328967ea4d46b9e33b42297ddf5e10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Configurations_t &amp;</type>
      <name>goalConfigs</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ab4ca6ffb30e66d23c102d76f8e5e5ced</anchor>
      <arglist>() const HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalConfig</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a96b0712ab6b3994f1312c76cf906c095</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config) HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetGoalConfigs</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aad8d5061840fc2fbd749391a3a4b1f37</anchor>
      <arglist>() HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>steeringMethod</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a53758cec7eaddc48d821526f1665d4bd</anchor>
      <arglist>(const SteeringMethodPtr_t &amp;sm)</arglist>
    </member>
    <member kind="function">
      <type>SteeringMethodPtr_t</type>
      <name>steeringMethod</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3bf4fa157afe6fdf545cea5f178e2aef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a67e9731f7ccf2ac0ea7eb16156c45245</anchor>
      <arglist>(const DistancePtr_t &amp;distance)</arglist>
    </member>
    <member kind="function">
      <type>const DistancePtr_t &amp;</type>
      <name>distance</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a93c6675723890982979fe7064b9ecba8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configValidation</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a0e88eb870d1211782c02a039e846a895</anchor>
      <arglist>(const ConfigValidationsPtr_t &amp;configValidations)</arglist>
    </member>
    <member kind="function">
      <type>const ConfigValidationsPtr_t &amp;</type>
      <name>configValidations</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae0866d20650baaa2922804ad276d0808</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pathValidation</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a69ebdbd75d46d9c6e364da410f4d677b</anchor>
      <arglist>(const PathValidationPtr_t &amp;pathValidation)</arglist>
    </member>
    <member kind="function">
      <type>PathValidationPtr_t</type>
      <name>pathValidation</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad31a632de24bec9bcc56fca6e3597e46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configurationShooter</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a6e92df7128471fdd3787abeb1cc77857</anchor>
      <arglist>(const ConfigurationShooterPtr_t &amp;configurationShooter)</arglist>
    </member>
    <member kind="function">
      <type>ConfigurationShooterPtr_t</type>
      <name>configurationShooter</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae018a7e15c6cafa840cbc0ab068580bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pathProjector</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a415047384c5f2dc7da4a89be6f309a34</anchor>
      <arglist>(const PathProjectorPtr_t &amp;pathProjector)</arglist>
    </member>
    <member kind="function">
      <type>PathProjectorPtr_t</type>
      <name>pathProjector</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aa9f4fb784216b41587fad4fe545d9f35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constraints</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a95c6a22d3833fdee9ed376cf69b36bfd</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintSetPtr_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a2a9caec6d6a4d4026169e3853b7bb831</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObstacle</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>adb930803f20e64defd87bea28ea3e6b0</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3eb8889ec260d11f4af8632b33e3e277</anchor>
      <arglist>(const JointPtr_t &amp;joint, const CollisionObjectPtr_t &amp;obstacle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a69d9daa9dafadddc4ebda9744608f0c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectVector_t &amp;</type>
      <name>collisionObstacles</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ad708473c643d5a06d149d30e7954c81b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collisionObstacles</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a38a0f3f563eaa1ebf8bdc7637588c01a</anchor>
      <arglist>(const ObjectVector_t &amp;collisionObstacles)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ProblemSolver</name>
    <filename>a00068.html</filename>
    <base>Containers&lt; boost::mpl::vector&lt; PathPlannerBuilder_t, PathOptimizerBuilder_t, PathValidationBuilder_t, PathProjectorBuilder_t, ConfigurationShooterBuilder_t, NumericalConstraintPtr_t, SteeringMethodBuilder_t &gt; &gt;</base>
    <member kind="typedef">
      <type>std::vector&lt; PathOptimizerPtr_t &gt;</type>
      <name>PathOptimizers_t</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a152926794b023d2e87dfcdb1cedfdf87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>PathOptimizerTypes_t</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a4ce273f79f7730a33f43c4664aa35c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProblemSolver</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a43d395964a3f4bf47f83c7d920f97493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>robot</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a7c240451620baa487192f393b41c0a11</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function">
      <type>const DevicePtr_t &amp;</type>
      <name>robot</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a75b4246cb247a7724a84a8a1897b13bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ProblemPtr_t</type>
      <name>problem</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>adc49ca8ec37f61fdf3fbbcc1e3d19317</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConfigurationPtr_t &amp;</type>
      <name>initConfig</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a2dce4e7ce0e16e569d5ed6bb2bd296ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initConfig</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a6234dbdfe05076f24d55583d601b4169</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>const Configurations_t &amp;</type>
      <name>goalConfigs</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a439a79a0dc0397000036ca99a444b26d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addGoalConfig</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a0cb9dd5079e40cec3e99a9c596486ed8</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetGoalConfigs</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a0f498f74c397df2372aba13f55c5db78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalConstraint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a05d200c0ae600410296a21801f8e73fe</anchor>
      <arglist>(const ConstraintPtr_t &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalConstraint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>abfb7544b4da039442a29fd8109d46255</anchor>
      <arglist>(const LockedJointPtr_t &amp;lj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalConstraint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a80fd3a1ae5e67cf61f5fec6d1b8d3c8c</anchor>
      <arglist>(const std::string &amp;constraintName, const std::string &amp;functionName, const std::size_t priority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetGoalConstraint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a7168323dddb1473ed3c077b00673c9c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pathPlannerType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a2670564eda72537b63d1e25befc6b40f</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>steeringMethodType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aa1e57f27050c974f959144113d565d4c</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSteeringMethodType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ab738733f1474aa32e315dc855d5f3367</anchor>
      <arglist>(const std::string &amp;type, const SteeringMethodBuilder_t &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configurationShooterType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a93e067ea72670804030a4ce1e2923bc3</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConfigurationShooterType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a15dab8633df6594ff59493261b15ae9a</anchor>
      <arglist>(const std::string &amp;type, const ConfigurationShooterBuilder_t &amp;builder) HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPathPlannerType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aaee70a5a958cb7d1b23964834812a111</anchor>
      <arglist>(const std::string &amp;type, const PathPlannerBuilder_t &amp;builder) HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>const PathPlannerPtr_t &amp;</type>
      <name>pathPlanner</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a79ae7d4567393fd3bbf5d2d00946ca71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPathOptimizer</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a1064edadef70ef58ec610d6fd2a8b256</anchor>
      <arglist>(const std::string &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPathOptimizers</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a0c3a5d1d30d367e1cd76e03ed29beda3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PathOptimizerPtr_t &amp;</type>
      <name>pathOptimizer</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a2fe532373d694f024f34cf4bb21e390f</anchor>
      <arglist>(std::size_t rank) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPathOptimizerType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a3660aea86738654365f29bb6e8b4b13c</anchor>
      <arglist>(const std::string &amp;type, const PathOptimizerBuilder_t &amp;builder) HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>optimizePath</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a8c2abb7730c93addc98bf50abe6aa1e8</anchor>
      <arglist>(PathVectorPtr_t path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pathValidationType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aea2e100dfefb1d966bc6b786f1650da9</anchor>
      <arglist>(const std::string &amp;type, const value_type &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPathValidationType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a51f8c2fe11db0e6ef20c55e181ae0012</anchor>
      <arglist>(const std::string &amp;type, const PathValidationBuilder_t &amp;builder) HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pathProjectorType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>afb7f1d80fd9b33bc1cbc4b42b4ffcb2a</anchor>
      <arglist>(const std::string &amp;type, const value_type &amp;step)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPathProjectorType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a3e47624942fe2b1bda099b4efd7d5922</anchor>
      <arglist>(const std::string &amp;type, const PathProjectorBuilder_t &amp;builder) HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>const RoadmapPtr_t &amp;</type>
      <name>roadmap</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>acd613c2561075278989e6ec4dc149a24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetProblem</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ace4479b208b07e11c4aefcf473f87b53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetRoadmap</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a4cbb35a72bae1c28cfcafdff15165719</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectVector_t &amp;</type>
      <name>collisionObstacles</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ac3c96cb5d674773395a47dea20b0fa8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ObjectVector_t &amp;</type>
      <name>distanceObstacles</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a08bf4a1b83ebfe8794a24abe6716a0e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>roadmap</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ae2c9985efd7b2aa6d0899c2c4c461c96</anchor>
      <arglist>(const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a89f392be4832bd0be4ab9b8753827f1e</anchor>
      <arglist>(const ConstraintPtr_t &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLockedJoint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a390b9658726c15346bd8aedb6b07a6a9</anchor>
      <arglist>(const LockedJointPtr_t &amp;lockedJoint)</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintSetPtr_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a169e1087a2bfe99cd5334593692aaad4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetConstraints</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a89aad97cd950808c8e7a83bdd3a34802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCenterOfMassComputation</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a726f714fea9c10a158dd71afd9e11b66</anchor>
      <arglist>(const std::string &amp;name, CenterOfMassComputationPtr_t comc)</arglist>
    </member>
    <member kind="function">
      <type>CenterOfMassComputationPtr_t</type>
      <name>centerOfMassComputation</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a1c95aa44006fb2f684257e209d0eb73a</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFunctionToConfigProjector</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a65d1524e5de82b2ccb1059eb67c4bbe9</anchor>
      <arglist>(const std::string &amp;constraintName, const std::string &amp;functionName, const std::size_t priority=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNumericalConstraint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a5efcfb1d8d8a7669108004e1229a4e42</anchor>
      <arglist>(const std::string &amp;name, const DifferentiableFunctionPtr_t &amp;function) HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNumericalConstraint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a14b8c5647a6eb4af3b0a858497a2bdd5</anchor>
      <arglist>(const std::string &amp;name, const NumericalConstraintPtr_t &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPassiveDofs</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>adf0650340121608f3a04cc1704e0f03c</anchor>
      <arglist>(const std::string &amp;name, const SizeIntervals_t &amp;passiveDofs)</arglist>
    </member>
    <member kind="function">
      <type>SizeIntervals_t</type>
      <name>passiveDofs</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a387c231cbb33487c99c0e9fd81d148e1</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comparisonType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a5bec3c17156f5e23365e3a939890801b</anchor>
      <arglist>(const std::string &amp;name, const ComparisonType::VectorOfTypes types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comparisonType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a579146d080ea7d321f846c9f377c1ecf</anchor>
      <arglist>(const std::string &amp;name, const ComparisonTypePtr_t eq)</arglist>
    </member>
    <member kind="function">
      <type>ComparisonTypePtr_t</type>
      <name>comparisonType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a017aba9db9a5d207f9185cec1f4558a1</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>NumericalConstraintPtr_t</type>
      <name>numericalConstraint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>acd0edc31c0df36b972cace8549b8e7e0</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValueAndJacobian</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a485599d11f4217c9be0caa4cd7010aae</anchor>
      <arglist>(const Configuration_t &amp;configuration, vector_t &amp;value, matrix_t &amp;jacobian) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxIterations</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>adcfe9a67e8335770e69cf325c2d6351a</anchor>
      <arglist>(size_type iterations)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>maxIterations</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>af84b36449791d1a81158c2ae5b384244</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorThreshold</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aff71efe2513e37b089069cd844ea4b68</anchor>
      <arglist>(const value_type &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>errorThreshold</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a554dc17275167d15471e41287e661495</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPathOptimizers</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ae648412ffe3cbfc3cd64c943f66a5d46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>prepareSolveStepByStep</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a7d490c1c60656ee8916c2ee0ad0b15a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>executeOneStep</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a15412de571b230af4053cdca8c2c1d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishSolveStepByStep</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a912885a20c52361147e5f64409edf1d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ad4a4f560c0eabc555a539dcd7fde842f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>directPath</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a58264343bd693ca5a17d39e56d04f34e</anchor>
      <arglist>(ConfigurationIn_t start, ConfigurationIn_t end, std::size_t &amp;pathId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addConfigToRoadmap</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a2f9d56f311de8bccd2c956e814cb8359</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addEdgeToRoadmap</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a14dd7742eb2f2ca9fe7f55f6a7618fe9</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config1, const ConfigurationPtr_t &amp;config2, const PathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interrupt</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a2fc7880658292548d4de2a16cf22f194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>addPath</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>af2410523b32f2a7a22da2a0a866a1b01</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>const PathVectors_t &amp;</type>
      <name>paths</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a79c18a5880f146b8ee75e4a6f8c761a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a2b1348795967eaa958208eaaf547fccf</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;inObject, bool collision, bool distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a7496bda451b4111352186429f605d9c9</anchor>
      <arglist>(const std::string &amp;jointName, const std::string &amp;obstacleName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a05d47239be974929f6c15ea51f27a575</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CollisionObjectPtr_t &amp;</type>
      <name>obstacle</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ad417514d13ad709959dc6b383ebe84b5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>obstacleNames</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>adf9a0a77267e6ecade488d99a361d0b0</anchor>
      <arglist>(bool collision, bool distance) const </arglist>
    </member>
    <member kind="function">
      <type>const DistanceBetweenObjectsPtr_t &amp;</type>
      <name>distanceBetweenObjects</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ab46990b29a53cc0e4966354008386e8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProblemSolverPtr_t</type>
      <name>create</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a42bb1c99581e2a51e2d46d1c958ef71c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProblemSolverPtr_t</type>
      <name>latest</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ab083da15005e48caa971015a13d89755</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ProblemSolver</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ab4c28cce9d2831787ab0531af47f37e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>problem</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a1e4a6dadc812f2c1eb946f5360a3adf9</anchor>
      <arglist>(ProblemPtr_t problem)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initializeProblem</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aef63008c501bd6f876ee53b2be05a1bc</anchor>
      <arglist>(ProblemPtr_t problem)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstraintSetPtr_t</type>
      <name>constraints_</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a36c42b98d9a98b5152976d8aed046f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DevicePtr_t</type>
      <name>robot_</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a7348f05edce62be1a45b5528fa6d6a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProblemPtr_t</type>
      <name>problem_</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aa9b6082a6107c32a64e37867e96ab9cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathPlannerPtr_t</type>
      <name>pathPlanner_</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a72dc95d531badf18038d204c5b760df7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RoadmapPtr_t</type>
      <name>roadmap_</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>abc01bbf8f62e460ae39ba8ede1349089</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PathVectors_t</type>
      <name>paths_</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>afae26e4f2c0a6cc12888d968413a5e7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>pathProjectorType_</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aeda3fc9bdba8c0b214abbd82d238d1bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>value_type</type>
      <name>pathProjectorTolerance_</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>abb0cc99fed3ace86704b335a092f7fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>pathPlannerType_</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>abe001abbc9d539b9105d083ac66b3601</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConstraint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a89f392be4832bd0be4ab9b8753827f1e</anchor>
      <arglist>(const ConstraintPtr_t &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLockedJoint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a390b9658726c15346bd8aedb6b07a6a9</anchor>
      <arglist>(const LockedJointPtr_t &amp;lockedJoint)</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintSetPtr_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a169e1087a2bfe99cd5334593692aaad4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetConstraints</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a89aad97cd950808c8e7a83bdd3a34802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCenterOfMassComputation</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a726f714fea9c10a158dd71afd9e11b66</anchor>
      <arglist>(const std::string &amp;name, CenterOfMassComputationPtr_t comc)</arglist>
    </member>
    <member kind="function">
      <type>CenterOfMassComputationPtr_t</type>
      <name>centerOfMassComputation</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a1c95aa44006fb2f684257e209d0eb73a</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFunctionToConfigProjector</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a65d1524e5de82b2ccb1059eb67c4bbe9</anchor>
      <arglist>(const std::string &amp;constraintName, const std::string &amp;functionName, const std::size_t priority=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNumericalConstraint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a5efcfb1d8d8a7669108004e1229a4e42</anchor>
      <arglist>(const std::string &amp;name, const DifferentiableFunctionPtr_t &amp;function) HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNumericalConstraint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a14b8c5647a6eb4af3b0a858497a2bdd5</anchor>
      <arglist>(const std::string &amp;name, const NumericalConstraintPtr_t &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPassiveDofs</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>adf0650340121608f3a04cc1704e0f03c</anchor>
      <arglist>(const std::string &amp;name, const SizeIntervals_t &amp;passiveDofs)</arglist>
    </member>
    <member kind="function">
      <type>SizeIntervals_t</type>
      <name>passiveDofs</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a387c231cbb33487c99c0e9fd81d148e1</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comparisonType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a5bec3c17156f5e23365e3a939890801b</anchor>
      <arglist>(const std::string &amp;name, const ComparisonType::VectorOfTypes types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>comparisonType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a579146d080ea7d321f846c9f377c1ecf</anchor>
      <arglist>(const std::string &amp;name, const ComparisonTypePtr_t eq)</arglist>
    </member>
    <member kind="function">
      <type>ComparisonTypePtr_t</type>
      <name>comparisonType</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a017aba9db9a5d207f9185cec1f4558a1</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>NumericalConstraintPtr_t</type>
      <name>numericalConstraint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>acd0edc31c0df36b972cace8549b8e7e0</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeValueAndJacobian</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a485599d11f4217c9be0caa4cd7010aae</anchor>
      <arglist>(const Configuration_t &amp;configuration, vector_t &amp;value, matrix_t &amp;jacobian) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxIterations</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>adcfe9a67e8335770e69cf325c2d6351a</anchor>
      <arglist>(size_type iterations)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>maxIterations</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>af84b36449791d1a81158c2ae5b384244</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>errorThreshold</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>aff71efe2513e37b089069cd844ea4b68</anchor>
      <arglist>(const value_type &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>errorThreshold</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a554dc17275167d15471e41287e661495</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPathOptimizers</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ae648412ffe3cbfc3cd64c943f66a5d46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>prepareSolveStepByStep</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a7d490c1c60656ee8916c2ee0ad0b15a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>executeOneStep</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a15412de571b230af4053cdca8c2c1d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishSolveStepByStep</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a912885a20c52361147e5f64409edf1d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ad4a4f560c0eabc555a539dcd7fde842f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>directPath</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a58264343bd693ca5a17d39e56d04f34e</anchor>
      <arglist>(ConfigurationIn_t start, ConfigurationIn_t end, std::size_t &amp;pathId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addConfigToRoadmap</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a2f9d56f311de8bccd2c956e814cb8359</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addEdgeToRoadmap</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a14dd7742eb2f2ca9fe7f55f6a7618fe9</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config1, const ConfigurationPtr_t &amp;config2, const PathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interrupt</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a2fc7880658292548d4de2a16cf22f194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>addPath</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>af2410523b32f2a7a22da2a0a866a1b01</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>const PathVectors_t &amp;</type>
      <name>paths</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a79c18a5880f146b8ee75e4a6f8c761a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a2b1348795967eaa958208eaaf547fccf</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;inObject, bool collision, bool distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a7496bda451b4111352186429f605d9c9</anchor>
      <arglist>(const std::string &amp;jointName, const std::string &amp;obstacleName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>filterCollisionPairs</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a05d47239be974929f6c15ea51f27a575</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CollisionObjectPtr_t &amp;</type>
      <name>obstacle</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ad417514d13ad709959dc6b383ebe84b5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; std::string &gt;</type>
      <name>obstacleNames</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>adf9a0a77267e6ecade488d99a361d0b0</anchor>
      <arglist>(bool collision, bool distance) const </arglist>
    </member>
    <member kind="function">
      <type>const DistanceBetweenObjectsPtr_t &amp;</type>
      <name>distanceBetweenObjects</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ab46990b29a53cc0e4966354008386e8b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ProblemTarget</name>
    <filename>a00069.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>check</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ae90dedc1bb22dd43d385f49f7379af0e</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initRoadmap</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a788536bfbc344a16fee96759cdc30fe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oneStep</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a6f68be30ae2d1a05aa253098c6f05587</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addGoalConfig</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a81b633679533bd1487836ee2fb30a13e</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)=0</arglist>
    </member>
    <member kind="function">
      <type>const Configurations_t &amp;</type>
      <name>goalConfigurations</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a51c06889bae180f1eb2ac39f062cc16b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetGoalConfigs</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a62e29ee1e90c741cbd0c2e66fa34f8fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ProblemTarget</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a0ced89342a265964cf8d7cc2835fc3e5</anchor>
      <arglist>(const PathPlannerPtr_t &amp;planner)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a804b6dac0857667753c794186adba4df</anchor>
      <arglist>(const ProblemTargetWkPtr_t &amp;weak)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const PathPlannerPtr_t &amp;</type>
      <name>planner_</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a4c79d1dad80c241a940bd6271f5f464b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProblemTargetWkPtr_t</type>
      <name>weakPtr_</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>aceaf55f52cb9cf50770214347b275d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Configurations_t</type>
      <name>goals_</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a793f39bdac5c5645c2c04eaf506a543c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::continuousCollisionChecking::Progressive</name>
    <filename>a00070.html</filename>
    <base>hpp::core::PathValidation</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>validate</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>gacc8cd446e153246cd2f580669a55c187</anchor>
      <arglist>(const PathPtr_t &amp;path, bool reverse, PathPtr_t &amp;validPart, PathValidationReportPtr_t &amp;report)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga08fb4e3e14f7eb0a6ab7c28a13301a2f</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga2259f70cbab37f5ad60fa1d754491d00</anchor>
      <arglist>(const JointPtr_t &amp;joint, const CollisionObjectPtr_t &amp;obstacle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Progressive</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga6c21c71dc868957051aec0a80366abf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProgressivePtr_t</type>
      <name>create</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>gac8cc1d70e0e5e5627492dd982384cbfb</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;tolerance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Progressive</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga79163ff13a693103d910897e9cc55e57</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;tolerance)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::pathProjector::Progressive</name>
    <filename>a00071.html</filename>
    <base>hpp::core::PathProjector</base>
    <member kind="typedef">
      <type>hpp::core::StraightPath</type>
      <name>StraightPath</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>abccf0fbc1b65dc8a885d492cdaf52123</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::core::StraightPathPtr_t</type>
      <name>StraightPathPtr_t</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ae02a9b113e55b3f4edf879eadb97aa7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProgressivePtr_t</type>
      <name>create</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a8c6b357ff36d873d3cc6bfa6da98549c</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const SteeringMethodPtr_t &amp;steeringMethod, value_type step)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>impl_apply</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>adebfd860c5ea7740896c7ca961302f0d</anchor>
      <arglist>(const PathPtr_t &amp;path, PathPtr_t &amp;projection) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Progressive</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a0a0472fa4359604cf3e3addcfeaa9d10</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const SteeringMethodPtr_t &amp;steeringMethod, value_type step)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>applyToStraightPath</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>aa58698e46829b61e700dc7936985824f</anchor>
      <arglist>(const StraightPathPtr_t &amp;path, PathPtr_t &amp;projection) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::projection_error</name>
    <filename>a00072.html</filename>
    <member kind="function">
      <type></type>
      <name>projection_error</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a33c815ae058fc1dabc70041d5d4fa6cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>projection_error</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a5fc29c260e12cc4bb9944e688d445b8f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>projection_error</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ae1833d5e485dcf658c66f4b667f84ce0</anchor>
      <arglist>(const projection_error &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~projection_error</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a88b1330deccbaff263e1318e42c4937e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a2ec632e18c1b14ff33e9dd2f8562edf9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>msg_</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ab788e12b40e905ed11862f1562f805e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::RandomShortcut</name>
    <filename>a00073.html</filename>
    <base>hpp::core::PathOptimizer</base>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>optimize</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a294e21647c1dd082757c29e7d90aad73</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RandomShortcutPtr_t</type>
      <name>create</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a8098b806beed1e320cce77b73e7f2c3c</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RandomShortcut</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a20bb497ee26455ae5d40384475918ad0</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::steeringMethod::ReedsShepp</name>
    <filename>a00074.html</filename>
    <base>hpp::core::SteeringMethod</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SteeringMethodPtr_t</type>
      <name>copy</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>aca4c4ea6a5570553fbeb5e1fd26e8d6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>impl_compute</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a468746e1da311165e720c28a834c10f6</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReedsSheppPtr_t</type>
      <name>create</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a75d9fc0dd496f85d8c983bf0436cd1ab</anchor>
      <arglist>(const ProblemPtr_t &amp;problem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReedsSheppPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a3cf463b2fb686f1b81f899ab20cb87fa</anchor>
      <arglist>(const ReedsSheppPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReedsShepp</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>af44a251603cb1a7d1c3fbe52157daf66</anchor>
      <arglist>(const ProblemPtr_t &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReedsShepp</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a469ff149f0890fced16fae924af78c0b</anchor>
      <arglist>(const ReedsShepp &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a45e747f332f350f610c9eae31db5da80</anchor>
      <arglist>(ReedsSheppWkPtr_t weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ReedsSheppPath</name>
    <filename>a00075.html</filename>
    <base>hpp::core::Path</base>
    <member kind="typedef">
      <type>core::Path</type>
      <name>parent_t</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a4014bfc3d9cf70904bc9cdafc9d550e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ReedsSheppPath</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>adb73457b0e5f493984ebe240fc8463d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a507fdad901a942239a9e19a1876f4abe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a988b1dc10ef51e27825c18a16477d025</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const </arglist>
    </member>
    <member kind="function">
      <type>DevicePtr_t</type>
      <name>device</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a664ad6dda0c159af48e07806cdcbdd00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>initial</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ae87d319864ebe7fdea61e5163135dcdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>end</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a68715d286b37ec398e63c6ffd72cd4b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSteeringJoint</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a3d1da5797d59ff04f999405b715a7ea9</anchor>
      <arglist>(const JointPtr_t sa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWheelJoints</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a77fe36ab3a52a9c7f1b893b935d2a064</anchor>
      <arglist>(const JointPtr_t left, const JointPtr_t right, const value_type &amp;alphaPrime)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReedsSheppPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a363d2c9e6555c8ae5ff892d8c073ce3f</anchor>
      <arglist>(const model::DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, value_type rho, size_type xyId, size_type rzId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReedsSheppPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a73f8b99c7986abad76f014129dce0f40</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, value_type rho, size_type xyId, size_type rzId, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReedsSheppPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a42ddce969ee1e94a656df89b4e71633f</anchor>
      <arglist>(const ReedsSheppPathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReedsSheppPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>af3d3b2402bffc4ce1babf9bc09bdb2a9</anchor>
      <arglist>(const ReedsSheppPathPtr_t &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a6fbb09bad37759e61e0e686471670562</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReedsSheppPath</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>adcf8391a4ed09a154ef63b1b808d5fac</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type rho, size_type xyId, size_type rzId)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReedsSheppPath</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a91eb525a0007290c944afe456eca0426</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type rho, size_type xyId, size_type rzId, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReedsSheppPath</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ac812b7196afcaf39fd7c7c213ccf8735</anchor>
      <arglist>(const ReedsSheppPath &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReedsSheppPath</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ad5a6cd6ca375e4101e1b0d3dfa9ffd20</anchor>
      <arglist>(const ReedsSheppPath &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a744faa2eae96321bc8472509e362d36b</anchor>
      <arglist>(ReedsSheppPathPtr_t self)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initCopy</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a59a7ecf63f58d677441cb0577a407352</anchor>
      <arglist>(ReedsSheppPathPtr_t self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a2bfb40db72e0fd96fc5fff04dc5c77bf</anchor>
      <arglist>(ConfigurationOut_t result, value_type param) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::RelativeMotion</name>
    <filename>a00076.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>RelativeMotionType</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ada4fe7dad8810c9db46f0b5eefcd6196</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Constrained</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ada4fe7dad8810c9db46f0b5eefcd6196a21e42fac17793b726881b14541808e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Parameterized</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ada4fe7dad8810c9db46f0b5eefcd6196a321e5a0170b51d02940b8d1481d79538</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unconstrained</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ada4fe7dad8810c9db46f0b5eefcd6196a79093f81645055375529f7c66f7995b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; RelativeMotionType, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
      <name>matrix_type</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>aaff17241a9c8eb76eedfb81ae530293e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Constrained</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ada4fe7dad8810c9db46f0b5eefcd6196a21e42fac17793b726881b14541808e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Parameterized</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ada4fe7dad8810c9db46f0b5eefcd6196a321e5a0170b51d02940b8d1481d79538</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unconstrained</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>ada4fe7dad8810c9db46f0b5eefcd6196a79093f81645055375529f7c66f7995b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static matrix_type</type>
      <name>matrix</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a09fe30e8a4ff83fa2d7ab0589bf72841</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>fromConstraint</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a87381d65555c743220fc252ba0f39468</anchor>
      <arglist>(matrix_type &amp;matrix, const DevicePtr_t &amp;robot, const ConstraintSetPtr_t &amp;constraint)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::Roadmap</name>
    <filename>a00077.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aad2f12c329d25db8779fc98df97564bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>addNode</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ad7ca3b977a1371a781de1d6a5db16937</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>nearestNode</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ac7e4144ea2ea6b108526935b1b3ed52e</anchor>
      <arglist>(const ConfigurationPtr_t &amp;configuration, value_type &amp;minDistance)</arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>nearestNode</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a7dd8b3fe906d606b0aa4fe6b71d9a4ab</anchor>
      <arglist>(const ConfigurationPtr_t &amp;configuration, const ConnectedComponentPtr_t &amp;connectedComponent, value_type &amp;minDistance)</arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>addNodeAndEdges</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aad937d559f96901500918364b947a3c6</anchor>
      <arglist>(const NodePtr_t from, const ConfigurationPtr_t &amp;to, const PathPtr_t path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalNode</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>abf0b74091e23d8bde082174c31fdeb92</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetGoalNodes</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a62a7c44ee226bf2af35fe10f234d4e8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initNode</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a4c3ff43684bff9dca71d875587021ccc</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Roadmap</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aedc756b45b8b91f3990987bcf86b0ea2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pathExists</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a63a3d2484a55f750922657c5911693ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Nodes_t &amp;</type>
      <name>nodes</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a7075d2e990840c1ea9c8975c4be7baf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Edges_t &amp;</type>
      <name>edges</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a8faa6be27563e6d95f143075dbcb302e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodePtr_t</type>
      <name>initNode</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a9dd3a1853399c7e9419758baa9d03995</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Nodes_t &amp;</type>
      <name>goalNodes</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a0cd49c96c1173cb17e85db73501556e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ConnectedComponents_t &amp;</type>
      <name>connectedComponents</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a43dffded13728aaee09523e3d665b03f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NearestNeighborPtr_t</type>
      <name>nearestNeighbor</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a9c190d5cde6c4f7fd31c58bcd506ce19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestNeighbor</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aacd12245e4634a408277350d9650bdc6</anchor>
      <arglist>(NearestNeighborPtr_t nearestNeighbor)</arglist>
    </member>
    <member kind="function">
      <type>EdgePtr_t</type>
      <name>addEdge</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a3a3e9b0ffaf0daaab80fdda429ebe105</anchor>
      <arglist>(const NodePtr_t &amp;n1, const NodePtr_t &amp;n2, const PathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a03b28795cb5c0f188cad84b99813b5f9</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function">
      <type>const DistancePtr_t &amp;</type>
      <name>distance</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a654d75604faebf6cc00509528bc35b92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RoadmapPtr_t</type>
      <name>create</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aaf828e935a1bcca9a0debaa1104c6bbf</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Roadmap</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ae59f5938ec5c75e3fdc32d0552527548</anchor>
      <arglist>(const DistancePtr_t &amp;distance, const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addConnectedComponent</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a5de1e70c45562c6d3122968ebc76a29c</anchor>
      <arglist>(const NodePtr_t &amp;node)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>push_node</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a77e9331b299e9782d53094ec633eb2f1</anchor>
      <arglist>(const NodePtr_t &amp;n)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual NodePtr_t</type>
      <name>createNode</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aa22fae8708f87015d564296a6bb1994c</anchor>
      <arglist>(const ConfigurationPtr_t &amp;configuration) const </arglist>
    </member>
    <member kind="function">
      <type>const DistancePtr_t &amp;</type>
      <name>distance</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a654d75604faebf6cc00509528bc35b92</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::parser::RoadmapFactory</name>
    <filename>a00078.html</filename>
    <member kind="typedef">
      <type>::hpp::util::parser::ObjectFactory</type>
      <name>Parent_t</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a8db7bec08c7b885dbf2937bc66fd623c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoadmapFactory</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a246622a6cf2f2a153658db288fe73b87</anchor>
      <arglist>(const ProblemPtr_t &amp;problem, ObjectFactory *parent, const XMLElement *element)</arglist>
    </member>
    <member kind="function">
      <type>RoadmapPtr_t</type>
      <name>roadmap</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>ac53bdb69ee89095782f3c4312edf2a59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>finishAttributes</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a0431b9ab76cb63610105a44d8ce694d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishTags</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a0416163b89a09eb3b8f7d2a0ab845a29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RoadmapFactory</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>ab22a2d1d2d9d21caf8ac7dadfb028b5a</anchor>
      <arglist>(const ProblemPtr_t &amp;problem, const RoadmapPtr_t &amp;roadmap, ObjectFactory *parent=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ObjectFactory *</type>
      <name>create</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a3f3bc2c125e52959bbf9a54aff29489e</anchor>
      <arglist>(const ProblemPtr_t &amp;p, ObjectFactory *parent, const XMLElement *el)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::SteeringMethod</name>
    <filename>a00079.html</filename>
    <member kind="function">
      <type>PathPtr_t</type>
      <name>operator()</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>aa3c93a56061a1eaa74024d3cc3c73f6a</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SteeringMethodPtr_t</type>
      <name>copy</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a437f515b0903d74a2375af0672a72c13</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constraints</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>adc84b1c5d4556d8ab629d1d0e1b179cd</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintSetPtr_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a7d3c1cb0cc81e04631ded7e6a48d235e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringMethod</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a99e441ab23c7a3f9edabbbd200ab0c1e</anchor>
      <arglist>(ProblemPtr_t problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringMethod</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>ade8322c059667799aa9cfab22677f085</anchor>
      <arglist>(const SteeringMethod &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual PathPtr_t</type>
      <name>impl_compute</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>aeb90bc49ee67f0d2170e34a2fb9ac7ad</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const  =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a749f8ef065d2e8e5caf4c23f9a9e686e</anchor>
      <arglist>(SteeringMethodWkPtr_t weak)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProblemPtr_t</type>
      <name>problem_</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a08aa7ca64d38c60efcc0b4c91c3c30ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constraints</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>adc84b1c5d4556d8ab629d1d0e1b179cd</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function">
      <type>const ConstraintSetPtr_t &amp;</type>
      <name>constraints</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a7d3c1cb0cc81e04631ded7e6a48d235e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::SteeringMethodStraight</name>
    <filename>a00080.html</filename>
    <base>hpp::core::SteeringMethod</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SteeringMethodPtr_t</type>
      <name>copy</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a41f1165d13451f5d573b79d2b2005ea7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>impl_compute</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a2e61543b68a4224fa2537050fecbf6b5</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringMethodStraightPtr_t</type>
      <name>create</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a27c4d4cc1ca13c8999420f48d9fae4bc</anchor>
      <arglist>(const ProblemPtr_t &amp;problem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringMethodStraightPtr_t</type>
      <name>create</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>aa56c14bd8d410ce15d66b58ab5ecdcc4</anchor>
      <arglist>(const DevicePtr_t &amp;device, const WeighedDistancePtr_t &amp;distance) HPP_CORE_DEPRECATED</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringMethodStraightPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a37f0f04ea769d3fa06ee370ee0b7a162</anchor>
      <arglist>(const SteeringMethodStraightPtr_t &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringMethodStraight</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a22578ae5b4cbefe1521f6371c60c9ebf</anchor>
      <arglist>(const ProblemPtr_t &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringMethodStraight</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ab1bc5a61a3ea829f59c2d6c5d622b825</anchor>
      <arglist>(const DevicePtr_t &amp;device, const WeighedDistancePtr_t &amp;distance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringMethodStraight</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>ad2ba623f9f7e899152383af31e8c0b88</anchor>
      <arglist>(const SteeringMethodStraight &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>af5ea66907aa38272326b51f1fa24b61d</anchor>
      <arglist>(SteeringMethodStraightWkPtr_t weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::StraightPath</name>
    <filename>a00081.html</filename>
    <base>hpp::core::Path</base>
    <member kind="typedef">
      <type>Path</type>
      <name>parent_t</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a9776905b6ebe55b430db6fae3afdc45a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StraightPath</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a065b789045c5b976bd99709445a2d1d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>aaa4037bf27eb84cbd9a8863f3e311092</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>copy</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a569ce155cc4ff270c8e48b0ede43d723</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;constraints) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathPtr_t</type>
      <name>extract</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a3098dd8d43bc8c407c2ae8aab23d4260</anchor>
      <arglist>(const interval_t &amp;subInterval) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialConfig</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>ad6c73fdd844e4f323b44478d64ff71e8</anchor>
      <arglist>(ConfigurationIn_t initial)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endConfig</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a1df6c200e533e84505c89e03aed7461e</anchor>
      <arglist>(ConfigurationIn_t end)</arglist>
    </member>
    <member kind="function">
      <type>DevicePtr_t</type>
      <name>device</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>ac15ef6b3669525577602e4b42f37faf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>initial</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>adf1c98c798ea629c42a752e3f1be7885</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Configuration_t</type>
      <name>end</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a170a27959c11de721d9dd42052e07114</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StraightPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>aa0b1904c30f6dc560aefd39d98a507f4</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, value_type length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StraightPathPtr_t</type>
      <name>create</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>aaca5d5397be998d13a35c74535c9caac</anchor>
      <arglist>(const DevicePtr_t &amp;device, ConfigurationIn_t init, ConfigurationIn_t end, value_type length, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StraightPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a80f20094469f2f6aa65ab6b219fc4c72</anchor>
      <arglist>(const StraightPathPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StraightPathPtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>aeb4a6cb8c183f4f2941068a1aec41667</anchor>
      <arglist>(const StraightPathPtr_t &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>afc5fe957c71fd29dcb68e74a165a5fc4</anchor>
      <arglist>(std::ostream &amp;os) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StraightPath</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>ad4508463491bb63ce622ee5f593b5feb</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StraightPath</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a4ca48861398d927f5c50bde18925676a</anchor>
      <arglist>(const DevicePtr_t &amp;robot, ConfigurationIn_t init, ConfigurationIn_t end, value_type length, ConstraintSetPtr_t constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StraightPath</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a110ec072d954898dc83e8c9803197ed6</anchor>
      <arglist>(const StraightPath &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StraightPath</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a36c6c4c5b59eea103a0c8d578753afc1</anchor>
      <arglist>(const StraightPath &amp;path, const ConstraintSetPtr_t &amp;constraints)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a31c0ab2fbe891c03beb7a933f13095f6</anchor>
      <arglist>(StraightPathPtr_t self)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initCopy</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>aeb4700100a61019057779d9c5eee1182</anchor>
      <arglist>(StraightPathPtr_t self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>impl_compute</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a3cb8c7016a807c6f80b9fcae12ef2b12</anchor>
      <arglist>(ConfigurationOut_t result, value_type param) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::problemTarget::TaskTarget</name>
    <filename>a00082.html</filename>
    <base>hpp::core::ProblemTarget</base>
    <member kind="function">
      <type>void</type>
      <name>check</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a1f818c765ff19f6956643c992215bd04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initRoadmap</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ab55f7036aaa4f54c6ec1e6783c7b4b0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oneStep</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a9cd501e2928bed975afbbac15aca7c49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constraints</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a5ae14d65c848cefb710e827747f9bead</anchor>
      <arglist>(const ConstraintSetPtr_t &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGoalConfig</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a3090737bf0f2f0c06d9f0bf7dab7ccba</anchor>
      <arglist>(const ConfigurationPtr_t &amp;config)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetGoalConfig</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a53aa58687a03b4df5f543d6cb7f0e0f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TaskTargetPtr_t</type>
      <name>create</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a63131fc3249c9ea2c7c7e0455d671d68</anchor>
      <arglist>(const PathPlannerPtr_t &amp;planner)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TaskTarget</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>aa700a9c2f9ce03e18c990434fa9f4c6a</anchor>
      <arglist>(const PathPlannerPtr_t &amp;planner)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hpp::core::Containers::traits</name>
    <filename>a00083.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>internal::field&lt; Key, Element &gt;</type>
      <name>Container</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad1223c7f6581c99ace48bee8e74ed8ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container::Map_t</type>
      <name>Map_t</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa155eb004fe6c8cb87c6c181b38ca014</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::ValidationReport</name>
    <filename>a00084.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ValidationReport</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a6d1626fbbc17c0067f20f5b52ea0cbef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream &amp;</type>
      <name>print</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>aee196662ffc84a712c81dc0d7af86b91</anchor>
      <arglist>(std::ostream &amp;os) const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::VisibilityPrmPlanner</name>
    <filename>a00085.html</filename>
    <base>hpp::core::PathPlanner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>oneStep</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ae4c7e70369bf3606fc54a12b1f41f334</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configurationShooter</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>aed83e0294ab06f937ccc9e9abe4f88e5</anchor>
      <arglist>(const ConfigurationShooterPtr_t &amp;shooter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VisibilityPrmPlannerPtr_t</type>
      <name>createWithRoadmap</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a8652c7b488cbaabe87a99a96c8f5388d</anchor>
      <arglist>(const Problem &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VisibilityPrmPlannerPtr_t</type>
      <name>create</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a87d07a3d255d01ee0342ad657a2acf6b</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VisibilityPrmPlanner</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>adb7fef8dc0cc5b16b5588bf21f5d5619</anchor>
      <arglist>(const Problem &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VisibilityPrmPlanner</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>aa1b8c00ebde4d0a20b7f186ec1d765c1</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>acb71c705c8fbfef51baa4a0c7c30a55a</anchor>
      <arglist>(const VisibilityPrmPlannerWkPtr_t &amp;weak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>hpp::core::WeighedDistance</name>
    <filename>a00086.html</filename>
    <base>hpp::core::Distance</base>
    <member kind="function" virtualness="virtual">
      <type>virtual DistancePtr_t</type>
      <name>clone</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a859f1c9d08195886f9959f7cd0b6a098</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>getWeight</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a35ac30aff73e54c9922930b768749e05</anchor>
      <arglist>(std::size_t rank) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWeight</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>abd884974afbf75dd9a307946254fbf79</anchor>
      <arglist>(std::size_t rank, value_type weight)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>aa8d28f446e8c73342723e85eff29eabc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DevicePtr_t &amp;</type>
      <name>robot</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>af9aa1458a1c08043bfb30b823c29f11e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WeighedDistancePtr_t</type>
      <name>create</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>aa001fa0a8329774bad4daa215d7ecc99</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WeighedDistancePtr_t</type>
      <name>create</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>af8a2063eec74f7af3e48cc45d22905a8</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const std::vector&lt; value_type &gt; &amp;weights)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WeighedDistancePtr_t</type>
      <name>createCopy</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a019b7e5bd1fee849df639955ece47af6</anchor>
      <arglist>(const WeighedDistancePtr_t &amp;distance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WeighedDistance</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a4e9fbb3a7dc7833c496a2f4488989d87</anchor>
      <arglist>(const DevicePtr_t &amp;robot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WeighedDistance</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a4918bad5b63acfd535244f30d780f92a</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const std::vector&lt; value_type &gt; &amp;weights)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WeighedDistance</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a4caa9983f16de0c11f0e5ff5e1ffe18c</anchor>
      <arglist>(const WeighedDistance &amp;distance)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ae33666a9326242b492cc0d343fa6e337</anchor>
      <arglist>(WeighedDistanceWkPtr_t self)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual value_type</type>
      <name>impl_distance</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>aba1bb92a19c1e251ccc2a44468819dda</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Eigen</name>
    <filename>a00157.html</filename>
    <class kind="struct">Eigen::NumTraits&lt; hpp::core::RelativeMotion::RelativeMotionType &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>hpp</name>
    <filename>a00158.html</filename>
    <namespace>hpp::core</namespace>
  </compound>
  <compound kind="namespace">
    <name>hpp::core</name>
    <filename>a00159.html</filename>
    <namespace>hpp::core::continuousCollisionChecking</namespace>
    <namespace>hpp::core::nearestNeighbor</namespace>
    <namespace>hpp::core::parser</namespace>
    <namespace>hpp::core::pathOptimization</namespace>
    <namespace>hpp::core::pathProjector</namespace>
    <namespace>hpp::core::problemTarget</namespace>
    <namespace>hpp::core::steeringMethod</namespace>
    <class kind="class">hpp::core::BasicConfigurationShooter</class>
    <class kind="struct">hpp::core::CollisionPathValidationReport</class>
    <class kind="class">hpp::core::CollisionValidation</class>
    <class kind="struct">hpp::core::CollisionValidationReport</class>
    <class kind="class">hpp::core::ComparisonType</class>
    <class kind="class">hpp::core::ComparisonTypes</class>
    <class kind="class">hpp::core::ConfigProjector</class>
    <class kind="class">hpp::core::ConfigurationShooter</class>
    <class kind="class">hpp::core::ConfigValidation</class>
    <class kind="class">hpp::core::ConfigValidations</class>
    <class kind="class">hpp::core::ConnectedComponent</class>
    <class kind="class">hpp::core::Constraint</class>
    <class kind="class">hpp::core::ConstraintSet</class>
    <class kind="class">hpp::core::Containers</class>
    <class kind="class">hpp::core::DiffusingPlanner</class>
    <class kind="class">hpp::core::DiscretizedCollisionChecking</class>
    <class kind="class">hpp::core::DiscretizedPathValidation</class>
    <class kind="class">hpp::core::Distance</class>
    <class kind="class">hpp::core::DistanceBetweenObjects</class>
    <class kind="class">hpp::core::DoubleInequality</class>
    <class kind="class">hpp::core::Edge</class>
    <class kind="class">hpp::core::Equality</class>
    <class kind="class">hpp::core::EqualToZero</class>
    <class kind="class">hpp::core::Equation</class>
    <class kind="class">hpp::core::ExplicitNumericalConstraint</class>
    <class kind="class">hpp::core::ExplicitRelativeTransformation</class>
    <class kind="class">hpp::core::Inequality</class>
    <class kind="class">hpp::core::InterpolatedPath</class>
    <class kind="class">hpp::core::JointBoundException</class>
    <class kind="class">hpp::core::JointBoundValidation</class>
    <class kind="class">hpp::core::JointBoundValidationReport</class>
    <class kind="class">hpp::core::LockedJoint</class>
    <class kind="class">hpp::core::NearestNeighbor</class>
    <class kind="class">hpp::core::Node</class>
    <class kind="class">hpp::core::NumericalConstraint</class>
    <class kind="class">hpp::core::Path</class>
    <class kind="class">hpp::core::PathOptimizer</class>
    <class kind="class">hpp::core::PathPlanner</class>
    <class kind="class">hpp::core::PathProjector</class>
    <class kind="class">hpp::core::PathValidation</class>
    <class kind="struct">hpp::core::PathValidationReport</class>
    <class kind="class">hpp::core::PathVector</class>
    <class kind="class">hpp::core::PlanAndOptimize</class>
    <class kind="class">hpp::core::Problem</class>
    <class kind="class">hpp::core::ProblemSolver</class>
    <class kind="class">hpp::core::ProblemTarget</class>
    <class kind="struct">hpp::core::projection_error</class>
    <class kind="class">hpp::core::RandomShortcut</class>
    <class kind="class">hpp::core::ReedsSheppPath</class>
    <class kind="struct">hpp::core::RelativeMotion</class>
    <class kind="class">hpp::core::Roadmap</class>
    <class kind="class">hpp::core::SteeringMethod</class>
    <class kind="class">hpp::core::SteeringMethodStraight</class>
    <class kind="class">hpp::core::StraightPath</class>
    <class kind="class">hpp::core::ValidationReport</class>
    <class kind="class">hpp::core::VisibilityPrmPlanner</class>
    <class kind="class">hpp::core::WeighedDistance</class>
    <member kind="typedef">
      <type>Inequality&lt; ComparisonType::Superior &gt;</type>
      <name>SuperiorIneq</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>ga07ff2078ca5d2e762bfe31c1207cc7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inequality&lt; ComparisonType::Inferior &gt;</type>
      <name>InferiorIneq</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>gaaaf8442127c6ec24c54c43b4ec9d125f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SuperiorIneq &gt;</type>
      <name>SuperiorPtr_t</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>gaccaf36101f017c928100815751d4ba5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; InferiorIneq &gt;</type>
      <name>InferiorPtr_t</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>gaf3261ebb78e0323141ab1c544a844020</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ComparisonType &gt;</type>
      <name>ComparisonTypePtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a514a138b44e473a113fa7d20dac23f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Equality &gt;</type>
      <name>EqualityPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a8be06dc19c81c94ba8bc866b93ac21f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; EqualToZero &gt;</type>
      <name>EqualToZeroPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a394609b30ab634b18d86581e4c4e76fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ComparisonTypes &gt;</type>
      <name>ComparisonTypesPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>adac2b7d14b18b46317459a25ee20fcb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DoubleInequality &gt;</type>
      <name>DoubleInequalityPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>abf4b9699642d5b95dc1f23d920d2ca34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BasicConfigurationShooter &gt;</type>
      <name>BasicConfigurationShooterPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a39013e53c64524c2d1c43724cfca784f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::model::Body</type>
      <name>Body</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a92f2c35fa84d036d19b283a69845e94e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::model::BodyPtr_t</type>
      <name>BodyPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>abb8a8457dcebb34665cf40b33314a7f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionPathValidationReport &gt;</type>
      <name>CollisionPathValidationReportPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ade0108edfd5efe11699a893ac2cdfec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CollisionPathValidationReport &gt;</type>
      <name>CollisionPathValidationReports_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa28f6ce0bbe980544c5e7efc63ce9038</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionValidation &gt;</type>
      <name>CollisionValidationPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a5ba952d2597ae21f5cd6f8d9d28e1c6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionValidationReport &gt;</type>
      <name>CollisionValidationReportPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a9c7932fefd2d84bac3e94fa0ed7f1154</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::CollisionObjectPtr_t</type>
      <name>CollisionObjectPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a3a076e9a013c9009fee520a0ab863e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::Configuration_t</type>
      <name>Configuration_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a037e2082076da74f11789e522c85effa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::ConfigurationIn_t</type>
      <name>ConfigurationIn_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a7efa4075b56c5c57683530d304f28c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::ConfigurationOut_t</type>
      <name>ConfigurationOut_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad685339fc55002540b62369038cef2ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::ConfigurationPtr_t</type>
      <name>ConfigurationPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ae8ddad7de4abe63be497614a0c6ce3a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ConfigurationPtr_t &gt;</type>
      <name>Configurations_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a555df35840ca80af0778fa3589522419</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Configurations_t::iterator</type>
      <name>ConfigIterator_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a76d9d091e942b1f40871a71420e99094</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Configurations_t::const_iterator</type>
      <name>ConfigConstIterator_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a8f6b83824859081b28bae9342ed0b3e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigurationShooter &gt;</type>
      <name>ConfigurationShooterPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac2f4ac8058ccd404c47481f65cbfc5f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigProjector &gt;</type>
      <name>ConfigProjectorPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a87a37d1e50af286182f596142bd92b9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigValidation &gt;</type>
      <name>ConfigValidationPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a030f93d853343d7f5a4b661450080e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigValidations &gt;</type>
      <name>ConfigValidationsPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa53b4b5b3da1f2df3002677b8e09ef42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConnectedComponent &gt;</type>
      <name>ConnectedComponentPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a87c561eb5d2515b1565dcd2af9f4fa35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; ConnectedComponentPtr_t &gt;</type>
      <name>ConnectedComponents_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a0a0f76f318c278589f3e0864028da2b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Constraint &gt;</type>
      <name>ConstraintPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aae51393dbe50864be441251296aa1aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConstraintSet &gt;</type>
      <name>ConstraintSetPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa0c7dcd4ad373beb17324b76f4aebbd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const ConstraintSet &gt;</type>
      <name>ConstraintSetConstPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa8956276a26006f945ec6e51a9bcd34e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; ConstraintPtr_t &gt;</type>
      <name>Constraints_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>adb2ff8cfb4463f5dea2f9fcf3ba019b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::Device</type>
      <name>Device_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>af55f1801c9be8f1a38cfec3a01e5e691</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::DevicePtr_t</type>
      <name>DevicePtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a64d249ab7bf6122a82c517666267fd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::DeviceWkPtr_t</type>
      <name>DeviceWkPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad7596366438650e212c16538fc6ffa11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::CenterOfMassComputationPtr_t</type>
      <name>CenterOfMassComputationPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a391140cb97501f13a503bfc24a29dc9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; DevicePtr_t &gt;</type>
      <name>Devices_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aacc07c1f8902ecc52457eaa7dea4917b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::DifferentiableFunction</type>
      <name>DifferentiableFunction</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac2e7f3781b4fe72388e13d49651e677f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::DifferentiableFunctionPtr_t</type>
      <name>DifferentiableFunctionPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>acadaa17624fe50d234d025e370d2079d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DiffusingPlanner &gt;</type>
      <name>DiffusingPlannerPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a45f0c26b60d1cdb9d2ad70fc02bf5bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DiscretizedCollisionChecking &gt;</type>
      <name>DiscretizedCollisionCheckingPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aaca3dcf93021abb202ae3eba99eb7554</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DiscretizedPathValidation &gt;</type>
      <name>DiscretizedPathValidationPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a003eaf891bb8e2307f5f08909007a0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Distance &gt;</type>
      <name>DistancePtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a86df25709d657aa5607817e510a95434</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DistanceBetweenObjects &gt;</type>
      <name>DistanceBetweenObjectsPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ae0de76904f27310b270370cdabd0359c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::DistanceResult</type>
      <name>DistanceResult</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad57aef5d23b02705e961845dbe7eba54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::DistanceResults_t</type>
      <name>DistanceResults_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa62803f4c1aca1f31fd895e15cf259d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Edge *</type>
      <name>EdgePtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a5ba26e20e074d0ce7db359cf5788ec86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; Edge * &gt;</type>
      <name>Edges_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a6b045aa2ba41d2f8119c931479abd276</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ExplicitNumericalConstraint &gt;</type>
      <name>ExplicitNumericalConstraintPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac1f8b1229e8158444ddbb95f829cb3e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ExplicitRelativeTransformation &gt;</type>
      <name>ExplicitRelativeTransformationPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad50c1ff9385ff190ff0a78a564a0c7a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ExtractedPath &gt;</type>
      <name>ExtractedPathPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a03775a562555949e27a8558513c1d55e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::JointJacobian_t</type>
      <name>JointJacobian_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a3990de24365bee830f894feed3e05876</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::Joint</type>
      <name>Joint</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>acf4c1eb81ef255ba2f353eac373b44f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::JointConstPtr_t</type>
      <name>JointConstPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a07e2f08a3aa44fb05f61e954d2f791b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::JointPtr_t</type>
      <name>JointPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a6d4bb29a5d2f99b5a44ac658551e658e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; JointBoundValidation &gt;</type>
      <name>JointBoundValidationPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac84e30c13037c7becde45492054e20c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; JointBoundValidationReport &gt;</type>
      <name>JointBoundValidationReportPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aef1173e2689796b1fd597ee426ef75e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::HalfJointJacobian_t</type>
      <name>HalfJointJacobian_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a33f7d9fbb8de9304cc262bae11fdf564</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::JointVector_t</type>
      <name>JointVector_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa59d7c01766c5ef1ea76704e24b4a28c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KDTree *</type>
      <name>KDTreePtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a8b4e1106dc1ea73492a8b34dd3dd1480</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; LockedJoint &gt;</type>
      <name>LockedJointPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ab723a2e17566c45f9aceadda1c02b3fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Equation &gt;</type>
      <name>EquationPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a574f68e832b7a494bb8bd0b7d2be3772</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const LockedJoint &gt;</type>
      <name>LockedJointConstPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a42f838026e9d7d5c488bf2b7ccc03716</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; NumericalConstraint &gt;</type>
      <name>NumericalConstraintPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>acca9c4fa413ab40080f8bd3b77d92d54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; LockedJointPtr_t &gt;</type>
      <name>LockedJoints_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a7ca20732fb1d53feb9944df404fa39c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::matrix_t</type>
      <name>matrix_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a518e378f04b43f695fbc4c6dbc2c6a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::matrixIn_t</type>
      <name>matrixIn_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>af55f0f0f180b108c82a9059780206ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>constraints::matrixOut_t</type>
      <name>matrixOut_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ae599e865ecccaaaea7128e34451ee4fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::size_type</type>
      <name>size_type</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a0650844e4f9492232bd719a86ca51c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::value_type</type>
      <name>value_type</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>af5f0522acc7cc30518ff2e65a8e012cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; value_type, value_type &gt;</type>
      <name>interval_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa1eaaf92fb6075a80b6429631fe3e7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; size_type, size_type &gt;</type>
      <name>SizeInterval_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad78423503529e47ad9f90dce5f513fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; SizeInterval_t &gt;</type>
      <name>SizeIntervals_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a4221ad634b8be0202f321a91b362d4de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; SizeIntervals_t &gt;</type>
      <name>IntervalsContainer_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a81151427d398bdb7baa114509bbb2cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Node *</type>
      <name>NodePtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aaa1154a22c5a3cc1cbce0ab6cef46568</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; NodePtr_t &gt;</type>
      <name>Nodes_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac612183d50fd36786841219d1c05799b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; NodePtr_t &gt;</type>
      <name>NodeVector_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a36540bea2751b959b990f9ce06d1e984</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::ObjectVector_t</type>
      <name>ObjectVector_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a62fb0fffc32477ddaff5df19574c2766</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Path &gt;</type>
      <name>PathPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ace7cc447422da6b26fae4c31940dd444</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const Path &gt;</type>
      <name>PathConstPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac63e80a2b059ec831d1329b9fe4bf598</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathOptimizer &gt;</type>
      <name>PathOptimizerPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a7be517aaea26ea8502a0f0e4bc4ac5cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathPlanner &gt;</type>
      <name>PathPlannerPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad40ce0ab724662ec472bf78c1c0a73c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ProblemTarget &gt;</type>
      <name>ProblemTargetPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aaca4fba95373d73fc144050fe022b88a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathValidation &gt;</type>
      <name>PathValidationPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac29e6238dd3231986f3f3e8d323bc003</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathValidationReport &gt;</type>
      <name>PathValidationReportPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a51bcf6b3e015b1054da572494e904f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathVector &gt;</type>
      <name>PathVectorPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a4e193a9670d76e2574324171f9dbc44b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const PathVector &gt;</type>
      <name>PathVectorConstPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a917a99f5f7102616bb84db210cfb3c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PlanAndOptimize &gt;</type>
      <name>PlanAndOptimizePtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a7351f2b8dd868b1bf97078f25bfce4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Problem *</type>
      <name>ProblemPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>af7ef42f739933c4e250fa6d969a49662</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProblemSolver *</type>
      <name>ProblemSolverPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a1946314f3983277f4c5284308d18b051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; RandomShortcut &gt;</type>
      <name>RandomShortcutPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ab3cc03ef2c42b647fdbb1345231d0dfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Roadmap &gt;</type>
      <name>RoadmapPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a490aff87ba3b21101dfbef637372c5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; StraightPath &gt;</type>
      <name>StraightPathPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a5518a19fa67c1517314d81ab0186f9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const StraightPath &gt;</type>
      <name>StraightPathConstPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>afd6446c211bb8a5c2ca41242e8535d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ReedsSheppPath &gt;</type>
      <name>ReedsSheppPathPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a8fd704f02ef4a28f5ae91b5da4282e5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const ReedsSheppPath &gt;</type>
      <name>ReedsSheppPathConstPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a70a7bd2f114a3aa792d7839c19992e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; InterpolatedPath &gt;</type>
      <name>InterpolatedPathPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ace5a5ad364c598f93238668fb2d4c388</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const InterpolatedPath &gt;</type>
      <name>InterpolatedPathConstPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a2ba9dc5971823acbb5c7751376722f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SteeringMethod &gt;</type>
      <name>SteeringMethodPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a0053bc3437cb01218dd6dc00e8c1d9f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SteeringMethodStraight &gt;</type>
      <name>SteeringMethodStraightPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>add1a1e165036c3fe80d11f481f6907e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; PathPtr_t &gt;</type>
      <name>Paths_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad336ad2a888d48e7731b62861a3ff486</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; PathVectorPtr_t &gt;</type>
      <name>PathVectors_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a2a525d697c13a5222f0346c4495a3f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::Transform3f</type>
      <name>Transform3f</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa47e854e977c0889b749c8d048cf08e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::vector3_t</type>
      <name>vector3_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad323a6eb9dded170d7a2082f8150bfe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 2, 1 &gt;</type>
      <name>vector2_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aab9337f20c1674f75c893a99e170ec41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::vector_t</type>
      <name>vector_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a168116d9d33e88b3259fa91586a98d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::vectorIn_t</type>
      <name>vectorIn_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a40789f1e939143d8a93dfd2aa65f4529</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>model::vectorOut_t</type>
      <name>vectorOut_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa9b7332e7a0572728ee51a444a22057d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; value_type, 1, Eigen::Dynamic &gt;</type>
      <name>rowvector_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a53851c7c70479f33f371f1737f5b9f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; VisibilityPrmPlanner &gt;</type>
      <name>VisibilityPrmPlannerPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a1ba74fc93c8c706fe3e5f841edce4c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ValidationReport &gt;</type>
      <name>ValidationReportPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a0705cba97a4d1ae359ae407f76283685</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; WeighedDistance &gt;</type>
      <name>WeighedDistancePtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a08e2e9036e1ce01111ee4e01c25a1591</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, NumericalConstraintPtr_t &gt;</type>
      <name>NumericalConstraintMap_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a78e21d9e25df0316dfc8af47a5db423b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, ComparisonTypePtr_t &gt;</type>
      <name>ComparisonTypeMap_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a0db998011f5660d868f18703548d8dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, SizeIntervals_t &gt;</type>
      <name>SizeIntervalsMap_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa11fefe9d90cafb3273820bf2fcd4512</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; NumericalConstraintPtr_t &gt;</type>
      <name>NumericalConstraints_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa459487bb6d15cc99a34d570ed589e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, CenterOfMassComputationPtr_t &gt;</type>
      <name>CenterOfMassComputationMap_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>acaf9af2b82f866d54b12e46942f0433c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; CollisionObjectPtr_t, CollisionObjectPtr_t &gt;</type>
      <name>CollisionPair_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a06134c4064cfe0caeef8cdb16ca639f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; CollisionPair_t &gt;</type>
      <name>CollisionPairs_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad7ee03fd20613a9644e16ad84bfa7a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NearestNeighbor *</type>
      <name>NearestNeighborPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a645c9ed99cb8fb5c02113ba42811c18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathProjector &gt;</type>
      <name>PathProjectorPtr_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>acd16e05d1b627514c689e55d35ee5dc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; PathOptimizerPtr_t(const Problem &amp;) &gt;</type>
      <name>PathOptimizerBuilder_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a8cef489d46a492887079fb69c1cc0101</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; PathPlannerPtr_t(const Problem &amp;, const RoadmapPtr_t &amp;) &gt;</type>
      <name>PathPlannerBuilder_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a3fbb1d69deb998d881f44a8f3cc31574</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; PathValidationPtr_t(const DevicePtr_t &amp;, const value_type &amp;) &gt;</type>
      <name>PathValidationBuilder_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a1b466240de9d55c35eb729f17e87ab81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; PathProjectorPtr_t(const DistancePtr_t &amp;, const SteeringMethodPtr_t &amp;, value_type) &gt;</type>
      <name>PathProjectorBuilder_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a9d96b9777b4c7fa8dbc5981c2fcffd8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; ConfigurationShooterPtr_t(const DevicePtr_t &amp;) &gt;</type>
      <name>ConfigurationShooterBuilder_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a0fd87d567905b38589d6e92ba575e814</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; SteeringMethodPtr_t(const ProblemPtr_t &amp;) &gt;</type>
      <name>SteeringMethodBuilder_t</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a00ba8cd09fea3b293e082275944a92da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>gac19b1e5c7ce1ad90ee52aa3491bd2e9f</anchor>
      <arglist>(std::ostream &amp;os, const Constraint &amp;constraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a85fc59645035584dd8051c0465a9913f</anchor>
      <arglist>(BasicConfigurationShooter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a6ed9a4cd15c75f5327979357c4a3e63e</anchor>
      <arglist>(CollisionPathValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a2167169fa8af2cc00a4f5f463b788d23</anchor>
      <arglist>(CollisionValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad3ec7349de8f0dc7504724da5124cc46</anchor>
      <arglist>(CollisionValidationReport)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac94e7acd08f63ddfa2133416ded9dafb</anchor>
      <arglist>(ConfigurationShooter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a8311bd5400d203db7df24ea03b59426d</anchor>
      <arglist>(ConfigProjector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>add02c514415417ab4b8b914e5f741190</anchor>
      <arglist>(ConfigValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a11bacdeb089c9a66c430707980a66ff3</anchor>
      <arglist>(ConfigValidations)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>afa5e13487da5f25b8466ba5104fec736</anchor>
      <arglist>(ConnectedComponent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a4a974fea2650924cb1999dca9f5040bd</anchor>
      <arglist>(Constraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ab5de251f2f1bfa367068fc26b6ad440a</anchor>
      <arglist>(ConstraintSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a965629a64a025c2e6e6f240da05b75f7</anchor>
      <arglist>(DiffusingPlanner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a33f177097b9d908822ab15a2ff674fb8</anchor>
      <arglist>(Distance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa9e7cca73a7b0eaf230d062bbd289e5b</anchor>
      <arglist>(DistanceBetweenObjects)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a9f4082d55abdbf064c399097ddc190bb</anchor>
      <arglist>(DiscretizedCollisionChecking)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad7b71bd720d70597c3e32e2e745a1494</anchor>
      <arglist>(DiscretizedPathValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>af3ed23244c6b066fb124d94b5f702f7d</anchor>
      <arglist>(Equation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a7bb2b32d2fb4fac94e4cefb9c458189b</anchor>
      <arglist>(ExplicitNumericalConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>af33d84537680ad296fd6df347c2f4d85</anchor>
      <arglist>(ExplicitRelativeTransformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a2be83881de07adc5664e4de91f3556be</anchor>
      <arglist>(NumericalConstraint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>afc306e555ad0357d64e82e6110564206</anchor>
      <arglist>(LockedJoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a73d2ab29a49cc705e6a1f06fc0a81ae9</anchor>
      <arglist>(ExtractedPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a6ac5fb1471e1932896ed5c78f4628ffb</anchor>
      <arglist>(JointBoundValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa728f221db12a1afb747eb9f33677391</anchor>
      <arglist>(Path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a653ee049387accb711897f44393ed90b</anchor>
      <arglist>(PathOptimizer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a9790ac608c0a25cf4aa7acae38adfd36</anchor>
      <arglist>(PathPlanner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa99755b02258dbf65860185ccc20f98f</anchor>
      <arglist>(ProblemTarget)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a560f6a29ed5a9ad39099c57fcbe0dc2a</anchor>
      <arglist>(PathVector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aca6b632cecd7c718d70c221776970e12</anchor>
      <arglist>(PathValidation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ab1ad444bdb7808d69b718b60e2e71989</anchor>
      <arglist>(PlanAndOptimize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a97710024ca6869f82ca48292d0182a41</anchor>
      <arglist>(Problem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ada9880b33578df46fbf2b1be142ae3a2</anchor>
      <arglist>(RandomShortcut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa204dbe6835f9640d2988a30f90ed1d5</anchor>
      <arglist>(Roadmap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a14ab4ed2bea455402224921945e1a87e</anchor>
      <arglist>(SteeringMethod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a2ac97392d132066dabba09d546000ce5</anchor>
      <arglist>(SteeringMethodStraight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aae8a0c6463f41c3c13fe7bfb776f1c97</anchor>
      <arglist>(StraightPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a4336b71884424eb417d2b61cc7e8ae77</anchor>
      <arglist>(InterpolatedPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>adc6485953e44f5876e42cf17594b4e18</anchor>
      <arglist>(ReedsSheppPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a60622ae657703c813320688b0c48df40</anchor>
      <arglist>(ValidationReport)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a988fec29c02856c309455f39c67e9120</anchor>
      <arglist>(VisibilityPrmPlanner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac1a0115a014bff841665ca660302c401</anchor>
      <arglist>(WeighedDistance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac200530dfd3f4bf573f0ec5aa4ff7959</anchor>
      <arglist>(PathProjector)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a52594d27eb2d6ad3d5f0d170e05496c0</anchor>
      <arglist>(std::ostream &amp;os, const LockedJoint &amp;lj)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ga1947b6d9b37f1a315e596b194adc6159</anchor>
      <arglist>(std::ostream &amp;os, const Node &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ac90e244c2dcfbdf7f95f0b59d825ac51</anchor>
      <arglist>(std::ostream &amp;os, const Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ga8ae1800d63fa0035ab3281311e873193</anchor>
      <arglist>(std::ostream &amp;os, const Roadmap &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga656195c66d722769e89c7a8af48181a2</anchor>
      <arglist>(std::ostream &amp;os, const ValidationReport &amp;report)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::continuousCollisionChecking</name>
    <filename>a00160.html</filename>
    <namespace>hpp::core::continuousCollisionChecking::dichotomy</namespace>
    <namespace>hpp::core::continuousCollisionChecking::progressive</namespace>
    <class kind="class">hpp::core::continuousCollisionChecking::Dichotomy</class>
    <class kind="class">hpp::core::continuousCollisionChecking::Progressive</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Dichotomy &gt;</type>
      <name>DichotomyPtr_t</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>aeb06b196d458d08467ad5cc7017897da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Progressive &gt;</type>
      <name>ProgressivePtr_t</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a5e8c76a9c9b8fa28bb831e6bead59215</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a8b78feb3d79472cb7e9d93562e81deb2</anchor>
      <arglist>(Dichotomy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a6c42edd5a757306480ded3deef3d02e5</anchor>
      <arglist>(Progressive)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::continuousCollisionChecking::dichotomy</name>
    <filename>a00161.html</filename>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BodyPairCollision &gt;</type>
      <name>BodyPairCollisionPtr_t</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>gacb1c39e153c6655e0cae887b7fd1ab2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; BodyPairCollisionPtr_t &gt;</type>
      <name>BodyPairCollisions_t</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga4c266add883459e283d131572adf7508</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>gab13c9e4772035258ef0d4d83d36b1a8e</anchor>
      <arglist>(BodyPairCollision)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::continuousCollisionChecking::progressive</name>
    <filename>a00162.html</filename>
    <class kind="class">hpp::core::continuousCollisionChecking::progressive::BodyPairCollision</class>
    <class kind="struct">hpp::core::continuousCollisionChecking::progressive::CoefficientVelocity</class>
    <class kind="struct">hpp::core::continuousCollisionChecking::progressive::PathVelocity</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BodyPairCollision &gt;</type>
      <name>BodyPairCollisionPtr_t</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga843636fb56aef23255988af3ef7307a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; BodyPairCollisionPtr_t &gt;</type>
      <name>BodyPairCollisions_t</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga8797a5012167ca526851c2f07b1bd476</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CoefficientVelocity &gt;</type>
      <name>CoefficientVelocities_t</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a995e107e7bc572acad40e042f4fd3c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga521fd61da699d9e61add000705df570c</anchor>
      <arglist>(BodyPairCollision)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::nearestNeighbor</name>
    <filename>a00163.html</filename>
    <member kind="typedef">
      <type>KDTree *</type>
      <name>KDTreePtr_t</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>ad7bb0151c114887548e601d1ed626cef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Basic *</type>
      <name>BasicPtr_t</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a199a21933e46d2032dfc4fa227005d55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::parser</name>
    <filename>a00164.html</filename>
    <class kind="class">hpp::core::parser::RoadmapFactory</class>
    <member kind="typedef">
      <type>hpp::util::parser::SequenceFactory&lt; std::string &gt;</type>
      <name>StringSequence</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ga6a93d581ac8f3ae38e05cedf2d8e3bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::util::parser::SequenceFactory&lt; double &gt;</type>
      <name>ConfigurationFactory</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>gaddac3c470d5ddef6a2dbbdd69ee46327</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::util::parser::SequenceFactory&lt; unsigned int &gt;</type>
      <name>IdSequence</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ga3dabee6e928569a6a1c3e77f84c0314b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRoadmap</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ga50b557a4d968611b4cb9370a9762c6f2</anchor>
      <arglist>(std::ostream &amp;o, const ProblemPtr_t &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function">
      <type>RoadmapPtr_t</type>
      <name>readRoadmap</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ga8db26505fc7081063e9e5b00cd7498d1</anchor>
      <arglist>(const std::string &amp;filename, const ProblemPtr_t &amp;problem)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::pathOptimization</name>
    <filename>a00165.html</filename>
    <class kind="class">hpp::core::pathOptimization::ConfigOptimization</class>
    <class kind="struct">hpp::core::pathOptimization::ConfigOptimizationTraits</class>
    <class kind="class">hpp::core::pathOptimization::Cost</class>
    <class kind="class">hpp::core::pathOptimization::GradientBased</class>
    <class kind="class">hpp::core::pathOptimization::PartialShortcut</class>
    <class kind="struct">hpp::core::pathOptimization::PartialShortcutTraits</class>
    <class kind="class">hpp::core::pathOptimization::PartialSplinePath</class>
    <class kind="class">hpp::core::pathOptimization::PathLength</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Cost &gt;</type>
      <name>CostPtr_t</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a1961dfc4ae6e548f711040c98c235193</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GradientBased &gt;</type>
      <name>GradientBasedPtr_t</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a8ad66c731b9ab5ccebb460697280b672</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PathLength &gt;</type>
      <name>PathLengthPtr_t</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>ae74e4b9a49bb45f7f2316d5343252ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PartialShortcut &gt;</type>
      <name>PartialShortcutPtr_t</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>abb8daefc2c1a8cd02da36f78d5eaeff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConfigOptimization &gt;</type>
      <name>ConfigOptimizationPtr_t</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a52c52eb468b4bae87aec69b6c4b8fc8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CollisionConstraintsResult &gt;</type>
      <name>CollisionConstraintsResults_t</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga8ec3de1032309ec7c79adf9edfc48c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>ae1ba543a90f5ca6ea36cfb8137c30e8a</anchor>
      <arglist>(Cost)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a9eba7cc09d8f17930205c119db2af35f</anchor>
      <arglist>(GradientBased)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a68d3425720b126c08f04dce21022ad1d</anchor>
      <arglist>(PathLength)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a7ca6a13378a55ecd651a8100efb0469e</anchor>
      <arglist>(PartialShortcut)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>a152fb63bebb1a1d38de541d5515b519b</anchor>
      <arglist>(ConfigOptimization)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::pathProjector</name>
    <filename>a00166.html</filename>
    <class kind="class">hpp::core::pathProjector::Dichotomy</class>
    <class kind="class">hpp::core::pathProjector::Global</class>
    <class kind="class">hpp::core::pathProjector::Progressive</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Global &gt;</type>
      <name>GlobalPtr_t</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a46ec3eb85b8743ea4c8d456dc9bfcaaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Dichotomy &gt;</type>
      <name>DichotomyPtr_t</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a8e49bd7ae5008b130b160cd7d81fbdfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Progressive &gt;</type>
      <name>ProgressivePtr_t</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a0db46ea53ddfbc8d643b454ecdf42aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ac49d62d9c9f730b9a30049d0f84a6b59</anchor>
      <arglist>(Global)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a6bdc47dcf6ef337fcc5a746318af82bf</anchor>
      <arglist>(Dichotomy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a294ce2fadb99b3eab085eea2b8aece1c</anchor>
      <arglist>(Progressive)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::problemTarget</name>
    <filename>a00167.html</filename>
    <class kind="class">hpp::core::problemTarget::GoalConfigurations</class>
    <class kind="class">hpp::core::problemTarget::TaskTarget</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GoalConfigurations &gt;</type>
      <name>GoalConfigurationsPtr_t</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a5b199c94158433428667eb1e970247d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; TaskTarget &gt;</type>
      <name>TaskTargetPtr_t</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a08b6f9043e55d79e3302d3600f73c67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ac3948e11644a9eac9cc22011a5ef588d</anchor>
      <arglist>(GoalConfigurations)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>ad7d34b357f6c12e02f4dc5d992c58985</anchor>
      <arglist>(TaskTarget)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>hpp::core::steeringMethod</name>
    <filename>a00168.html</filename>
    <class kind="class">hpp::core::steeringMethod::Interpolated</class>
    <class kind="class">hpp::core::steeringMethod::ReedsShepp</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Interpolated &gt;</type>
      <name>InterpolatedPtr_t</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>af58d96581bfb8587fc5d45691be7e0af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ReedsShepp &gt;</type>
      <name>ReedsSheppPtr_t</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>adf70b4adad33a619dcde7f62eea109b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>af4072cd5a7aaefdd07ea766d786b678a</anchor>
      <arglist>(Interpolated)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a8211ae4089cdc6043bbadfbfff797d22</anchor>
      <arglist>(ReedsShepp)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>configuration_sampling</name>
    <title>Configuration Sampling</title>
    <filename>a00170.html</filename>
    <class kind="class">hpp::core::BasicConfigurationShooter</class>
    <class kind="class">hpp::core::ConfigurationShooter</class>
    <member kind="function" virtualness="pure">
      <type>virtual ConfigurationPtr_t</type>
      <name>shoot</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ga016609b3d7968d914d9620e2677ea3be</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConfigurationShooter</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ga6d4743d6735b50ad4868d58222be365a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>gad7e9a66c680fd8ba7395fe5b048da84a</anchor>
      <arglist>(const ConfigurationShooterWkPtr_t &amp;weak)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>path_planning</name>
    <title>Path planning algorithms</title>
    <filename>a00171.html</filename>
    <class kind="class">hpp::core::DiffusingPlanner</class>
    <class kind="class">hpp::core::PathPlanner</class>
    <class kind="class">hpp::core::PlanAndOptimize</class>
    <class kind="class">hpp::core::problemTarget::GoalConfigurations</class>
    <class kind="class">hpp::core::problemTarget::TaskTarget</class>
    <class kind="class">hpp::core::ProblemTarget</class>
    <class kind="class">hpp::core::Problem</class>
    <class kind="class">hpp::core::VisibilityPrmPlanner</class>
  </compound>
  <compound kind="group">
    <name>path_optimization</name>
    <title>Path Optimization</title>
    <filename>a00172.html</filename>
    <namespace>hpp::core::pathOptimization</namespace>
    <class kind="struct">hpp::core::pathOptimization::ConfigOptimizationTraits</class>
    <class kind="struct">hpp::core::pathOptimization::ConfigOptimization::Parameters</class>
    <class kind="struct">hpp::core::pathOptimization::ConfigOptimization::Optimizer</class>
    <class kind="class">hpp::core::pathOptimization::ConfigOptimization</class>
    <class kind="class">hpp::core::pathOptimization::GradientBased</class>
    <class kind="struct">hpp::core::pathOptimization::PartialShortcutTraits</class>
    <class kind="struct">hpp::core::pathOptimization::PartialShortcut::Parameters</class>
    <class kind="class">hpp::core::pathOptimization::PartialShortcut</class>
    <class kind="class">hpp::core::PathOptimizer</class>
    <class kind="class">hpp::core::RandomShortcut</class>
    <member kind="typedef">
      <type>std::vector&lt; CollisionConstraintsResult &gt;</type>
      <name>CollisionConstraintsResults_t</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga8ec3de1032309ec7c79adf9edfc48c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GradientBasedPtr_t</type>
      <name>create</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga3395c68307cad504abcf8cac8ea725fa</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual PathVectorPtr_t</type>
      <name>optimize</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga333c9ed253e1901223f3ab95ce2bc970</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GradientBased</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga53fdf87420e173ddc6ddee85a4f2eaf9</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function">
      <type>const Problem &amp;</type>
      <name>problem</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga9d07d63edbc71df565164e70cb807057</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PathVectorPtr_t</type>
      <name>optimize</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga04d8e315addf200833541c8bb01ef360</anchor>
      <arglist>(const PathVectorPtr_t &amp;path)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interrupt</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga945c65ca497efd7c4098cd99dd26c413</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PathOptimizer</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga1dbe27ed7b7e7706778be064443061e1</anchor>
      <arglist>(const Problem &amp;problem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PathPtr_t</type>
      <name>steer</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga1fe4d818491c40aa735dbdafab2353e9</anchor>
      <arglist>(ConfigurationIn_t q1, ConfigurationIn_t q2) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>interrupt_</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>ga8ada4f7cabc118faaac5d3f48ac4c56e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>steering_method</name>
    <title>Steering method and distance functions</title>
    <filename>a00173.html</filename>
    <class kind="class">hpp::core::Distance</class>
    <class kind="class">hpp::core::steeringMethod::Interpolated</class>
    <class kind="class">hpp::core::steeringMethod::ReedsShepp</class>
    <class kind="class">hpp::core::SteeringMethodStraight</class>
    <class kind="class">hpp::core::SteeringMethod</class>
    <class kind="class">hpp::core::WeighedDistance</class>
  </compound>
  <compound kind="group">
    <name>validation</name>
    <title>Validation of configurations and paths</title>
    <filename>a00174.html</filename>
    <class kind="struct">hpp::core::CollisionPathValidationReport</class>
    <class kind="struct">hpp::core::CollisionValidationReport</class>
    <class kind="class">hpp::core::CollisionValidation</class>
    <class kind="class">hpp::core::ConfigValidation</class>
    <class kind="class">hpp::core::ConfigValidations</class>
    <class kind="class">hpp::core::continuousCollisionChecking::Dichotomy</class>
    <class kind="class">hpp::core::continuousCollisionChecking::Progressive</class>
    <class kind="class">hpp::core::DiscretizedCollisionChecking</class>
    <class kind="class">hpp::core::DiscretizedPathValidation</class>
    <class kind="class">hpp::core::JointBoundException</class>
    <class kind="class">hpp::core::JointBoundValidationReport</class>
    <class kind="class">hpp::core::JointBoundValidation</class>
    <class kind="struct">hpp::core::PathValidationReport</class>
    <class kind="class">hpp::core::PathValidation</class>
    <class kind="class">hpp::core::ValidationReport</class>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BodyPairCollision &gt;</type>
      <name>BodyPairCollisionPtr_t</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>gacb1c39e153c6655e0cae887b7fd1ab2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; BodyPairCollisionPtr_t &gt;</type>
      <name>BodyPairCollisions_t</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga4c266add883459e283d131572adf7508</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BodyPairCollision &gt;</type>
      <name>BodyPairCollisionPtr_t</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga843636fb56aef23255988af3ef7307a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; BodyPairCollisionPtr_t &gt;</type>
      <name>BodyPairCollisions_t</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga8797a5012167ca526851c2f07b1bd476</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>gab13c9e4772035258ef0d4d83d36b1a8e</anchor>
      <arglist>(BodyPairCollision)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DichotomyPtr_t</type>
      <name>create</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga5f676eee8fa0cda5944dbfff2d3f092f</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;tolerance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>validate</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga27f86ba34e4ca51b45ad6e207133309b</anchor>
      <arglist>(const PathPtr_t &amp;path, bool reverse, PathPtr_t &amp;validPart, PathValidationReportPtr_t &amp;report)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga731cb9a6c113024bf96d2c9dd416a77a</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>gabd70823f916058d63b3599b78e531bfc</anchor>
      <arglist>(const JointPtr_t &amp;joint, const CollisionObjectPtr_t &amp;obstacle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Dichotomy</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga08d4c7054f5eaaebe528dc1b10227f07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Dichotomy</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga0c4d868306a004e2c0793313c05c9a54</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HPP_PREDEF_CLASS</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga521fd61da699d9e61add000705df570c</anchor>
      <arglist>(BodyPairCollision)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProgressivePtr_t</type>
      <name>create</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>gac8cc1d70e0e5e5627492dd982384cbfb</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;tolerance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>validate</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>gacc8cd446e153246cd2f580669a55c187</anchor>
      <arglist>(const PathPtr_t &amp;path, bool reverse, PathPtr_t &amp;validPart, PathValidationReportPtr_t &amp;report)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addObstacle</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga08fb4e3e14f7eb0a6ab7c28a13301a2f</anchor>
      <arglist>(const CollisionObjectPtr_t &amp;object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeObstacleFromJoint</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga2259f70cbab37f5ad60fa1d754491d00</anchor>
      <arglist>(const JointPtr_t &amp;joint, const CollisionObjectPtr_t &amp;obstacle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Progressive</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga6c21c71dc868957051aec0a80366abf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Progressive</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga79163ff13a693103d910897e9cc55e57</anchor>
      <arglist>(const DevicePtr_t &amp;robot, const value_type &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>ga656195c66d722769e89c7a8af48181a2</anchor>
      <arglist>(std::ostream &amp;os, const ValidationReport &amp;report)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>roadmap</name>
    <title>Roadmap</title>
    <filename>a00175.html</filename>
    <class kind="class">hpp::core::Edge</class>
    <class kind="class">hpp::core::Node</class>
    <class kind="class">hpp::core::Roadmap</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ga1947b6d9b37f1a315e596b194adc6159</anchor>
      <arglist>(std::ostream &amp;os, const Node &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>ga8ae1800d63fa0035ab3281311e873193</anchor>
      <arglist>(std::ostream &amp;os, const Roadmap &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>constraints</name>
    <title>Constraints</title>
    <filename>a00176.html</filename>
    <class kind="class">hpp::core::ComparisonType</class>
    <class kind="class">hpp::core::Equality</class>
    <class kind="class">hpp::core::EqualToZero</class>
    <class kind="class">hpp::core::ComparisonTypes</class>
    <class kind="class">hpp::core::Inequality</class>
    <class kind="class">hpp::core::DoubleInequality</class>
    <class kind="class">hpp::core::ConfigProjector</class>
    <class kind="class">hpp::core::ConstraintSet</class>
    <class kind="class">hpp::core::Constraint</class>
    <class kind="class">hpp::core::Equation</class>
    <class kind="class">hpp::core::ExplicitNumericalConstraint</class>
    <class kind="class">hpp::core::ExplicitRelativeTransformation</class>
    <class kind="class">hpp::core::LockedJoint</class>
    <class kind="class">hpp::core::NumericalConstraint</class>
    <member kind="typedef">
      <type>GenericTransformation&lt; PositionBit|OrientationBit &gt;</type>
      <name>Transformation2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>gaa150d4ab5c8f3858772af332f3d4ba79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; PositionBit &gt;</type>
      <name>Position2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga298f3bce23cfd4b26908a780f6d54bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; OrientationBit &gt;</type>
      <name>Orientation2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga7a6a28aa4fd89aa0eeb7b7fc79eae66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|PositionBit|OrientationBit &gt;</type>
      <name>RelativeTransformation2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>gab4b0536c297c0603f0e53e451e80c8f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|PositionBit &gt;</type>
      <name>RelativePosition2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga0af548908917b580d64f1deca42ca5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericTransformation&lt; RelativeBit|OrientationBit &gt;</type>
      <name>RelativeOrientation2</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga80bfc99b3d0a24672ad3d20e270255c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inequality&lt; ComparisonType::Superior &gt;</type>
      <name>SuperiorIneq</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>ga07ff2078ca5d2e762bfe31c1207cc7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Inequality&lt; ComparisonType::Inferior &gt;</type>
      <name>InferiorIneq</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>gaaaf8442127c6ec24c54c43b4ec9d125f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SuperiorIneq &gt;</type>
      <name>SuperiorPtr_t</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>gaccaf36101f017c928100815751d4ba5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; InferiorIneq &gt;</type>
      <name>InferiorPtr_t</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>gaf3261ebb78e0323141ab1c544a844020</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ga962ff736acd3e22ec80fd5c21a729c26</anchor>
      <arglist>(std::ostream &amp;os, const DifferentiableFunction &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>gac19b1e5c7ce1ad90ee52aa3491bd2e9f</anchor>
      <arglist>(std::ostream &amp;os, const Constraint &amp;constraint)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Parser</name>
    <title>Parser</title>
    <filename>a00177.html</filename>
    <class kind="class">hpp::core::parser::RoadmapFactory</class>
    <member kind="typedef">
      <type>hpp::util::parser::SequenceFactory&lt; std::string &gt;</type>
      <name>StringSequence</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ga6a93d581ac8f3ae38e05cedf2d8e3bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::util::parser::SequenceFactory&lt; double &gt;</type>
      <name>ConfigurationFactory</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>gaddac3c470d5ddef6a2dbbdd69ee46327</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hpp::util::parser::SequenceFactory&lt; unsigned int &gt;</type>
      <name>IdSequence</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ga3dabee6e928569a6a1c3e77f84c0314b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeRoadmap</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ga50b557a4d968611b4cb9370a9762c6f2</anchor>
      <arglist>(std::ostream &amp;o, const ProblemPtr_t &amp;problem, const RoadmapPtr_t &amp;roadmap)</arglist>
    </member>
    <member kind="function">
      <type>RoadmapPtr_t</type>
      <name>readRoadmap</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>ga8db26505fc7081063e9e5b00cd7498d1</anchor>
      <arglist>(const std::string &amp;filename, const ProblemPtr_t &amp;problem)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>hpp_core_porting_notes</name>
    <title>Porting notes</title>
    <filename>a00003</filename>
    <docanchor file="a00003" title="Porting from version 3.1 to version 3.2">hpp_core_porting_3_1_to_3_2</docanchor>
    <docanchor file="a00003" title="Modification in validation reports">hpp_core_porting_3_1_to_3_2_report</docanchor>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title></title>
    <filename>index</filename>
    <docanchor file="index" title="Introduction">hpp_core_sec_intro</docanchor>
    <docanchor file="index" title="Embedding hpp-core into an application">hpp_core_sec_embedding</docanchor>
    <docanchor file="index" title="Introduction">sec_intro_hpp_model</docanchor>
    <docanchor file="index" title="Main classes">sec_hpp_model_main_classes</docanchor>
    <docanchor file="index" title="Joints">subsec_hpp_model_joint</docanchor>
    <docanchor file="index" title="Joint configuration">hpp_model_joint_configuration</docanchor>
    <docanchor file="index" title="Device">subsec_hpp_model_device</docanchor>
    <docanchor file="index">Configuration</docanchor>
    <docanchor file="index">Velocity</docanchor>
    <docanchor file="index" title="Operations between configurations and velocities">hpp_model_operation_between_configurations_and_velocities</docanchor>
  </compound>
</tagfile>
