<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>AABB.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>a00257</filename>
    <includes id="a00356" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <class kind="class">fcl::AABB</class>
    <namespace>fcl</namespace>
    <member kind="function" static="yes">
      <type>static AABB</type>
      <name>translate</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae757f822ade72a9e040faacd1cbe4593</anchor>
      <arglist>(const AABB &amp;aabb, const Vec3f &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>broadphase.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/broadphase/</path>
    <filename>a00258</filename>
    <includes id="a00280" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="a00259" name="broadphase_bruteforce.h" local="no" imported="no">hpp/fcl/broadphase/broadphase_bruteforce.h</includes>
    <includes id="a00264" name="broadphase_spatialhash.h" local="no" imported="no">hpp/fcl/broadphase/broadphase_spatialhash.h</includes>
    <includes id="a00263" name="broadphase_SaP.h" local="no" imported="no">hpp/fcl/broadphase/broadphase_SaP.h</includes>
    <includes id="a00266" name="broadphase_SSaP.h" local="no" imported="no">hpp/fcl/broadphase/broadphase_SSaP.h</includes>
    <includes id="a00262" name="broadphase_interval_tree.h" local="no" imported="no">hpp/fcl/broadphase/broadphase_interval_tree.h</includes>
    <includes id="a00260" name="broadphase_dynamic_AABB_tree.h" local="no" imported="no">hpp/fcl/broadphase/broadphase_dynamic_AABB_tree.h</includes>
    <includes id="a00261" name="broadphase_dynamic_AABB_tree_array.h" local="no" imported="no">hpp/fcl/broadphase/broadphase_dynamic_AABB_tree_array.h</includes>
    <class kind="class">fcl::BroadPhaseCollisionManager</class>
    <class kind="class">fcl::BroadPhaseContinuousCollisionManager</class>
    <namespace>fcl</namespace>
    <member kind="typedef">
      <type>bool(*</type>
      <name>CollisionCallBack</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a35b68b743ae627b553eaf50f1caf45fa</anchor>
      <arglist>)(CollisionObject *o1, CollisionObject *o2, void *cdata)</arglist>
    </member>
    <member kind="typedef">
      <type>bool(*</type>
      <name>DistanceCallBack</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a35c6ad5d4eea159e9919767c21e06e45</anchor>
      <arglist>)(CollisionObject *o1, CollisionObject *o2, void *cdata, FCL_REAL &amp;dist)</arglist>
    </member>
    <member kind="typedef">
      <type>bool(*</type>
      <name>ContinuousCollisionCallBack</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a33c631290be3c4414f05eeaf7f30a7af</anchor>
      <arglist>)(ContinuousCollisionObject *o1, ContinuousCollisionObject *o2, void *cdata)</arglist>
    </member>
    <member kind="typedef">
      <type>bool(*</type>
      <name>ContinuousDistanceCallBack</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a02763756d2355958b140b55a02a9440b</anchor>
      <arglist>)(ContinuousCollisionObject *o1, ContinuousCollisionObject *o2, void *cdata, FCL_REAL &amp;dist)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>broadphase_bruteforce.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/broadphase/</path>
    <filename>a00259</filename>
    <includes id="a00258" name="broadphase.h" local="no" imported="no">hpp/fcl/broadphase/broadphase.h</includes>
    <class kind="class">fcl::NaiveCollisionManager</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>broadphase_dynamic_AABB_tree.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/broadphase/</path>
    <filename>a00260</filename>
    <includes id="a00258" name="broadphase.h" local="no" imported="no">hpp/fcl/broadphase/broadphase.h</includes>
    <includes id="a00298" name="hierarchy_tree.h" local="no" imported="no">hpp/fcl/broadphase/hierarchy_tree.h</includes>
    <includes id="a00267" name="BV.h" local="no" imported="no">hpp/fcl/BV/BV.h</includes>
    <includes id="a00293" name="geometric_shapes_utility.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes_utility.h</includes>
    <class kind="class">fcl::DynamicAABBTreeCollisionManager</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>broadphase_dynamic_AABB_tree_array.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/broadphase/</path>
    <filename>a00261</filename>
    <includes id="a00258" name="broadphase.h" local="no" imported="no">hpp/fcl/broadphase/broadphase.h</includes>
    <includes id="a00298" name="hierarchy_tree.h" local="no" imported="no">hpp/fcl/broadphase/hierarchy_tree.h</includes>
    <includes id="a00267" name="BV.h" local="no" imported="no">hpp/fcl/BV/BV.h</includes>
    <includes id="a00293" name="geometric_shapes_utility.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes_utility.h</includes>
    <class kind="class">fcl::DynamicAABBTreeCollisionManager_Array</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>broadphase_interval_tree.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/broadphase/</path>
    <filename>a00262</filename>
    <includes id="a00258" name="broadphase.h" local="no" imported="no">hpp/fcl/broadphase/broadphase.h</includes>
    <includes id="a00308" name="interval_tree.h" local="no" imported="no">hpp/fcl/broadphase/interval_tree.h</includes>
    <class kind="class">fcl::IntervalTreeCollisionManager</class>
    <class kind="struct">fcl::IntervalTreeCollisionManager::EndPoint</class>
    <class kind="struct">fcl::IntervalTreeCollisionManager::SAPInterval</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>broadphase_SaP.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/broadphase/</path>
    <filename>a00263</filename>
    <includes id="a00258" name="broadphase.h" local="no" imported="no">hpp/fcl/broadphase/broadphase.h</includes>
    <class kind="class">fcl::SaPCollisionManager</class>
    <class kind="struct">fcl::SaPCollisionManager::SaPAABB</class>
    <class kind="struct">fcl::SaPCollisionManager::EndPoint</class>
    <class kind="struct">fcl::SaPCollisionManager::SaPPair</class>
    <class kind="class">fcl::SaPCollisionManager::isUnregistered</class>
    <class kind="class">fcl::SaPCollisionManager::isNotValidPair</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>broadphase_spatialhash.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/broadphase/</path>
    <filename>a00264</filename>
    <includes id="a00258" name="broadphase.h" local="no" imported="no">hpp/fcl/broadphase/broadphase.h</includes>
    <includes id="a00297" name="hash.h" local="no" imported="no">hpp/fcl/broadphase/hash.h</includes>
    <includes id="a00257" name="AABB.h" local="no" imported="no">hpp/fcl/BV/AABB.h</includes>
    <includes id="a00265" name="broadphase_spatialhash.hxx" local="no" imported="no">hpp/fcl/broadphase/broadphase_spatialhash.hxx</includes>
    <class kind="struct">fcl::SpatialHash</class>
    <class kind="class">fcl::SpatialHashingCollisionManager</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>broadphase_spatialhash.hxx</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/broadphase/</path>
    <filename>a00265</filename>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>broadphase_SSaP.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/broadphase/</path>
    <filename>a00266</filename>
    <includes id="a00258" name="broadphase.h" local="no" imported="no">hpp/fcl/broadphase/broadphase.h</includes>
    <class kind="class">fcl::SSaPCollisionManager</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>BV.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>a00267</filename>
    <includes id="a00312" name="kDOP.h" local="no" imported="no">hpp/fcl/BV/kDOP.h</includes>
    <includes id="a00257" name="AABB.h" local="no" imported="no">hpp/fcl/BV/AABB.h</includes>
    <includes id="a00332" name="include/hpp/fcl/BV/OBB.h" local="no" imported="no">hpp/fcl/BV/OBB.h</includes>
    <includes id="a00338" name="RSS.h" local="no" imported="no">hpp/fcl/BV/RSS.h</includes>
    <includes id="a00334" name="OBBRSS.h" local="no" imported="no">hpp/fcl/BV/OBBRSS.h</includes>
    <includes id="a00313" name="kIOS.h" local="no" imported="no">hpp/fcl/BV/kIOS.h</includes>
    <includes id="a00348" name="math/transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <namespace>fcl</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertBV</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a52362275c01315f71df925518375beda</anchor>
      <arglist>(const BV1 &amp;bv1, const Transform3f &amp;tf1, BV2 &amp;bv2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BV_fitter.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/BVH/</path>
    <filename>a00268</filename>
    <includes id="a00272" name="BVH_internal.h" local="no" imported="no">hpp/fcl/BVH/BVH_internal.h</includes>
    <includes id="a00313" name="kIOS.h" local="no" imported="no">hpp/fcl/BV/kIOS.h</includes>
    <includes id="a00334" name="OBBRSS.h" local="no" imported="no">hpp/fcl/BV/OBBRSS.h</includes>
    <class kind="class">fcl::BVFitterBase</class>
    <class kind="class">fcl::BVFitter</class>
    <class kind="class">fcl::BVFitter&lt; OBB &gt;</class>
    <class kind="class">fcl::BVFitter&lt; RSS &gt;</class>
    <class kind="class">fcl::BVFitter&lt; kIOS &gt;</class>
    <class kind="class">fcl::BVFitter&lt; OBBRSS &gt;</class>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1cc4eb5503fb7ac3a4b5db238ae71ac8</anchor>
      <arglist>(Vec3f *ps, int n, BV &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; OBB &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa9ed83cdc3868397130a4100141ea0dd</anchor>
      <arglist>(Vec3f *ps, int n, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; RSS &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a47a14e9897e4f4a8e49f107a576cbb03</anchor>
      <arglist>(Vec3f *ps, int n, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; kIOS &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a9294ea4fd13f33b09bc30a098ed480de</anchor>
      <arglist>(Vec3f *ps, int n, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; OBBRSS &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>acdcb1c3b31375ed5b4f97ca71536eda7</anchor>
      <arglist>(Vec3f *ps, int n, OBBRSS &amp;bv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BV_node.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>a00269</filename>
    <includes id="a00356" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <includes id="a00319" name="matrix_3f.h" local="no" imported="no">hpp/fcl/math/matrix_3f.h</includes>
    <includes id="a00267" name="BV.h" local="no" imported="no">hpp/fcl/BV/BV.h</includes>
    <class kind="struct">fcl::BVNodeBase</class>
    <class kind="struct">fcl::BVNode</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>BV_splitter.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/BVH/</path>
    <filename>a00270</filename>
    <includes id="a00272" name="BVH_internal.h" local="no" imported="no">hpp/fcl/BVH/BVH_internal.h</includes>
    <includes id="a00313" name="kIOS.h" local="no" imported="no">hpp/fcl/BV/kIOS.h</includes>
    <includes id="a00334" name="OBBRSS.h" local="no" imported="no">hpp/fcl/BV/OBBRSS.h</includes>
    <class kind="class">fcl::BVSplitterBase</class>
    <class kind="class">fcl::BVSplitter</class>
    <namespace>fcl</namespace>
    <member kind="enumeration">
      <type></type>
      <name>SplitMethodType</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6a1bc06d0aede35a6f8189ba1384cb59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_METHOD_MEAN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6a1bc06d0aede35a6f8189ba1384cb59a046a8f2846bc96f92ab97212efb8e242</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_METHOD_MEDIAN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6a1bc06d0aede35a6f8189ba1384cb59a13b7e6546221a15207774bba7af5ad93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_METHOD_BV_CENTER</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6a1bc06d0aede35a6f8189ba1384cb59afe46972d03cded964e6d6ef1a81379a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BVH_front.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/BVH/</path>
    <filename>a00271</filename>
    <class kind="struct">fcl::BVHFrontNode</class>
    <namespace>fcl</namespace>
    <member kind="typedef">
      <type>std::list&lt; BVHFrontNode &gt;</type>
      <name>BVHFrontList</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a9e235fe82f32503d487230a7ffc883d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateFrontList</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abade69051ecc020594631afbab6224c7</anchor>
      <arglist>(BVHFrontList *front_list, int b1, int b2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BVH_internal.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/BVH/</path>
    <filename>a00272</filename>
    <includes id="a00283" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <namespace>fcl</namespace>
    <member kind="enumeration">
      <type></type>
      <name>BVHBuildState</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae282ecfb7a2a310150ab7a5a1cb0b903</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_EMPTY</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae282ecfb7a2a310150ab7a5a1cb0b903ae77a47d44c561f35b98bd35d99da284b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_BEGUN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae282ecfb7a2a310150ab7a5a1cb0b903ab4b43a78244c7ca9075d574be855abb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_PROCESSED</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae282ecfb7a2a310150ab7a5a1cb0b903a974153e9dbc2b06b0abcbf8d3d708701</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_UPDATE_BEGUN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae282ecfb7a2a310150ab7a5a1cb0b903a0046a200b336cf633af881d929b35d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_UPDATED</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae282ecfb7a2a310150ab7a5a1cb0b903a76633d7b729c9a20c4a18e617ce9b8e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_REPLACE_BEGUN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae282ecfb7a2a310150ab7a5a1cb0b903a572b91eb341425f15aeaf097d0bb8c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BVHReturnCode</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_OK</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8a2ed3e9cc6a5634f3ca6584fd2b959f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_MODEL_OUT_OF_MEMORY</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8afb160e4324dbfadad4e849d4e089ec9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_BUILD_OUT_OF_SEQUENCE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8ab5748632eb40cd13a027a5f30c551844</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_BUILD_EMPTY_MODEL</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8a951705c5436e5fe2a5f50d971d528af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_BUILD_EMPTY_PREVIOUS_FRAME</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8a18ce31b56f49cadb82c2bea48279b2f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_UNSUPPORTED_FUNCTION</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8ab20baa1089fe6f35f697246b574294e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_UNUPDATED_MODEL</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8a3845b66a886bff6b5290f4880f51b666</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_INCORRECT_DATA</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8a7d5b8933a310253f86a82c15122284b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_UNKNOWN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8a72c62ead9e80b334d334fadc7bfb7b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BVHModelType</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a41f5f0e97729622fd4749b285a0fd848</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_MODEL_UNKNOWN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a41f5f0e97729622fd4749b285a0fd848aa8ddcde6ac1e82f3fbe22e7dc7fe6864</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_MODEL_TRIANGLES</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a41f5f0e97729622fd4749b285a0fd848a00ca407cf9da666862722133cd18a0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_MODEL_POINTCLOUD</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a41f5f0e97729622fd4749b285a0fd848a33b4f7676fa1247fd3a728bc672d577a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BVH_model.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/BVH/</path>
    <filename>a00273</filename>
    <includes id="a00280" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="a00272" name="BVH_internal.h" local="no" imported="no">hpp/fcl/BVH/BVH_internal.h</includes>
    <includes id="a00269" name="BV_node.h" local="no" imported="no">hpp/fcl/BV/BV_node.h</includes>
    <includes id="a00270" name="BV_splitter.h" local="no" imported="no">hpp/fcl/BVH/BV_splitter.h</includes>
    <includes id="a00268" name="BV_fitter.h" local="no" imported="no">hpp/fcl/BVH/BV_fitter.h</includes>
    <class kind="class">fcl::BVHModel</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>BVH_utility.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/BVH/</path>
    <filename>a00274</filename>
    <includes id="a00273" name="BVH_model.h" local="no" imported="no">hpp/fcl/BVH/BVH_model.h</includes>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>BVHExpand</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa43fc5b82f89c8fc8d515d5f247b73ec</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Variance3f *ucs, FCL_REAL r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BVHExpand</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af4bbc7521fb5426d1dd81d08c5366467</anchor>
      <arglist>(BVHModel&lt; OBB &gt; &amp;model, const Variance3f *ucs, FCL_REAL r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BVHExpand</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>acc0ba590fc375ba2ccc859054ee2ceb8</anchor>
      <arglist>(BVHModel&lt; RSS &gt; &amp;model, const Variance3f *ucs, FCL_REAL r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCovariance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad55c59047deea18a96d96cadd9f6cab1</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, Matrix3f &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRadiusAndOriginAndRectangleSize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a857bcfab0cc976411741f03670c8d992</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, Vec3f axis[3], Vec3f &amp;origin, FCL_REAL l[2], FCL_REAL &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getExtentAndCenter</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa4df77020e03756774c8825989e5abc3</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, Vec3f axis[3], Vec3f &amp;center, Vec3f &amp;extent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>circumCircleComputation</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6703a1a1309c383fcd59cd16d4440dba</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c, Vec3f &amp;center, FCL_REAL &amp;radius)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>maximumDistance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aba4ee9cba6ffe4eb932be7682ea5a88d</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, const Vec3f &amp;query)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>classifier.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/learning/</path>
    <filename>a00275</filename>
    <includes id="a00359" name="vec_nf.h" local="no" imported="no">hpp/fcl/math/vec_nf.h</includes>
    <class kind="struct">fcl::Item</class>
    <class kind="struct">fcl::Scaler</class>
    <class kind="struct">fcl::PredictResult</class>
    <class kind="class">fcl::SVMClassifier</class>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>Scaler&lt; N &gt;</type>
      <name>computeScaler</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af78fdd839cd1429b4b8b2806c17f08a7</anchor>
      <arglist>(const std::vector&lt; Item&lt; N &gt; &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Scaler&lt; N &gt;</type>
      <name>computeScaler</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa7704a5a44bbf10de59ca7a3853a7b74</anchor>
      <arglist>(const std::vector&lt; Vecnf&lt; N &gt; &gt; &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00276</filename>
    <includes id="a00356" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <includes id="a00280" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="a00277" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>std::size_t</type>
      <name>collide</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a27dce3f8036b99a7e550f4ede80c8bfe</anchor>
      <arglist>(const CollisionObject *o1, const CollisionObject *o2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>collide</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aaa8e9d8730a2bc89b429d6ffee8a5b61</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_data.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00277</filename>
    <includes id="a00280" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="a00275" name="classifier.h" local="no" imported="no">hpp/fcl/learning/classifier.h</includes>
    <includes id="a00327" name="nearest_neighbors.h" local="no" imported="no">hpp/fcl/knn/nearest_neighbors.h</includes>
    <includes id="a00356" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <class kind="struct">fcl::Contact</class>
    <class kind="struct">fcl::CostSource</class>
    <class kind="struct">fcl::CollisionRequest</class>
    <class kind="struct">fcl::CollisionResult</class>
    <class kind="struct">fcl::DistanceRequest</class>
    <class kind="struct">fcl::DistanceResult</class>
    <class kind="struct">fcl::ContinuousCollisionRequest</class>
    <class kind="struct">fcl::ContinuousCollisionResult</class>
    <class kind="struct">fcl::PenetrationDepthRequest</class>
    <class kind="struct">fcl::PenetrationDepthResult</class>
    <namespace>fcl</namespace>
    <member kind="enumeration">
      <type></type>
      <name>GJKSolverType</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a576bdc98c01e92cdef6f3c60617b2d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GST_LIBCCD</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a576bdc98c01e92cdef6f3c60617b2d3dafa4370b6ec1b7cad14c4509912c982a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GST_INDEP</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a576bdc98c01e92cdef6f3c60617b2d3dae1fdd48760bbeeca993df32d339d6270</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CCDMotionType</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a982b871eae7884bc1d3ac997931e0716</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCDM_TRANS</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a982b871eae7884bc1d3ac997931e0716a6deb9863f48fe864e2dd6bd5ee9c5800</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCDM_LINEAR</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a982b871eae7884bc1d3ac997931e0716a9b7d2ad283498ecc381d3b5cad50ad01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCDM_SCREW</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a982b871eae7884bc1d3ac997931e0716abd5f14ebdcd2a48541bc95031efa42d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCDM_SPLINE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a982b871eae7884bc1d3ac997931e0716adf79f3068964b1472938c079a612ba48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CCDSolverType</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a917b18048691106c9eb987f4f0452657</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCDC_NAIVE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a917b18048691106c9eb987f4f0452657a0a7d3a77b9294e857e16eabfedd5124a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCDC_CONSERVATIVE_ADVANCEMENT</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a917b18048691106c9eb987f4f0452657a804447beea3fdbd385d0ae1d55e22a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCDC_RAY_SHOOTING</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a917b18048691106c9eb987f4f0452657a728c4b1595c5f7861c1d602939cc48d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCDC_POLYNOMIAL_SOLVER</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a917b18048691106c9eb987f4f0452657a52b0464eb10a2aeea128cf0714be8ff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PenetrationDepthType</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a45e399b3702f0110193c6dcc4daac94c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PDT_TRANSLATIONAL</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a45e399b3702f0110193c6dcc4daac94ca1a87107b22e2b64ea0ee2a785e47d4f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PDT_GENERAL_EULER</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a45e399b3702f0110193c6dcc4daac94ca3b03860dbf6bf1138a5b0a7b5110c9e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PDT_GENERAL_QUAT</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a45e399b3702f0110193c6dcc4daac94cac18bede7ece61f4493203168379438f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PDT_GENERAL_EULER_BALL</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a45e399b3702f0110193c6dcc4daac94ca5269f27ced4f6b1508483efe76191a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PDT_GENERAL_QUAT_BALL</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a45e399b3702f0110193c6dcc4daac94ca3984324b7ef41c54b87496e393246ebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>KNNSolverType</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3802c9f7da9b77e9e28c59ae40cac2be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KNN_LINEAR</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3802c9f7da9b77e9e28c59ae40cac2bea28afe3482818587d124c89b5a645d2ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KNN_GNAT</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3802c9f7da9b77e9e28c59ae40cac2beaff031e96582ea91c87190f29b36b98c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KNN_SQRTAPPROX</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3802c9f7da9b77e9e28c59ae40cac2beaea075bd8717ac929de25c00b4a53fba6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_func_matrix.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00278</filename>
    <includes id="a00280" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="a00277" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <class kind="struct">fcl::CollisionFunctionMatrix</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>collision_node.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00279</filename>
    <includes id="a00349" name="traversal_node_base.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_base.h</includes>
    <includes id="a00351" name="traversal_node_bvhs.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_bvhs.h</includes>
    <includes id="a00271" name="BVH_front.h" local="no" imported="no">hpp/fcl/BVH/BVH_front.h</includes>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a87aea28dce744526b9f7ff70d058d0aa</anchor>
      <arglist>(CollisionTraversalNodeBase *node, FCL_REAL &amp;sqrDistLowerBound, BVHFrontList *front_list=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfCollide</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a60f5f230b2949d3ac2eda0c15ed9d2b9</anchor>
      <arglist>(CollisionTraversalNodeBase *node, BVHFrontList *front_list=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4c70f633b482c090cebe40694cf4245a</anchor>
      <arglist>(DistanceTraversalNodeBase *node, BVHFrontList *front_list=NULL, int qsize=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide2</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a55c3928712d722eee3e28a9530ece462</anchor>
      <arglist>(MeshCollisionTraversalNodeOBB *node, BVHFrontList *front_list=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide2</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a26bbbba4eb2acab6ac49f2a028676d9c</anchor>
      <arglist>(MeshCollisionTraversalNodeRSS *node, BVHFrontList *front_list=NULL)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collision_object.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00280</filename>
    <includes id="a00284" name="deprecated.h" local="no" imported="no">hpp/fcl/deprecated.h</includes>
    <includes id="a00257" name="AABB.h" local="no" imported="no">hpp/fcl/BV/AABB.h</includes>
    <includes id="a00348" name="math/transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="a00325" name="motion_base.h" local="no" imported="no">hpp/fcl/ccd/motion_base.h</includes>
    <class kind="class">fcl::CollisionGeometry</class>
    <class kind="class">fcl::CollisionObject</class>
    <class kind="class">fcl::ContinuousCollisionObject</class>
    <namespace>fcl</namespace>
    <member kind="enumeration">
      <type></type>
      <name>OBJECT_TYPE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7675859ca6424d6552ee6b1028f29d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_UNKNOWN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7675859ca6424d6552ee6b1028f29d7da74ae171a071b4c4ab7e9a9db289b8133</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_BVH</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7675859ca6424d6552ee6b1028f29d7daff86ba3cb45be6c2e1538ec7debff753</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_GEOM</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7675859ca6424d6552ee6b1028f29d7da8cf27e957b65b6741fe502574d0508c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_OCTREE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7675859ca6424d6552ee6b1028f29d7dad4b741ca2d99d48cbc611ecca15a088b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_COUNT</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7675859ca6424d6552ee6b1028f29d7da65f4ecf718f93ca1cf89f4d400dabc6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NODE_TYPE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_UNKNOWN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fcad3e6ca8b70b530c4d7ba1ad736440666</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_AABB</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca9857d1f72385fe4b7987ad8b6b6a5606</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_OBB</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fcae46803ef7bea97088c41ca7868fb632f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_RSS</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca564c0417a70d84d431d6d04b926ee2a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_kIOS</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fcaf575d2e12bedf42d88b4c02f6dcc4fe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_OBBRSS</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fcae06499fa86fc8bc8e405c83d7f4b5ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP16</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca334b960816082bb79fbbd65b5b5498ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP18</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca50255c29ad680d441eb6da9085de773d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP24</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fcaf154da9cd26cbd3c161d9d7481801db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_BOX</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca29bdba1e84ec5699e231d9bd0b23727a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_SPHERE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca3720e447a9e71dd98b0f34e3a8e64209</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CAPSULE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca17e66c698216b26cd58d380874337dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CONE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fcafae464caba3a63e1c891c84df6f45b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CYLINDER</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fcad98413be41320954248b24e9711d371b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CONVEX</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca78ee619a815e5c157eb829a735599f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_PLANE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fcafc44c4c46c563f822f5e9a2a0cdf635b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_HALFSPACE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca6aa503880dcca9701c780fc5b17bb3f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_TRIANGLE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fcacfa91142aa5810c8e70258cc7aa69cfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_OCTREE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca537e2a416d894d676b87cd50bf140973</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODE_COUNT</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca3e1cf1dfc3af2080ef9a90b748d49b95</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>conservative_advancement.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/ccd/</path>
    <filename>a00281</filename>
    <includes id="a00280" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="a00277" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <includes id="a00325" name="motion_base.h" local="no" imported="no">hpp/fcl/ccd/motion_base.h</includes>
    <class kind="struct">fcl::ConservativeAdvancementFunctionMatrix</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>continuous_collision.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00282</filename>
    <includes id="a00356" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <includes id="a00280" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="a00277" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>continuousCollide</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3770186ae0fd6bf0e676bf47ffe44c32</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1_beg, const Transform3f &amp;tf1_end, const CollisionGeometry *o2, const Transform3f &amp;tf2_beg, const Transform3f &amp;tf2_end, const ContinuousCollisionRequest &amp;request, ContinuousCollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>continuousCollide</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac891eb6c23cbe619acc53e160c29e4e4</anchor>
      <arglist>(const CollisionObject *o1, const Transform3f &amp;tf1_end, const CollisionObject *o2, const Transform3f &amp;tf2_end, const ContinuousCollisionRequest &amp;request, ContinuousCollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>collide</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a77c6c56744d6f144004fcdf610ee4e9a</anchor>
      <arglist>(const ContinuousCollisionObject *o1, const ContinuousCollisionObject *o2, const ContinuousCollisionRequest &amp;request, ContinuousCollisionResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>data_types.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00283</filename>
    <class kind="class">fcl::Triangle</class>
    <namespace>fcl</namespace>
    <member kind="typedef">
      <type>double</type>
      <name>FCL_REAL</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac57822493c39349dd9b9c26dfee691fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::uint64_t</type>
      <name>FCL_INT64</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a82cc45a5d3f425aba17a129e25d89447</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::int64_t</type>
      <name>FCL_UINT64</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1d5c928a159c3ab661aee0edaa03579f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::uint32_t</type>
      <name>FCL_UINT32</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a45494024e4e17b498077b911e1acf63b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::int32_t</type>
      <name>FCL_INT32</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abc0058b4a2dfd7bf99d084e914d2d274</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>deprecated.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00284</filename>
    <member kind="define">
      <type>#define</type>
      <name>FCL_DEPRECATED</name>
      <anchorfile>a00284.html</anchorfile>
      <anchor>ac32014a46faca53ba83c8abca7da0bfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>distance.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00285</filename>
    <includes id="a00280" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="a00277" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae384014e10430c6573a5aecaf1847793</anchor>
      <arglist>(const CollisionObject *o1, const CollisionObject *o2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a914a2dabe09a39c4c045b81372e52366</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>include/hpp/fcl/distance_func_matrix.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00286</filename>
    <includes id="a00280" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="a00277" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <class kind="struct">fcl::DistanceFunctionMatrix</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>src/distance_func_matrix.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/src/</path>
    <filename>a00287</filename>
    <includes id="a00277" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7204073b3c765d0571103f199a3cef41</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>ShapeShapeCollide</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af6272db36bc7d7e1cca43ccec93c1587</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>doc.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00288</filename>
  </compound>
  <compound kind="file">
    <name>exception.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00289</filename>
    <class kind="class">fcl::Exception</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>fwd.hh</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00290</filename>
    <namespace>fcl</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionObject &gt;</type>
      <name>CollisionObjectPtr_t</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa9ed330a40f0ee066fdbc4468012a1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const CollisionObject &gt;</type>
      <name>CollisionObjectConstPtr_t</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a35993425c6bff13890b33610175fdcf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionGeometry &gt;</type>
      <name>CollisionGeometryPtr_t</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>acfe363ed659c6301c31341f567d4e228</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const CollisionGeometry &gt;</type>
      <name>CollisionGeometryConstPtr_t</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad9220e8f985d7730c2a6e1be7f1e4e81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometric_shape_to_BVH_model.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/shape/</path>
    <filename>a00291</filename>
    <includes id="a00292" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="a00273" name="BVH_model.h" local="no" imported="no">hpp/fcl/BVH/BVH_model.h</includes>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5e9ecef9d8e077d35075dd6e4f42e673</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Box &amp;shape, const Transform3f &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>afe7bf996b9a11d8be1bfc29570142102</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Sphere &amp;shape, const Transform3f &amp;pose, unsigned int seg, unsigned int ring)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a91460f08ca50866dbbe457563a9d97db</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Sphere &amp;shape, const Transform3f &amp;pose, unsigned int n_faces_for_unit_sphere)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a363afd7342c7665ed615982d2294f92f</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cylinder &amp;shape, const Transform3f &amp;pose, unsigned int tot, unsigned int h_num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>afddac40cf32b331f2b9e123d1221c30e</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cylinder &amp;shape, const Transform3f &amp;pose, unsigned int tot_for_unit_cylinder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab024ccd9af2c9eb5d71d5d839d413f06</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cone &amp;shape, const Transform3f &amp;pose, unsigned int tot, unsigned int h_num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae9fd921ffeb0efb0cde1c234994983ed</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cone &amp;shape, const Transform3f &amp;pose, unsigned int tot_for_unit_cone)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometric_shapes.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/shape/</path>
    <filename>a00292</filename>
    <includes id="a00280" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <includes id="a00356" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <class kind="class">fcl::ShapeBase</class>
    <class kind="class">fcl::TriangleP</class>
    <class kind="class">fcl::Box</class>
    <class kind="class">fcl::Sphere</class>
    <class kind="class">fcl::Capsule</class>
    <class kind="class">fcl::Cone</class>
    <class kind="class">fcl::Cylinder</class>
    <class kind="class">fcl::Convex</class>
    <class kind="struct">fcl::Convex::Edge</class>
    <class kind="class">fcl::Halfspace</class>
    <class kind="class">fcl::Plane</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>geometric_shapes_utility.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/shape/</path>
    <filename>a00293</filename>
    <includes id="a00292" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="a00267" name="BV.h" local="no" imported="no">hpp/fcl/BV/BV.h</includes>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>computeBV</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3de1a45f6c3e5dddda4a8d28369037b6</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf, BV &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Box &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af000846d91fad2fdaa06ead7bb2231e8</anchor>
      <arglist>(const Box &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Sphere &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7839677c14b4477ca0e282d710993b83</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Capsule &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4066ce32979ab084f5cdc80332b90884</anchor>
      <arglist>(const Capsule &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Cone &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a635f470120fc8f1e8eff71418b228966</anchor>
      <arglist>(const Cone &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Cylinder &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac4a86679f6664d275c7287b4c4c86e76</anchor>
      <arglist>(const Cylinder &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Convex &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a90fe793b44a21f2d69e364d13ed720c6</anchor>
      <arglist>(const Convex &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, TriangleP &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2981fcabd0a93917be8c9743588aff00</anchor>
      <arglist>(const TriangleP &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Halfspace &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a68d2665871daf870ca8494a9ee8ae912</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Plane &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab8bc8d5f81efc60bcafddc6a013ef8ca</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Box &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a90955fcaedd6498c01a97a4e67f78277</anchor>
      <arglist>(const Box &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Sphere &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6d82eac9c4a153163713d678016a7291</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Capsule &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aeb6bfcad0cf3fe0ab44caccd96c4c5cb</anchor>
      <arglist>(const Capsule &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Cone &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a35d713542992583c682b58ec16a031ee</anchor>
      <arglist>(const Cone &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Cylinder &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aef530c2a973c22344aec02121dc40995</anchor>
      <arglist>(const Cylinder &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Convex &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a743b1c50dc06325f0f89f7b9a559a142</anchor>
      <arglist>(const Convex &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Halfspace &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab2720e977a10b9293f9e76f41d8cb92f</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; RSS, Halfspace &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1aee48a389aa30ad2826bef838c748e2</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBBRSS, Halfspace &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abd624da40b744194a4cb4e25d7717dc9</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; kIOS, Halfspace &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7f4eca0e363cbc211c70be6b7c6cd9b1</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 16 &gt;, Halfspace &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a334f81ab857234db303759d27e1c28ae</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 16 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 18 &gt;, Halfspace &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a62336d45b1607d97109346c4d2b4e379</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 18 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 24 &gt;, Halfspace &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5b0f94161541dd89b6c9c76955072530</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 24 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Plane &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a697c4006166ebc99785689f1c11595de</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; RSS, Plane &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac63cff41b2031f6cdc31059e62448f30</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBBRSS, Plane &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae862264914a6260c82654fd726495e5c</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; kIOS, Plane &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4fdb4f8dc4304dda5dd53217a8d4c448</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 16 &gt;, Plane &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a13120223ecfcb607f23788e86a6e33df</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 16 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 18 &gt;, Plane &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aacc726b6135dd264f33001884074d9fe</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 18 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 24 &gt;, Plane &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a800a0306e62900d93b4f6c4a65dd3694</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 24 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a91f35a61c570dc475db5c3023c4ae9f0</anchor>
      <arglist>(const AABB &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a0203bafc50b15adeef4dd737c1a3ca29</anchor>
      <arglist>(const OBB &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ada6ad3577852a6c80434b54cc7782002</anchor>
      <arglist>(const OBBRSS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a928faab916bbd72c9cdae13be3ee0ec9</anchor>
      <arglist>(const kIOS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a021a20ab65508a0e2d5cf071083d8fc8</anchor>
      <arglist>(const RSS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5710a1fffeb4090919fb6437af926d82</anchor>
      <arglist>(const KDOP&lt; 16 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a185955f012a82631ede68b9fe0be3f4a</anchor>
      <arglist>(const KDOP&lt; 18 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4afe3ec290f981dae9e17ea16ec8a7b6</anchor>
      <arglist>(const KDOP&lt; 24 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a423c439c23cdb224541357f6f9231879</anchor>
      <arglist>(const AABB &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1e74186e05e92c2392abb24c88455e72</anchor>
      <arglist>(const OBB &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad005b3f4caed84758d68b267181f195b</anchor>
      <arglist>(const OBBRSS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abca2466395aaa3f8ef59f721f669f89b</anchor>
      <arglist>(const kIOS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4315ea17d8114d367929cd215f8d94ab</anchor>
      <arglist>(const RSS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a8c6a193a2f0770883f61f675f3b80675</anchor>
      <arglist>(const KDOP&lt; 16 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae7064477ba73a5b7e00e6d46198de7ba</anchor>
      <arglist>(const KDOP&lt; 18 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abbdf7492e8e72275de31058abd7247a3</anchor>
      <arglist>(const KDOP&lt; 24 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>Halfspace</type>
      <name>transform</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>afaa2e1ade71bf933334e5929cd7e67c5</anchor>
      <arglist>(const Halfspace &amp;a, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>Plane</type>
      <name>transform</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac68cf9c6bef73c3eea558474677e264f</anchor>
      <arglist>(const Plane &amp;a, const Transform3f &amp;tf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gjk.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/narrowphase/</path>
    <filename>a00294</filename>
    <includes id="a00292" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="a00348" name="math/transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <class kind="struct">fcl::details::MinkowskiDiff</class>
    <class kind="struct">fcl::details::GJK</class>
    <class kind="struct">fcl::details::GJK::SimplexV</class>
    <class kind="struct">fcl::details::GJK::Simplex</class>
    <class kind="struct">fcl::details::EPA</class>
    <namespace>fcl</namespace>
    <namespace>fcl::details</namespace>
    <member kind="function">
      <type>Vec3f</type>
      <name>getSupport</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a597dd832b4a930a1f5f2e331e77757aa</anchor>
      <arglist>(const ShapeBase *shape, const Vec3f &amp;dir)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>EPA_MAX_FACES</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ab6cfb7904637934268b62ac58951875a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>EPA_MAX_VERTICES</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ac82a37036b2715dd1889be9320baae31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const FCL_REAL</type>
      <name>EPA_EPS</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a39fd2253d7b6349d08317d369fc3a1b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>EPA_MAX_ITERATIONS</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ae37686876739c9d38e647d736515eff9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gjk_libccd.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/narrowphase/</path>
    <filename>a00295</filename>
    <includes id="a00292" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="a00348" name="math/transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <class kind="class">fcl::details::GJKInitializer</class>
    <class kind="class">fcl::details::GJKInitializer&lt; Cylinder &gt;</class>
    <class kind="class">fcl::details::GJKInitializer&lt; Sphere &gt;</class>
    <class kind="class">fcl::details::GJKInitializer&lt; Box &gt;</class>
    <class kind="class">fcl::details::GJKInitializer&lt; Capsule &gt;</class>
    <class kind="class">fcl::details::GJKInitializer&lt; Cone &gt;</class>
    <class kind="class">fcl::details::GJKInitializer&lt; Convex &gt;</class>
    <namespace>fcl</namespace>
    <namespace>fcl::details</namespace>
    <member kind="typedef">
      <type>void(*</type>
      <name>GJKSupportFunction</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a17fdf2ac049e66548b58b0deb38bd40a</anchor>
      <arglist>)(const void *obj, const ccd_vec3_t *dir_, ccd_vec3_t *v)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>GJKCenterFunction</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aaace8c7210be21506a5b4fd287fe2de1</anchor>
      <arglist>)(const void *obj, ccd_vec3_t *c)</arglist>
    </member>
    <member kind="function">
      <type>GJKSupportFunction</type>
      <name>triGetSupportFunction</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a2f9153abbdc06cc81be8fddfcd8fa295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GJKCenterFunction</type>
      <name>triGetCenterFunction</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a25c74de98dd777fe8a453024b7c4f753</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>triCreateGJKObject</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a02feb75d25ac5ad5667d365481c7dc69</anchor>
      <arglist>(const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>triCreateGJKObject</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a7ccdb025590b45659adf640d870d5599</anchor>
      <arglist>(const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triDeleteGJKObject</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a529d19ddd2880640eea5cd947c61ef81</anchor>
      <arglist>(void *o)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GJKCollide</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a9b76d6a5386ceede44c018808de66dbd</anchor>
      <arglist>(void *obj1, ccd_support_fn supp1, ccd_center_fn cen1, void *obj2, ccd_support_fn supp2, ccd_center_fn cen2, unsigned int max_iterations, FCL_REAL tolerance, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GJKDistance</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a286998a94546d55eca05b8631b9c1076</anchor>
      <arglist>(void *obj1, ccd_support_fn supp1, void *obj2, ccd_support_fn supp2, unsigned int max_iterations, FCL_REAL tolerance, FCL_REAL *dist, Vec3f *p1, Vec3f *p2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>greedy_kcenters.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/knn/</path>
    <filename>a00296</filename>
    <includes id="a00339" name="sampling.h" local="no" imported="no">hpp/fcl/math/sampling.h</includes>
    <class kind="class">fcl::GreedyKCenters</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>hash.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/broadphase/</path>
    <filename>a00297</filename>
    <class kind="class">fcl::SimpleHashTable</class>
    <class kind="class">fcl::unordered_map_hash_table</class>
    <class kind="class">fcl::SparseHashTable</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>hierarchy_tree.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/broadphase/</path>
    <filename>a00298</filename>
    <includes id="a00257" name="AABB.h" local="no" imported="no">hpp/fcl/BV/AABB.h</includes>
    <includes id="a00323" name="morton.h" local="no" imported="no">hpp/fcl/broadphase/morton.h</includes>
    <includes id="a00299" name="hierarchy_tree.hxx" local="no" imported="no">hpp/fcl/broadphase/hierarchy_tree.hxx</includes>
    <class kind="struct">fcl::NodeBase</class>
    <class kind="class">fcl::HierarchyTree</class>
    <class kind="struct">fcl::implementation_array::NodeBase</class>
    <class kind="struct">fcl::implementation_array::nodeBaseLess</class>
    <class kind="class">fcl::implementation_array::HierarchyTree</class>
    <namespace>fcl</namespace>
    <namespace>fcl::implementation_array</namespace>
    <member kind="function">
      <type>bool</type>
      <name>nodeBaseLess</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a8c09d349fc114bf7a1aed8e4d9344cfa</anchor>
      <arglist>(NodeBase&lt; BV &gt; *a, NodeBase&lt; BV &gt; *b, int d)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>select</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4fd74bef5e609b8892c011ce03aed67f</anchor>
      <arglist>(const NodeBase&lt; BV &gt; &amp;query, const NodeBase&lt; BV &gt; &amp;node1, const NodeBase&lt; BV &gt; &amp;node2)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>select</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abd87e49902e10a99c61ed324f2c1cfda</anchor>
      <arglist>(const NodeBase&lt; AABB &gt; &amp;node, const NodeBase&lt; AABB &gt; &amp;node1, const NodeBase&lt; AABB &gt; &amp;node2)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>select</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a0847279480c0058ba09be509a9a41cdb</anchor>
      <arglist>(const BV &amp;query, const NodeBase&lt; BV &gt; &amp;node1, const NodeBase&lt; BV &gt; &amp;node2)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>select</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7be17a630a9ae18ff9f65cfe18472fd5</anchor>
      <arglist>(const AABB &amp;query, const NodeBase&lt; AABB &gt; &amp;node1, const NodeBase&lt; AABB &gt; &amp;node2)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>select</name>
      <anchorfile>a00364.html</anchorfile>
      <anchor>a4dc827fe3a643430daafdb02a1d1bf62</anchor>
      <arglist>(size_t query, size_t node1, size_t node2, NodeBase&lt; BV &gt; *nodes)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>select</name>
      <anchorfile>a00364.html</anchorfile>
      <anchor>a66446f70c87a0f9d22c0e6ab6a2bdf97</anchor>
      <arglist>(size_t query, size_t node1, size_t node2, NodeBase&lt; AABB &gt; *nodes)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>select</name>
      <anchorfile>a00364.html</anchorfile>
      <anchor>a26ccbb0f86e61e34bfb983169241d14a</anchor>
      <arglist>(const BV &amp;query, size_t node1, size_t node2, NodeBase&lt; BV &gt; *nodes)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>select</name>
      <anchorfile>a00364.html</anchorfile>
      <anchor>a7413c52220f7241a8b74c22896dc7e20</anchor>
      <arglist>(const AABB &amp;query, size_t node1, size_t node2, NodeBase&lt; AABB &gt; *nodes)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hierarchy_tree.hxx</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/broadphase/</path>
    <filename>a00299</filename>
    <namespace>fcl</namespace>
    <namespace>fcl::implementation_array</namespace>
  </compound>
  <compound kind="file">
    <name>interpolation.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/ccd/interpolation/</path>
    <filename>a00300</filename>
    <includes id="a00283" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <class kind="class">fcl::Interpolation</class>
    <namespace>fcl</namespace>
    <member kind="enumeration">
      <type></type>
      <name>InterpolationType</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a0b3cc7d2ae5307e1ed2d4bb16c767473</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINEAR</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a0b3cc7d2ae5307e1ed2d4bb16c767473a8165bc79536bbe80ededc60ba27f65f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STANDARD</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a0b3cc7d2ae5307e1ed2d4bb16c767473ad05cc1afb9a6bfd9fc83c8af0298c6ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>interpolation_factory.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/ccd/interpolation/</path>
    <filename>a00301</filename>
    <includes id="a00283" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <includes id="a00300" name="interpolation.h" local="no" imported="no">hpp/fcl/ccd/interpolation/interpolation.h</includes>
    <class kind="class">fcl::InterpolationFactory</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>interpolation_linear.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/ccd/interpolation/</path>
    <filename>a00302</filename>
    <includes id="a00283" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <includes id="a00300" name="interpolation.h" local="no" imported="no">hpp/fcl/ccd/interpolation/interpolation.h</includes>
    <class kind="class">fcl::InterpolationLinear</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>intersect.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00303</filename>
    <includes id="a00348" name="math/transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <class kind="class">fcl::PolySolver</class>
    <class kind="class">fcl::Intersect</class>
    <class kind="class">fcl::Project</class>
    <class kind="struct">fcl::Project::ProjectResult</class>
    <class kind="class">fcl::TriangleDistance</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>interval-matrix.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/eigen/plugins/ccd/</path>
    <filename>a00304</filename>
  </compound>
  <compound kind="file">
    <name>interval-vector.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/eigen/plugins/ccd/</path>
    <filename>a00305</filename>
    <member kind="function">
      <type>IVector3 &amp;</type>
      <name>operator=</name>
      <anchorfile>a00305.html</anchorfile>
      <anchor>a2f4bd1ec7ee6608a92cb61abce0ad57e</anchor>
      <arglist>(const FclType&lt; Derived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>interval.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/ccd/</path>
    <filename>a00306</filename>
    <includes id="a00283" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <class kind="struct">fcl::Interval</class>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>Interval</type>
      <name>bound</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af76662bdf034981d8054d884e304b75d</anchor>
      <arglist>(const Interval &amp;i, FCL_REAL v)</arglist>
    </member>
    <member kind="function">
      <type>Interval</type>
      <name>bound</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>acabea682e14802caaebabc1eac20f315</anchor>
      <arglist>(const Interval &amp;i, const Interval &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>interval_matrix.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/ccd/</path>
    <filename>a00307</filename>
    <includes id="a00306" name="interval.h" local="no" imported="no">hpp/fcl/ccd/interval.h</includes>
    <includes id="a00309" name="interval_vector.h" local="no" imported="no">hpp/fcl/ccd/interval_vector.h</includes>
    <includes id="a00319" name="matrix_3f.h" local="no" imported="no">hpp/fcl/math/matrix_3f.h</includes>
    <class kind="struct">fcl::IMatrix3</class>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>IMatrix3</type>
      <name>rotationConstrain</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a09253742e80810fe6cc081605bb33c89</anchor>
      <arglist>(const IMatrix3 &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>interval_tree.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/broadphase/</path>
    <filename>a00308</filename>
    <class kind="struct">fcl::SimpleInterval</class>
    <class kind="class">fcl::IntervalTreeNode</class>
    <class kind="class">fcl::IntervalTree</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>interval_vector.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/ccd/</path>
    <filename>a00309</filename>
    <includes id="a00306" name="interval.h" local="no" imported="no">hpp/fcl/ccd/interval.h</includes>
    <includes id="a00356" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <includes id="a00305" name="interval-vector.h" local="no" imported="no">hpp/fcl/eigen/plugins/ccd/interval-vector.h</includes>
    <class kind="struct">fcl::IVector3</class>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>IVector3</type>
      <name>bound</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1d1f09a63f6acde781614b038080a372</anchor>
      <arglist>(const IVector3 &amp;i, const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>IVector3</type>
      <name>bound</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a8010c8a3b39db1af989aa3ecadf46742</anchor>
      <arglist>(const IVector3 &amp;i, const IVector3 &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>joint.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/articulated_model/</path>
    <filename>a00310</filename>
    <includes id="a00348" name="math/transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="a00283" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <class kind="class">fcl::Joint</class>
    <class kind="class">fcl::PrismaticJoint</class>
    <class kind="class">fcl::RevoluteJoint</class>
    <class kind="class">fcl::BallEulerJoint</class>
    <namespace>fcl</namespace>
    <member kind="enumeration">
      <type></type>
      <name>JointType</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3cb1bad701422e828e08ada35abad277</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JT_UNKNOWN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3cb1bad701422e828e08ada35abad277abc2718dc63b25621cf29594f6bfd6932</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JT_PRISMATIC</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3cb1bad701422e828e08ada35abad277a86e2e88cb44c8d92c641dd8718731489</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JT_REVOLUTE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3cb1bad701422e828e08ada35abad277a0f4f1a93a15274103345f8d5e5ef7aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JT_BALLEULER</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3cb1bad701422e828e08ada35abad277ad20d2a4b5c09f0bdd80db421cbabca46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>joint_config.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/articulated_model/</path>
    <filename>a00311</filename>
    <includes id="a00283" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <class kind="class">fcl::JointConfig</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>kDOP.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>a00312</filename>
    <includes id="a00356" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <class kind="class">fcl::KDOP</class>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>KDOP&lt; N &gt;</type>
      <name>translate</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af9790731e383ad860cb9ff3172128e89</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kIOS.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>a00313</filename>
    <includes id="a00332" name="include/hpp/fcl/BV/OBB.h" local="no" imported="no">hpp/fcl/BV/OBB.h</includes>
    <class kind="class">fcl::kIOS</class>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>kIOS</type>
      <name>translate</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac97c8837e05789615d98567b61388318</anchor>
      <arglist>(const kIOS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad99f0f296c36453d90baec0cd211b687</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a495d45bcfdb0d3db0288bd2932ded7af</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>link.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/articulated_model/</path>
    <filename>a00315</filename>
    <includes id="a00283" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <includes id="a00280" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <class kind="class">fcl::Link</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>eigen/math_details.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/eigen/</path>
    <filename>a00316</filename>
    <class kind="struct">fcl::details::eigen_wrapper_v3</class>
    <class kind="struct">fcl::details::internal::assign</class>
    <class kind="struct">fcl::details::internal::assign&lt; Derived, 3 &gt;</class>
    <class kind="struct">fcl::details::internal::assign&lt; Derived, 4 &gt;</class>
    <class kind="struct">fcl::details::eigen_wrapper_v4</class>
    <class kind="struct">fcl::details::eigen_v3</class>
    <class kind="struct">fcl::details::eigen_wrapper_m3</class>
    <class kind="struct">fcl::details::eigen_m3</class>
    <namespace>fcl</namespace>
    <namespace>fcl::details</namespace>
    <namespace>fcl::details::internal</namespace>
    <member kind="typedef">
      <type>T</type>
      <name>meta_type</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a9e476a4b899f1055d529256ed2652fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; T, 4, 1 &gt;</type>
      <name>vector_type</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a50e2257595bff76e637305b1bd80b391</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_wrapper_v3&lt; T &gt;</type>
      <name>cross_prod</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a2c3b56a3d8831c6ab108bb54e86e66cf</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;l, const eigen_wrapper_v3&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>dot_prod3</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a121b72f343efafdaf118c797e62b25fe</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;l, const eigen_wrapper_v3&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_wrapper_v3&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a057c9d54caefcb7b4899083fa8e31f47</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;x, const eigen_wrapper_v3&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_wrapper_v3&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>afa1548e8965f6fff3afec46422f7df0a</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;x, const eigen_wrapper_v3&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_wrapper_v3&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a5765e7f82cf732975f7f8c5f5b97916d</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>equal</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a79e65a671e1cf19a97e80b767e9d163b</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;x, const eigen_wrapper_v3&lt; T &gt; &amp;y, T epsilon)</arglist>
    </member>
    <member kind="function">
      <type>struct fcl::details::eigen_wrapper_v4</type>
      <name>__attribute__</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a33d5f88dbc38695cd6063ac31740a76d</anchor>
      <arglist>((aligned))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_v4</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>acc3af366e708b0251bf9684ed8111ddd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_v4</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>ac3d0d19f90dbc6dd6ca84f80442d3a3e</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_v4</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>aec3a3a4e80c89c4c5cae3e2e1f6aa773</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_v4</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a1fa277287a8818d7e0b592c556ad33cc</anchor>
      <arglist>(T *x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_v4</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a04406838321ebadb8495b77d896f694c</anchor>
      <arglist>(T x, T y, T z)</arglist>
    </member>
    <member kind="function">
      <type>vector_type::template FixedSegmentReturnType&lt; 3 &gt;::Type</type>
      <name>d</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a93363880d203d4b32cf7680695173d65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a962bc54b8af88d404765cf553ce9ca1c</anchor>
      <arglist>(T x, T y, T z, T w=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a5490be67d508e113fedca26b0b81761c</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>abcdb1512395327f8236a4f4a4d4ff648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>ubound</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a0e51d894bb6a35bf568f91a4362bd75f</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>lbound</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a9af8fa856a2444d25bbabed701d4a1f2</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a9ace7ed0f512c31bf6db2190c35ff8fb</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a1ad6e6b278f6a111051d08baddaa1dcc</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>aeaa3b749e13482509ba78c8b1f92d9c5</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>aa14e3577d2cceb84f71d1950a64dab34</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a198e951eaa8400d0d401b2bc86723328</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a27d14e023c39c313d898267be6162e0d</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>afc03694df61617bc562871223c9f5ff0</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>aa43357f97835d7b14087639decc39257</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a54a98efd5ba1a0523ef6af69f79e287b</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a6ed2a7d022e894a81b947cdb9f228139</anchor>
      <arglist>(T t) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a8a76ff1e7e9f4b5c74571a99691b4752</anchor>
      <arglist>(T t) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a477aad808cf4b721febdec4fd66c6671</anchor>
      <arglist>(T t) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a92d47dd61bef6e4f512821bc94e65248</anchor>
      <arglist>(T t) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a3dc534cc8eeff92969ae64068a84a5e0</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a10b4061e0b4e6ca8ea731e4b5e3c4793</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a09a7cd1e22cf5a77952f25254ec01688</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a0ad8507d7d9f4385663589b12e02f467</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>a236af4fdc3e88b7c27621e1f52610045</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_wrapper_v4&lt; T &gt;</type>
      <name>cross_prod</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a6c32afee8c68595ae430691640cbe872</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;l, const eigen_wrapper_v4&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>dot_prod3</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ac71736a745d97222481f9032e70d6c50</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;l, const eigen_wrapper_v4&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_wrapper_v4&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a5b15b06cd39ee7c1927f5542a7fded73</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;x, const eigen_wrapper_v4&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_wrapper_v4&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a1ef16a4c661c4f24a0ec12185bd8f9ff</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;x, const eigen_wrapper_v4&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_wrapper_v4&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>acc64d54900e398c5b570a2e9f74a5724</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>equal</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a60059275e4bb616f86b68676d0885ab5</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;x, const eigen_wrapper_v4&lt; T &gt; &amp;y, T epsilon)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_v3&lt; T &gt;</type>
      <name>cross_prod</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a005b3e425aa8b50c784d392d25973acd</anchor>
      <arglist>(const eigen_v3&lt; T &gt; &amp;l, const eigen_v3&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>dot_prod3</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a931da0da9dc02e96aa003a29b91bd88d</anchor>
      <arglist>(const eigen_v3&lt; T &gt; &amp;l, const eigen_v3&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_v3&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a34b8f37995a200b7393c2f46eba4a48f</anchor>
      <arglist>(const eigen_v3&lt; T &gt; &amp;x, const eigen_v3&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_v3&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a9f219c68cf49d7e0e0728bd937eaf68c</anchor>
      <arglist>(const eigen_v3&lt; T &gt; &amp;x, const eigen_v3&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_v3&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a8551267ce308a92c656f7a3e4f3e2ce2</anchor>
      <arglist>(const eigen_v3&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>equal</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a5be62a2738ead01c8fc1b86e5fc8760f</anchor>
      <arglist>(const eigen_v3&lt; T &gt; &amp;x, const eigen_v3&lt; T &gt; &amp;y, T epsilon)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ae32664c4a13e5f5e2be9e66a8950dd13</anchor>
      <arglist>(const eigen_wrapper_m3&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt;</type>
      <name>transpose</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a6e2dfdba4162c44751156d60bc6f16ce</anchor>
      <arglist>(const eigen_wrapper_m3&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt;</type>
      <name>inverse</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a8ac9c40361ef55934ac54bbc6795f971</anchor>
      <arglist>(const eigen_wrapper_m3&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>eigen_m3&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>acc82a72e5075bdf5688479a2f1268f20</anchor>
      <arglist>(const eigen_m3&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>eigen_m3&lt; T &gt;</type>
      <name>transpose</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a8348bd6a95d4cce7682e3238f8e947ad</anchor>
      <arglist>(const eigen_m3&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>eigen_m3&lt; T &gt;</type>
      <name>inverse</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a1570c90a7b3cdb56bc7221b410ad5f77</anchor>
      <arglist>(const eigen_m3&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="variable">
      <type>vector_type</type>
      <name>v</name>
      <anchorfile>a00316.html</anchorfile>
      <anchor>ad4e1abd5d28fda7717df91543c04abb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>fcl::details::eigen_v3</type>
      <name>__attribute__</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a7332223d7388d76e64003ee80ee17f22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>math/math_details.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/math/</path>
    <filename>a00317</filename>
    <class kind="struct">fcl::details::Vec3Data</class>
    <class kind="struct">fcl::details::Matrix3Data</class>
    <namespace>fcl</namespace>
    <namespace>fcl::details</namespace>
    <member kind="function" static="yes">
      <type>static Vec3Data&lt; T &gt;</type>
      <name>cross_prod</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a3c1f307e209077461101ef6f7965b6d2</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;l, const Vec3Data&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>dot_prod3</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aaac6564fefbdb96e73b0ebeb7aba54d6</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;l, const Vec3Data&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3Data&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a453c5272251814cb0b6903255f1d68f3</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;x, const Vec3Data&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3Data&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a585675f632eb8dffd3724d5603feaf18</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;x, const Vec3Data&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3Data&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a541f25c4116bdaf3d357c8d74dfb9bb3</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>equal</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ae764ebcbf530870e391865be893d4ea2</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;x, const Vec3Data&lt; T &gt; &amp;y, T epsilon)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a7be9449f48b36a2cd441a718e23e85de</anchor>
      <arglist>(const Matrix3Data&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt;</type>
      <name>transpose</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a45927e83b549281b3dea28d3a53095ac</anchor>
      <arglist>(const Matrix3Data&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt;</type>
      <name>inverse</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a5a12459c9a746db60d17214eef92267c</anchor>
      <arglist>(const Matrix3Data&lt; T &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>math_simd_details.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/simd/</path>
    <filename>a00318</filename>
    <includes id="a00283" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <class kind="struct">fcl::details::sse_meta_f4</class>
    <class kind="struct">fcl::details::sse_meta_d4</class>
    <class kind="struct">fcl::details::sse_meta_f12</class>
    <class kind="struct">fcl::details::sse_meta_f16</class>
    <namespace>fcl</namespace>
    <namespace>fcl::details</namespace>
    <member kind="define">
      <type>#define</type>
      <name>vec_splat</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ad395e202663784fd978a502ccb5e4645</anchor>
      <arglist>(a, e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>vec_splatd</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a00396fc59efaeeb4f2084d84d23e2108</anchor>
      <arglist>(a, e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_mm_ror_ps</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a78503dd17e16857646aed5c22ae755ea</anchor>
      <arglist>(x, e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_mm_rol_ps</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aa0501951c27dbb01f3df321f69558da8</anchor>
      <arglist>(x, e)</arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>meta_type</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a9e476a4b899f1055d529256ed2652fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>vec_sel</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a9e9edcf730777b55386cf9794e77f612</anchor>
      <arglist>(__m128 a, __m128 b, __m128 mask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>vec_sel</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aa5f0d4ebd8363d9830d92a36f7e44d69</anchor>
      <arglist>(__m128 a, __m128 b, const unsigned int *mask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>vec_sel</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a94ae49a0c30dae362ea478871546353e</anchor>
      <arglist>(__m128 a, __m128 b, unsigned int mask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>newtonraphson_rsqrt4</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a4a71acef38873fd9ac344167be9310d7</anchor>
      <arglist>(const __m128 v)</arglist>
    </member>
    <member kind="function">
      <type>struct fcl::details::sse_meta_f4</type>
      <name>__attribute__</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aa35e49760613758f60fae7f0c058c28a</anchor>
      <arglist>((aligned(16)))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_f4</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a759066d58c20f92dfe25f049788e2732</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_f4</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ae2f2133adfbcfd01cddf5d25068fbf85</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_f4</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a6bc51a1ea4a75fe78bbe43e89fe21f50</anchor>
      <arglist>(float *px)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_f4</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ad982b1735d3364f36534e7d0ece9bfcb</anchor>
      <arglist>(__m128 x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_f4</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ae2483b010fe8cf47802296545e6ac397</anchor>
      <arglist>(float x, float y, float z, float w=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ab5e2aa927f176199129da527905a0cd8</anchor>
      <arglist>(float x, float y, float z, float w=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a8fc91cfac4387be9cf9c36c57cae14a1</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a1e71ecd222301040a1dba4f271fccf0e</anchor>
      <arglist>(__m128 x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>afa9d5f860209738e703838a4f498e9ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>ubound</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a9fcc904f9d595548706ec32c3de355ff</anchor>
      <arglist>(const sse_meta_f4 &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>lbound</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a0a02ca843c4feab6c6100c3d2981da80</anchor>
      <arglist>(const sse_meta_f4 &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new[]</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a7f684aa236d80666c820cfe7ed0c3ab9</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete[]</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a523cdc4b251e66883d2d1bf72361ce6f</anchor>
      <arglist>(void *x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator[]</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a6911417c99fe810af969354ea3dffa4c</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator+</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a3d4e4b0f3991637b50f48214508c98b2</anchor>
      <arglist>(const sse_meta_f4 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator-</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ad61375b35d16d3163bd87b2e6ce0080c</anchor>
      <arglist>(const sse_meta_f4 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator*</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ad0a763fee1f964e6d94365843e518fed</anchor>
      <arglist>(const sse_meta_f4 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator/</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a5841e00fb3de6a561a86b915b534b322</anchor>
      <arglist>(const sse_meta_f4 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ac2e1efd63254555626521768d1717116</anchor>
      <arglist>(const sse_meta_f4 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a074bcab2f22e84c14517d6b1230561eb</anchor>
      <arglist>(const sse_meta_f4 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a396730bb70ecd244124e709a46d19d4b</anchor>
      <arglist>(const sse_meta_f4 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ad119070e589731ed09707a4a7aef6cad</anchor>
      <arglist>(const sse_meta_f4 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator+</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ae7c03237d8313687986e88f3031dc9b5</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator-</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a38aa515cf03fb4c7eb7301d18849c016</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator*</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aba63472b24cc7fa59edf1f7ad36c8d36</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator/</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a40490520784504bc740ae73792dfd13d</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aebb46299e0080ae3454a83902c278de4</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a293ba58e2d177c7d5a1534b4686a9bf7</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ad7f8a3cf388db8a7cf5f5b7ec6c79e4d</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ae455dd58a93bfbfdc5a3605e520a6bc1</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator-</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a11ff6d2a601aa8950306f4d654042c49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_d4</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a9b39ac1b031fba54fb4f90d1196a4fb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_d4</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a518f21aec379c1e8df398c1eb62645d4</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_d4</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a7d3dbdd686a5a67710c694e7d8cf19b7</anchor>
      <arglist>(double *px)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_d4</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a6081e81b45cc8565d0f9fab31ea677fc</anchor>
      <arglist>(__m128d x, __m128d y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_d4</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a0d09deb63d4a20822a7232f07e54d449</anchor>
      <arglist>(double x, double y, double z, double w=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>aa62cff1d975ccf21da48c9868ecd7765</anchor>
      <arglist>(double x, double y, double z, double w=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a222ba1af378b0d20b24a8575c1bc0d0b</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ac9a908d4784cd4d3747b34adcb86aba3</anchor>
      <arglist>(__m128d x, __m128d y)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>ubound</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a0490eaac9eb7a9600dd63449a92892bb</anchor>
      <arglist>(const sse_meta_d4 &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>lbound</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ae1fad4ab3ceaeeacb3a3ac8dcbcb2dac</anchor>
      <arglist>(const sse_meta_d4 &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4</type>
      <name>operator+</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a55f594912bfa84d3b9d18bd904d82005</anchor>
      <arglist>(const sse_meta_d4 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4</type>
      <name>operator-</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a7d4660104b5f22b344ba14cb4c8508e6</anchor>
      <arglist>(const sse_meta_d4 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4</type>
      <name>operator*</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a3f4e6b3978f21206e58be09bf36eedf2</anchor>
      <arglist>(const sse_meta_d4 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4</type>
      <name>operator/</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a4acc4054269c5b230bc6eca9cba1c525</anchor>
      <arglist>(const sse_meta_d4 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a700d24515fff3f8454881dc2efe5ab0b</anchor>
      <arglist>(const sse_meta_d4 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a2c552212ef092f59bfab54a388c27def</anchor>
      <arglist>(const sse_meta_d4 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a5985870561b157805c3cfbdc559934a9</anchor>
      <arglist>(const sse_meta_d4 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ae3967b80cf2797f69792f6d947f0f011</anchor>
      <arglist>(const sse_meta_d4 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4</type>
      <name>operator+</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>abd0a038940d042b0cab0bf7795bf70ca</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4</type>
      <name>operator-</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a81b192853ed851503fa5196fdf1d2e22</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4</type>
      <name>operator*</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>ae5859933a06ff4601a0c1c446dd29be0</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4</type>
      <name>operator/</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a0ce24343b5cef7e479c2e1608d44f2cd</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a599d65114fd3dc187c08fbc31aa952a3</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a25fc53d23629cc0b4758035ef9993043</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>af7f6ba5b0a2b1aa052e311f43285675b</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a8d180a656923a5fe8a11b47600b1ce22</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>cross_prod</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a9d1ddeb4ff3fe15bff94a89c624cda56</anchor>
      <arglist>(__m128 x, __m128 y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f4</type>
      <name>cross_prod</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a58b80431ef0c0bb57638718da3f4deae</anchor>
      <arglist>(const sse_meta_f4 &amp;x, const sse_meta_f4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>cross_prod</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>abc6b9e297581bd72974050d599aa81aa</anchor>
      <arglist>(__m128d x0, __m128d x1, __m128d y0, __m128d y1, __m128d *z0, __m128d *z1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_d4</type>
      <name>cross_prod</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aff025088720e6961b3792e59020fcd0f</anchor>
      <arglist>(const sse_meta_d4 &amp;x, const sse_meta_d4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>dot_prod3</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aa8d9bf100aa6c86aa2295c3aad658ac2</anchor>
      <arglist>(__m128 x, __m128 y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>dot_prod3</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a394aff27fe379a9cb35dba11e4d26446</anchor>
      <arglist>(const sse_meta_f4 &amp;x, const sse_meta_f4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128d</type>
      <name>dot_prod3</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a706076f5775f28f104e85b97b9834771</anchor>
      <arglist>(__m128d x0, __m128d x1, __m128d y0, __m128d y1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dot_prod3</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ac39e85d8190e4219e373cc938a05fb05</anchor>
      <arglist>(const sse_meta_d4 &amp;x, const sse_meta_d4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>dot_prod4</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a0da75d98dd23470bb7e480dfb8570d6f</anchor>
      <arglist>(__m128 x, __m128 y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>dot_prod4</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a0bc09712a85485a30187217f7df44c18</anchor>
      <arglist>(const sse_meta_f4 &amp;x, const sse_meta_f4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128d</type>
      <name>dot_prod4</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a06160a737a2b769add369bd66c813295</anchor>
      <arglist>(__m128d x0, __m128d x1, __m128d y0, __m128d y1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dot_prod4</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ae29cb3bf3654736190b1c00c8453b981</anchor>
      <arglist>(const sse_meta_d4 &amp;x, const sse_meta_d4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f4</type>
      <name>min</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>af0469b0785abf5bf1f4623bb8cb7a40c</anchor>
      <arglist>(const sse_meta_f4 &amp;x, const sse_meta_f4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_d4</type>
      <name>min</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a02e940d0d617c0287385fdf3aa127449</anchor>
      <arglist>(const sse_meta_d4 &amp;x, const sse_meta_d4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f4</type>
      <name>max</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aedd7fdbf580530ab1dda857d823d8357</anchor>
      <arglist>(const sse_meta_f4 &amp;x, const sse_meta_f4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_d4</type>
      <name>max</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>afd7d4a0377ec0ea37980759e925bdf3b</anchor>
      <arglist>(const sse_meta_d4 &amp;x, const sse_meta_d4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f4</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a54b5148600402806c503f67624c0debd</anchor>
      <arglist>(const sse_meta_f4 &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_d4</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ab187f8f550ea94d7f58d72ca70ed5f84</anchor>
      <arglist>(const sse_meta_d4 &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>equal</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a7a441f560c86f541c34b18b7046280d1</anchor>
      <arglist>(const sse_meta_f4 &amp;x, const sse_meta_f4 &amp;y, float epsilon)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>equal</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>acc6678ec4c8f34f9462a06dc729ea235</anchor>
      <arglist>(const sse_meta_d4 &amp;x, const sse_meta_d4 &amp;y, double epsilon)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f4</type>
      <name>normalize3</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aae04b61ee1579ae52dfddee379889534</anchor>
      <arglist>(const sse_meta_f4 &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f4</type>
      <name>normalize3_approx</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a447c745426c591ea22449f9b7d99033d</anchor>
      <arglist>(const sse_meta_f4 &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transpose</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a71d7eb7b74fc1d0723248b50918c1792</anchor>
      <arglist>(__m128 c0, __m128 c1, __m128 c2, __m128 *r0, __m128 *r1, __m128 *r2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>inverse</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aa78674d692925c7e56ce0e890dac1af5</anchor>
      <arglist>(__m128 c0, __m128 c1, __m128 c2, __m128 *i0, __m128 *i1, __m128 *i2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f12</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a0a76f2096184b39d781fc68333ae9706</anchor>
      <arglist>(const sse_meta_f12 &amp;mat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f12</type>
      <name>transpose</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a346acc136ad725eda72c910820411d8c</anchor>
      <arglist>(const sse_meta_f12 &amp;mat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f12</type>
      <name>inverse</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ab30cb594be7399a75943b6bf37eb55b5</anchor>
      <arglist>(const sse_meta_f12 &amp;mat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transpose</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>af87fb6e8b3a3e93500d1122d2e7d367c</anchor>
      <arglist>(__m128 c0, __m128 c1, __m128 c2, __m128 c3, __m128 *r0, __m128 *r1, __m128 *r2, __m128 *r3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>inverse</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a48245c73ba5ce6e27b4a051bd47629b7</anchor>
      <arglist>(__m128 c0, __m128 c1, __m128 c2, __m128 c3, __m128 *res0, __m128 *res1, __m128 *res2, __m128 *res3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f16</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>accbf8f533b199dda473e4a8429b5e528</anchor>
      <arglist>(const sse_meta_f16 &amp;mat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f16</type>
      <name>transpose</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ad7d53d3ef835777f5776eb26e61115f4</anchor>
      <arglist>(const sse_meta_f16 &amp;mat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f16</type>
      <name>inverse</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a3b76971f3941f56d61bbff3fee6ad6a5</anchor>
      <arglist>(const sse_meta_f16 &amp;mat)</arglist>
    </member>
    <member kind="variable">
      <type>const __m128</type>
      <name>xmms_0</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a09401e587be5e2a281d421e3f5f704d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const __m128d</type>
      <name>xmmd_0</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a71202332c9733a2927bf32d37b717323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>vs</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a1422f5681416b66c0bb1392033716242</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>__m128</type>
      <name>v</name>
      <anchorfile>a00318.html</anchorfile>
      <anchor>a21cf438d564f1fa9c77a1275c9ab1af5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matrix_3f.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/math/</path>
    <filename>a00319</filename>
    <includes id="a00356" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <class kind="class">fcl::Variance3f</class>
    <namespace>fcl</namespace>
    <member kind="typedef">
      <type>Eigen::FclMatrix&lt; FCL_REAL, 3 &gt;</type>
      <name>Matrix3f</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a43edc09dfe48e160a92803dc9681397a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af5c3e0ac150be3efafb86284c5e2ebd6</anchor>
      <arglist>(std::ostream &amp;o, const Matrix3f &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matrix_3fx.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/math/</path>
    <filename>a00320</filename>
    <includes id="a00356" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <class kind="class">fcl::Matrix3fX</class>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>hat</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3dd421a56916ca50227d84f0583acf1d</anchor>
      <arglist>(Matrix3fX&lt; T &gt; &amp;mat, const Vec3fX&lt; typename T::vector_type &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af74ba4aca086ddb236b8522d5aa50f9e</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;R1, const Vec3fX&lt; typename T::vector_type &gt; &amp;t1, const Matrix3fX&lt; T &gt; &amp;R2, const Vec3fX&lt; typename T::vector_type &gt; &amp;t2, Matrix3fX&lt; T &gt; &amp;R, Vec3fX&lt; typename T::vector_type &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eigen</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab53cb67b8193df66cf5dd9ab4878a29e</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;m, typename T::meta_type dout[3], Vec3fX&lt; typename T::vector_type &gt; vout[3])</arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a645ccae82df2ddc17a53c2b78afade8e</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt;</type>
      <name>transpose</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af7e6fe91017c6ed10cd4b41a44eaeecd</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt;</type>
      <name>inverse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a89b7da9d186a4dde070b50eca3bb2085</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>T::meta_type</type>
      <name>quadraticForm</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a0add24d672d7604e35baf2b839c7b946</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;R, const Vec3fX&lt; typename T::vector_type &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>model.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/articulated_model/</path>
    <filename>a00321</filename>
    <includes id="a00310" name="joint.h" local="no" imported="no">hpp/fcl/articulated_model/joint.h</includes>
    <includes id="a00315" name="link.h" local="no" imported="no">hpp/fcl/articulated_model/link.h</includes>
    <includes id="a00283" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <class kind="class">fcl::ModelParseError</class>
    <class kind="class">fcl::Model</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>model_config.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/articulated_model/</path>
    <filename>a00322</filename>
    <includes id="a00283" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <includes id="a00311" name="joint_config.h" local="no" imported="no">hpp/fcl/articulated_model/joint_config.h</includes>
    <class kind="class">fcl::ModelConfig</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>morton.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/broadphase/</path>
    <filename>a00323</filename>
    <includes id="a00283" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <includes id="a00257" name="AABB.h" local="no" imported="no">hpp/fcl/BV/AABB.h</includes>
    <class kind="struct">fcl::morton_functor</class>
    <class kind="struct">fcl::morton_functor&lt; FCL_UINT32 &gt;</class>
    <class kind="struct">fcl::morton_functor&lt; FCL_UINT64 &gt;</class>
    <class kind="struct">fcl::morton_functor&lt; boost::dynamic_bitset&lt;&gt; &gt;</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>motion.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/ccd/</path>
    <filename>a00324</filename>
    <includes id="a00325" name="motion_base.h" local="no" imported="no">hpp/fcl/ccd/motion_base.h</includes>
    <includes id="a00303" name="intersect.h" local="no" imported="no">hpp/fcl/intersect.h</includes>
    <class kind="class">fcl::TranslationMotion</class>
    <class kind="class">fcl::SplineMotion</class>
    <class kind="class">fcl::ScrewMotion</class>
    <class kind="class">fcl::InterpMotion</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>motion_base.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/ccd/</path>
    <filename>a00325</filename>
    <includes id="a00348" name="math/transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="a00343" name="taylor_matrix.h" local="no" imported="no">hpp/fcl/ccd/taylor_matrix.h</includes>
    <includes id="a00346" name="taylor_vector.h" local="no" imported="no">hpp/fcl/ccd/taylor_vector.h</includes>
    <includes id="a00338" name="RSS.h" local="no" imported="no">hpp/fcl/BV/RSS.h</includes>
    <class kind="class">fcl::BVMotionBoundVisitor</class>
    <class kind="class">fcl::TBVMotionBoundVisitor</class>
    <class kind="class">fcl::TriangleMotionBoundVisitor</class>
    <class kind="class">fcl::MotionBase</class>
    <namespace>fcl</namespace>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; MotionBase &gt;</type>
      <name>MotionBasePtr</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a722f0185b8029593c30054d02885f9a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>narrowphase.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/narrowphase/</path>
    <filename>a00326</filename>
    <includes id="a00294" name="gjk.h" local="no" imported="no">hpp/fcl/narrowphase/gjk.h</includes>
    <includes id="a00295" name="gjk_libccd.h" local="no" imported="no">hpp/fcl/narrowphase/gjk_libccd.h</includes>
    <class kind="struct">fcl::GJKSolver_libccd</class>
    <class kind="struct">fcl::GJKSolver_indep</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>nearest_neighbors.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/knn/</path>
    <filename>a00327</filename>
    <class kind="class">fcl::NearestNeighbors</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>nearest_neighbors_flann.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/knn/</path>
    <filename>a00328</filename>
  </compound>
  <compound kind="file">
    <name>nearest_neighbors_GNAT.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/knn/</path>
    <filename>a00329</filename>
    <includes id="a00327" name="nearest_neighbors.h" local="no" imported="no">hpp/fcl/knn/nearest_neighbors.h</includes>
    <includes id="a00296" name="greedy_kcenters.h" local="no" imported="no">hpp/fcl/knn/greedy_kcenters.h</includes>
    <includes id="a00289" name="exception.h" local="no" imported="no">hpp/fcl/exception.h</includes>
    <class kind="class">fcl::NearestNeighborsGNAT</class>
    <class kind="class">fcl::NearestNeighborsGNAT::Node</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>nearest_neighbors_linear.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/knn/</path>
    <filename>a00330</filename>
    <includes id="a00327" name="nearest_neighbors.h" local="no" imported="no">hpp/fcl/knn/nearest_neighbors.h</includes>
    <includes id="a00289" name="exception.h" local="no" imported="no">hpp/fcl/exception.h</includes>
    <class kind="class">fcl::NearestNeighborsLinear</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>nearest_neighbors_sqrtapprox.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/knn/</path>
    <filename>a00331</filename>
    <includes id="a00330" name="nearest_neighbors_linear.h" local="no" imported="no">hpp/fcl/knn/nearest_neighbors_linear.h</includes>
    <includes id="a00289" name="exception.h" local="no" imported="no">hpp/fcl/exception.h</includes>
    <class kind="class">fcl::NearestNeighborsSqrtApprox</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>include/hpp/fcl/BV/OBB.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>a00332</filename>
    <includes id="a00356" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <includes id="a00319" name="matrix_3f.h" local="no" imported="no">hpp/fcl/math/matrix_3f.h</includes>
    <class kind="class">fcl::OBB</class>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>OBB</type>
      <name>translate</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4cc966313c717afc3fbbd5cdd4394a3f</anchor>
      <arglist>(const OBB &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a91fb89d394f57278956830ed3db6c68d</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBB &amp;b1, const OBB &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7b10b3c454fb949ffbd1f1dde72b1aca</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBB &amp;b1, const OBB &amp;b2, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>obbDisjoint</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a275c05bdcf714dd4189b488fe4236b5b</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>src/BV/OBB.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/src/BV/</path>
    <filename>a00333</filename>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>bool</type>
      <name>obbDisjointAndLowerBoundDistance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3d6edf7015d3d5d06d66165daa045875</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b, FCL_REAL &amp;squaredLowerBoundDistance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>obbDisjoint</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a275c05bdcf714dd4189b488fe4236b5b</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OBBRSS.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>a00334</filename>
    <includes id="a00332" name="include/hpp/fcl/BV/OBB.h" local="no" imported="no">hpp/fcl/BV/OBB.h</includes>
    <includes id="a00338" name="RSS.h" local="no" imported="no">hpp/fcl/BV/RSS.h</includes>
    <class kind="class">fcl::OBBRSS</class>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>OBBRSS</type>
      <name>translate</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a71954589c25a2e7ac231dd09e1aa33d8</anchor>
      <arglist>(const OBBRSS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad36cc4adba1a6e2a2b2893fd9942dcb3</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5608b06f52162c97edb8894007bc4446</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1c1b5f3100f483a5c68015a28a097f4c</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>octree.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00335</filename>
    <includes id="a00257" name="AABB.h" local="no" imported="no">hpp/fcl/BV/AABB.h</includes>
    <includes id="a00280" name="collision_object.h" local="no" imported="no">hpp/fcl/collision_object.h</includes>
    <class kind="class">fcl::OcTree</class>
    <namespace>fcl</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeChildBV</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a781b4e8dc556fa96f93766d16b9ffe69</anchor>
      <arglist>(const AABB &amp;root_bv, unsigned int i, AABB &amp;child_bv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>product.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/eigen/</path>
    <filename>a00336</filename>
    <class kind="struct">internal::deduce_fcl_type</class>
    <class kind="struct">internal::deduce_fcl_type&lt; Derived, OtherDerived, false &gt;</class>
    <class kind="struct">internal::deduce_fcl_type&lt; Derived, OtherDerived, true &gt;</class>
    <class kind="struct">FclProduct</class>
    <namespace>internal</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FCL_EIGEN_MAKE_PRODUCT_OPERATOR</name>
      <anchorfile>a00336.html</anchorfile>
      <anchor>a59836292ca50e094f4d58e346376a14b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FCL_EIGEN_MAKE_PRODUCT_OPERATOR</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>a59836292ca50e094f4d58e346376a14b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>profile.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/</path>
    <filename>a00337</filename>
    <class kind="class">fcl::tools::Profiler</class>
    <class kind="class">fcl::tools::Profiler::ScopedBlock</class>
    <class kind="class">fcl::tools::Profiler::ScopedStart</class>
    <namespace>fcl</namespace>
    <namespace>fcl::time</namespace>
    <namespace>fcl::tools</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ENABLE_PROFILING</name>
      <anchorfile>a00337.html</anchorfile>
      <anchor>a7b3827d1a940d40b5a44fa34d7f42254</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::posix_time::ptime</type>
      <name>point</name>
      <anchorfile>a00365.html</anchorfile>
      <anchor>ab46000cca70d12345df86f7c27964665</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::posix_time::time_duration</type>
      <name>duration</name>
      <anchorfile>a00365.html</anchorfile>
      <anchor>a8b63c17893f6f9926458b8f97795a129</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>point</type>
      <name>now</name>
      <anchorfile>a00365.html</anchorfile>
      <anchor>a037d95ec690c5cc7b8f9085fc50cb1d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>duration</type>
      <name>seconds</name>
      <anchorfile>a00365.html</anchorfile>
      <anchor>aba85b225e95e6d62f3f69178eca207d3</anchor>
      <arglist>(double sec)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>seconds</name>
      <anchorfile>a00365.html</anchorfile>
      <anchor>aeaa57dde955c572afa17ecc98d268d38</anchor>
      <arglist>(const duration &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RSS.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/BV/</path>
    <filename>a00338</filename>
    <includes id="a00356" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <includes id="a00319" name="matrix_3f.h" local="no" imported="no">hpp/fcl/math/matrix_3f.h</includes>
    <class kind="class">fcl::RSS</class>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>RSS</type>
      <name>translate</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae83ddb2c20b117ef877fb1421091cc40</anchor>
      <arglist>(const RSS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a380132ed66f9e8e5af44aa30a6c62e96</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab1ca3671f9872744004595055f28d62e</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sampling.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/math/</path>
    <filename>a00339</filename>
    <includes id="a00359" name="vec_nf.h" local="no" imported="no">hpp/fcl/math/vec_nf.h</includes>
    <includes id="a00348" name="math/transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <class kind="class">fcl::RNG</class>
    <class kind="class">fcl::SamplerBase</class>
    <class kind="class">fcl::SamplerR</class>
    <class kind="class">fcl::SamplerSE2</class>
    <class kind="class">fcl::SamplerSE2_disk</class>
    <class kind="class">fcl::SamplerSE3Euler</class>
    <class kind="class">fcl::SamplerSE3Quat</class>
    <class kind="class">fcl::SamplerSE3Euler_ball</class>
    <class kind="class">fcl::SamplerSE3Quat_ball</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>simd_intersect.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/simd/</path>
    <filename>a00340</filename>
    <includes id="a00356" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <namespace>fcl</namespace>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>sse_four_spheres_intersect</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab9b7edf3703230e336331843a8fe1ac9</anchor>
      <arglist>(const Vec3f &amp;o1, FCL_REAL r1, const Vec3f &amp;o2, FCL_REAL r2, const Vec3f &amp;o3, FCL_REAL r3, const Vec3f &amp;o4, FCL_REAL r4, const Vec3f &amp;o5, FCL_REAL r5, const Vec3f &amp;o6, FCL_REAL r6, const Vec3f &amp;o7, FCL_REAL r7, const Vec3f &amp;o8, FCL_REAL r8)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>sse_four_spheres_four_AABBs_intersect</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad3686f480d640e385acf470f2d25d882</anchor>
      <arglist>(const Vec3f &amp;o1, FCL_REAL r1, const Vec3f &amp;o2, FCL_REAL r2, const Vec3f &amp;o3, FCL_REAL r3, const Vec3f &amp;o4, FCL_REAL r4, const Vec3f &amp;min1, const Vec3f &amp;max1, const Vec3f &amp;min2, const Vec3f &amp;max2, const Vec3f &amp;min3, const Vec3f &amp;max3, const Vec3f &amp;min4, const Vec3f &amp;max4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>sse_four_AABBs_intersect</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ade0588bb786915912841048a625bdcb1</anchor>
      <arglist>(const Vec3f &amp;min1, const Vec3f &amp;max1, const Vec3f &amp;min2, const Vec3f &amp;max2, const Vec3f &amp;min3, const Vec3f &amp;max3, const Vec3f &amp;min4, const Vec3f &amp;max4, const Vec3f &amp;min5, const Vec3f &amp;max5, const Vec3f &amp;min6, const Vec3f &amp;max6, const Vec3f &amp;min7, const Vec3f &amp;max7, const Vec3f &amp;min8, const Vec3f &amp;max8)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>four_spheres_intersect_and</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aba6fec78e7e97e4d3fe61821a25a53d4</anchor>
      <arglist>(const Vec3f &amp;o1, FCL_REAL r1, const Vec3f &amp;o2, FCL_REAL r2, const Vec3f &amp;o3, FCL_REAL r3, const Vec3f &amp;o4, FCL_REAL r4, const Vec3f &amp;o5, FCL_REAL r5, const Vec3f &amp;o6, FCL_REAL r6, const Vec3f &amp;o7, FCL_REAL r7, const Vec3f &amp;o8, FCL_REAL r8)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>four_spheres_intersect_or</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab846c0b745d586bcdc38f691ab30f44a</anchor>
      <arglist>(const Vec3f &amp;o1, FCL_REAL r1, const Vec3f &amp;o2, FCL_REAL r2, const Vec3f &amp;o3, FCL_REAL r3, const Vec3f &amp;o4, FCL_REAL r4, const Vec3f &amp;o5, FCL_REAL r5, const Vec3f &amp;o6, FCL_REAL r6, const Vec3f &amp;o7, FCL_REAL r7, const Vec3f &amp;o8, FCL_REAL r8)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>four_spheres_four_AABBs_intersect_and</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>afb61c714e9c318c5d92797a7097291b8</anchor>
      <arglist>(const Vec3f &amp;o1, FCL_REAL r1, const Vec3f &amp;o2, FCL_REAL r2, const Vec3f &amp;o3, FCL_REAL r3, const Vec3f &amp;o4, FCL_REAL r4, const Vec3f &amp;min1, const Vec3f &amp;max1, const Vec3f &amp;min2, const Vec3f &amp;max2, const Vec3f &amp;min3, const Vec3f &amp;max3, const Vec3f &amp;min4, const Vec3f &amp;max4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>four_spheres_four_AABBs_intersect_or</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1440be4765847abe937acc76bcbac6c1</anchor>
      <arglist>(const Vec3f &amp;o1, FCL_REAL r1, const Vec3f &amp;o2, FCL_REAL r2, const Vec3f &amp;o3, FCL_REAL r3, const Vec3f &amp;o4, FCL_REAL r4, const Vec3f &amp;min1, const Vec3f &amp;max1, const Vec3f &amp;min2, const Vec3f &amp;max2, const Vec3f &amp;min3, const Vec3f &amp;max3, const Vec3f &amp;min4, const Vec3f &amp;max4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>four_AABBs_intersect_and</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4def40570c74b1e0367fa3b1dec03503</anchor>
      <arglist>(const Vec3f &amp;min1, const Vec3f &amp;max1, const Vec3f &amp;min2, const Vec3f &amp;max2, const Vec3f &amp;min3, const Vec3f &amp;max3, const Vec3f &amp;min4, const Vec3f &amp;max4, const Vec3f &amp;min5, const Vec3f &amp;max5, const Vec3f &amp;min6, const Vec3f &amp;max6, const Vec3f &amp;min7, const Vec3f &amp;max7, const Vec3f &amp;min8, const Vec3f &amp;max8)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>four_AABBs_intersect_or</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad444fdbbd1081e0c651f7b0883a4c7fe</anchor>
      <arglist>(const Vec3f &amp;min1, const Vec3f &amp;max1, const Vec3f &amp;min2, const Vec3f &amp;max2, const Vec3f &amp;min3, const Vec3f &amp;max3, const Vec3f &amp;min4, const Vec3f &amp;max4, const Vec3f &amp;min5, const Vec3f &amp;max5, const Vec3f &amp;min6, const Vec3f &amp;max6, const Vec3f &amp;min7, const Vec3f &amp;max7, const Vec3f &amp;min8, const Vec3f &amp;max8)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>simplex.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/ccd/</path>
    <filename>a00341</filename>
    <includes id="a00342" name="support.h" local="yes" imported="no">support.h</includes>
    <class kind="struct">_ccd_simplex_t</class>
    <member kind="typedef">
      <type>struct _ccd_simplex_t</type>
      <name>ccd_simplex_t</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a4b58af27025c0af1d884074d2234fdd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>_ccd_inline void</type>
      <name>ccdSimplexInit</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a4da8ced76dca8de66ec672c49eaa6cab</anchor>
      <arglist>(ccd_simplex_t *s)</arglist>
    </member>
    <member kind="function">
      <type>_ccd_inline int</type>
      <name>ccdSimplexSize</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>aa4d87234d01b39019cca73d36520a2d9</anchor>
      <arglist>(const ccd_simplex_t *s)</arglist>
    </member>
    <member kind="function">
      <type>_ccd_inline const ccd_support_t *</type>
      <name>ccdSimplexLast</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a6e4af6936eb55f5fb922739f5ff16aa1</anchor>
      <arglist>(const ccd_simplex_t *s)</arglist>
    </member>
    <member kind="function">
      <type>_ccd_inline const ccd_support_t *</type>
      <name>ccdSimplexPoint</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>ae5107cd8938afe46cf860cf43d70eb89</anchor>
      <arglist>(const ccd_simplex_t *s, int idx)</arglist>
    </member>
    <member kind="function">
      <type>_ccd_inline ccd_support_t *</type>
      <name>ccdSimplexPointW</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a07bc2dcd784a7254cead566d09bd8bfb</anchor>
      <arglist>(ccd_simplex_t *s, int idx)</arglist>
    </member>
    <member kind="function">
      <type>_ccd_inline void</type>
      <name>ccdSimplexAdd</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a4adb6d649313b1e5d9c672fe1a25dbd1</anchor>
      <arglist>(ccd_simplex_t *s, const ccd_support_t *v)</arglist>
    </member>
    <member kind="function">
      <type>_ccd_inline void</type>
      <name>ccdSimplexSet</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>acd193c90848067b9ddb1498789fd30ab</anchor>
      <arglist>(ccd_simplex_t *s, size_t pos, const ccd_support_t *a)</arglist>
    </member>
    <member kind="function">
      <type>_ccd_inline void</type>
      <name>ccdSimplexSetSize</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a43ce0a03cdce36297751b0039d8d9587</anchor>
      <arglist>(ccd_simplex_t *s, int size)</arglist>
    </member>
    <member kind="function">
      <type>_ccd_inline void</type>
      <name>ccdSimplexSwap</name>
      <anchorfile>a00341.html</anchorfile>
      <anchor>a0cbdfebaa3de1c306a46ac430869c46d</anchor>
      <arglist>(ccd_simplex_t *s, size_t pos1, size_t pos2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>support.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/ccd/</path>
    <filename>a00342</filename>
    <class kind="struct">_ccd_support_t</class>
    <member kind="typedef">
      <type>struct _ccd_support_t</type>
      <name>ccd_support_t</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>a6f06a512680c884ba6f9c389831a93bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>_ccd_inline void</type>
      <name>ccdSupportCopy</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>ae3ccc6bf439e26c5a1f7c470c1e01840</anchor>
      <arglist>(ccd_support_t *, const ccd_support_t *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>__ccdSupport</name>
      <anchorfile>a00342.html</anchorfile>
      <anchor>a408c2d9ecf50bd00cb015128644c9561</anchor>
      <arglist>(const void *obj1, const void *obj2, const ccd_vec3_t *dir, const ccd_t *ccd, ccd_support_t *supp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>taylor_matrix.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/ccd/</path>
    <filename>a00343</filename>
    <includes id="a00319" name="matrix_3f.h" local="no" imported="no">hpp/fcl/math/matrix_3f.h</includes>
    <includes id="a00346" name="taylor_vector.h" local="no" imported="no">hpp/fcl/ccd/taylor_vector.h</includes>
    <includes id="a00307" name="interval_matrix.h" local="no" imported="no">hpp/fcl/ccd/interval_matrix.h</includes>
    <class kind="class">fcl::TMatrix3</class>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>TMatrix3</type>
      <name>rotationConstrain</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad61b3403eece1154ff68120a59a5416d</anchor>
      <arglist>(const TMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator*</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac441c2f5317ef16191888ebfda6d7638</anchor>
      <arglist>(const Matrix3f &amp;m, const TaylorModel &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator*</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>accd031f2c484ad00cec3da9f3fd65c56</anchor>
      <arglist>(const TaylorModel &amp;a, const Matrix3f &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator*</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ada7d50e0546e7268457429b7337596e7</anchor>
      <arglist>(const TaylorModel &amp;a, const TMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator*</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a488aa1ea3e022433bd80af0a49484cc6</anchor>
      <arglist>(FCL_REAL d, const TMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator+</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a39ee7cc59f6945eb5f626bfd8364a28b</anchor>
      <arglist>(const Matrix3f &amp;m1, const TMatrix3 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator-</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa5e9e71c41beb9ded8cc348ef182e3a4</anchor>
      <arglist>(const Matrix3f &amp;m1, const TMatrix3 &amp;m2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>taylor_model.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/ccd/</path>
    <filename>a00344</filename>
    <includes id="a00306" name="interval.h" local="no" imported="no">hpp/fcl/ccd/interval.h</includes>
    <class kind="struct">fcl::TimeInterval</class>
    <class kind="class">fcl::TaylorModel</class>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>TaylorModel</type>
      <name>operator*</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7eb455b9073db707d0562ed8bdd05fb3</anchor>
      <arglist>(FCL_REAL d, const TaylorModel &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>TaylorModel</type>
      <name>operator+</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ace7451e7e840fb2727bf1ed5dfd90f0e</anchor>
      <arglist>(FCL_REAL d, const TaylorModel &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>TaylorModel</type>
      <name>operator-</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a77b5fd75a5dd92664ebd53170d25b85a</anchor>
      <arglist>(FCL_REAL d, const TaylorModel &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateTaylorModelForCosFunc</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>acf26072b6a9925bdb9469c6c2cd2e35f</anchor>
      <arglist>(TaylorModel &amp;tm, FCL_REAL w, FCL_REAL q0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateTaylorModelForSinFunc</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae71d5878c7bfa5aa7da8bdeab60e4590</anchor>
      <arglist>(TaylorModel &amp;tm, FCL_REAL w, FCL_REAL q0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateTaylorModelForLinearFunc</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a82eac4bea7bb3f7ea25437f4c7b60b0d</anchor>
      <arglist>(TaylorModel &amp;tm, FCL_REAL p, FCL_REAL v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>taylor_operator.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/eigen/</path>
    <filename>a00345</filename>
    <includes id="a00356" name="vec_3f.h" local="no" imported="no">hpp/fcl/math/vec_3f.h</includes>
    <includes id="a00319" name="matrix_3f.h" local="no" imported="no">hpp/fcl/math/matrix_3f.h</includes>
    <class kind="struct">fcl::TaylorReturnType</class>
    <class kind="struct">fcl::TaylorReturnType&lt; 1 &gt;</class>
    <class kind="struct">fcl::TaylorReturnType&lt; 3 &gt;</class>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>TaylorReturnType&lt; Derived::ColsAtCompileTime &gt;::type</type>
      <name>operator*</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a8b32c149572f9cec46468991a2185d88</anchor>
      <arglist>(const FclType&lt; Derived &gt; &amp;v, const TaylorModel &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>taylor_vector.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/ccd/</path>
    <filename>a00346</filename>
    <includes id="a00309" name="interval_vector.h" local="no" imported="no">hpp/fcl/ccd/interval_vector.h</includes>
    <includes id="a00344" name="taylor_model.h" local="no" imported="no">hpp/fcl/ccd/taylor_model.h</includes>
    <includes id="a00345" name="taylor_operator.h" local="no" imported="no">hpp/fcl/eigen/taylor_operator.h</includes>
    <class kind="class">fcl::TVector3</class>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>generateTVector3ForLinearFunc</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>adc957f33eaabc3cc0241419e6ee5faa7</anchor>
      <arglist>(TVector3 &amp;v, const Vec3f &amp;position, const Vec3f &amp;velocity)</arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>operator*</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a53700fb473869db9f488ccf787067616</anchor>
      <arglist>(const Vec3f &amp;v, const TaylorModel &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>operator+</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3310342df5b4f339fea35a68df1cb814</anchor>
      <arglist>(const Vec3f &amp;v1, const TVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>operator-</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab299cf794def8aa5494a016d2c301cac</anchor>
      <arglist>(const Vec3f &amp;v1, const TVector3 &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>eigen/transform.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/eigen/</path>
    <filename>a00347</filename>
    <includes id="a00319" name="matrix_3f.h" local="no" imported="no">hpp/fcl/math/matrix_3f.h</includes>
    <class kind="class">fcl::Quaternion3f</class>
    <class kind="class">fcl::Transform3f</class>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>conj</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa348fb88a67e89fa9c943968bcdc0f94</anchor>
      <arglist>(const Quaternion3f &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>inverse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>afb3679e3355abdcc38e0fa41ff49f1c7</anchor>
      <arglist>(const Quaternion3f &amp;q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a87a2ed72e7e4099ecf219348778e405e</anchor>
      <arglist>(std::ostream &amp;o, const Quaternion3f &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>inverse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa3c9f4cadf1f778a94a12cd83124c0d0</anchor>
      <arglist>(const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac14aed68ce5d3bbcbde22d710f024514</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform2</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>afaedd4af922b7edf8ec8614a3c18caac</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2, Transform3f &amp;tf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>math/transform.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/math/</path>
    <filename>a00348</filename>
    <includes id="a00319" name="matrix_3f.h" local="no" imported="no">hpp/fcl/math/matrix_3f.h</includes>
    <class kind="class">fcl::Quaternion3f</class>
    <class kind="class">fcl::Transform3f</class>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>conj</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa348fb88a67e89fa9c943968bcdc0f94</anchor>
      <arglist>(const Quaternion3f &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>inverse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>afb3679e3355abdcc38e0fa41ff49f1c7</anchor>
      <arglist>(const Quaternion3f &amp;q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a87a2ed72e7e4099ecf219348778e405e</anchor>
      <arglist>(std::ostream &amp;o, const Quaternion3f &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>inverse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa3c9f4cadf1f778a94a12cd83124c0d0</anchor>
      <arglist>(const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac14aed68ce5d3bbcbde22d710f024514</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform2</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>afaedd4af922b7edf8ec8614a3c18caac</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2, Transform3f &amp;tf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traversal_node_base.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/traversal/</path>
    <filename>a00349</filename>
    <includes id="a00283" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <includes id="a00348" name="math/transform.h" local="no" imported="no">hpp/fcl/math/transform.h</includes>
    <includes id="a00277" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <class kind="class">fcl::TraversalNodeBase</class>
    <class kind="class">fcl::CollisionTraversalNodeBase</class>
    <class kind="class">fcl::DistanceTraversalNodeBase</class>
    <class kind="struct">fcl::ConservativeAdvancementStackData</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>traversal_node_bvh_shape.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/traversal/</path>
    <filename>a00350</filename>
    <includes id="a00277" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <includes id="a00292" name="geometric_shapes.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes.h</includes>
    <includes id="a00293" name="geometric_shapes_utility.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes_utility.h</includes>
    <includes id="a00349" name="traversal_node_base.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_base.h</includes>
    <includes id="a00273" name="BVH_model.h" local="no" imported="no">hpp/fcl/BVH/BVH_model.h</includes>
    <class kind="class">fcl::BVHShapeCollisionTraversalNode</class>
    <class kind="class">fcl::ShapeBVHCollisionTraversalNode</class>
    <class kind="class">fcl::MeshShapeCollisionTraversalNode</class>
    <class kind="class">fcl::MeshShapeCollisionTraversalNodeOBB</class>
    <class kind="class">fcl::MeshShapeCollisionTraversalNodeRSS</class>
    <class kind="class">fcl::MeshShapeCollisionTraversalNodekIOS</class>
    <class kind="class">fcl::MeshShapeCollisionTraversalNodeOBBRSS</class>
    <class kind="class">fcl::ShapeMeshCollisionTraversalNode</class>
    <class kind="class">fcl::ShapeMeshCollisionTraversalNodeOBB</class>
    <class kind="class">fcl::ShapeMeshCollisionTraversalNodeRSS</class>
    <class kind="class">fcl::ShapeMeshCollisionTraversalNodekIOS</class>
    <class kind="class">fcl::ShapeMeshCollisionTraversalNodeOBBRSS</class>
    <class kind="class">fcl::BVHShapeDistanceTraversalNode</class>
    <class kind="class">fcl::ShapeBVHDistanceTraversalNode</class>
    <class kind="class">fcl::MeshShapeDistanceTraversalNode</class>
    <class kind="class">fcl::MeshShapeDistanceTraversalNodeRSS</class>
    <class kind="class">fcl::MeshShapeDistanceTraversalNodekIOS</class>
    <class kind="class">fcl::MeshShapeDistanceTraversalNodeOBBRSS</class>
    <class kind="class">fcl::ShapeMeshDistanceTraversalNode</class>
    <class kind="class">fcl::ShapeMeshDistanceTraversalNodeRSS</class>
    <class kind="class">fcl::ShapeMeshDistanceTraversalNodekIOS</class>
    <class kind="class">fcl::ShapeMeshDistanceTraversalNodeOBBRSS</class>
    <class kind="class">fcl::MeshShapeConservativeAdvancementTraversalNode</class>
    <class kind="class">fcl::ShapeMeshConservativeAdvancementTraversalNode</class>
    <class kind="class">fcl::MeshShapeConservativeAdvancementTraversalNodeRSS</class>
    <class kind="class">fcl::MeshShapeConservativeAdvancementTraversalNodeOBBRSS</class>
    <class kind="class">fcl::ShapeMeshConservativeAdvancementTraversalNodeRSS</class>
    <class kind="class">fcl::ShapeMeshConservativeAdvancementTraversalNodeOBBRSS</class>
    <namespace>fcl</namespace>
    <namespace>fcl::details</namespace>
    <member kind="function">
      <type>void</type>
      <name>meshShapeConservativeAdvancementOrientedNodeLeafTesting</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ab442cadd1388104e09ac81a8a2e35d09</anchor>
      <arglist>(int b1, int, const BVHModel&lt; BV &gt; *model1, const S &amp;model2, const BV &amp;model2_bv, Vec3f *vertices, Triangle *tri_indices, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const MotionBase *motion1, const MotionBase *motion2, const NarrowPhaseSolver *nsolver, bool enable_statistics, FCL_REAL &amp;min_distance, Vec3f &amp;p1, Vec3f &amp;p2, int &amp;last_tri_id, FCL_REAL &amp;delta_t, int &amp;num_leaf_tests)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>meshShapeConservativeAdvancementOrientedNodeCanStop</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ac276213e30500d04952bffee395317e4</anchor>
      <arglist>(FCL_REAL c, FCL_REAL min_distance, FCL_REAL abs_err, FCL_REAL rel_err, FCL_REAL w, const BVHModel&lt; BV &gt; *model1, const S &amp;model2, const BV &amp;model2_bv, const MotionBase *motion1, const MotionBase *motion2, std::vector&lt; ConservativeAdvancementStackData &gt; &amp;stack, FCL_REAL &amp;delta_t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traversal_node_bvhs.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/traversal/</path>
    <filename>a00351</filename>
    <includes id="a00277" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <includes id="a00349" name="traversal_node_base.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_base.h</includes>
    <includes id="a00269" name="BV_node.h" local="no" imported="no">hpp/fcl/BV/BV_node.h</includes>
    <includes id="a00267" name="BV.h" local="no" imported="no">hpp/fcl/BV/BV.h</includes>
    <includes id="a00273" name="BVH_model.h" local="no" imported="no">hpp/fcl/BVH/BVH_model.h</includes>
    <includes id="a00303" name="intersect.h" local="no" imported="no">hpp/fcl/intersect.h</includes>
    <includes id="a00324" name="motion.h" local="no" imported="no">hpp/fcl/ccd/motion.h</includes>
    <class kind="class">fcl::BVHCollisionTraversalNode</class>
    <class kind="class">fcl::MeshCollisionTraversalNode</class>
    <class kind="class">fcl::MeshCollisionTraversalNodeOBB</class>
    <class kind="class">fcl::MeshCollisionTraversalNodeRSS</class>
    <class kind="class">fcl::MeshCollisionTraversalNodekIOS</class>
    <class kind="class">fcl::MeshCollisionTraversalNodeOBBRSS</class>
    <class kind="struct">fcl::BVHContinuousCollisionPair</class>
    <class kind="class">fcl::MeshContinuousCollisionTraversalNode</class>
    <class kind="class">fcl::BVHDistanceTraversalNode</class>
    <class kind="class">fcl::MeshDistanceTraversalNode</class>
    <class kind="class">fcl::MeshDistanceTraversalNodeRSS</class>
    <class kind="class">fcl::MeshDistanceTraversalNodekIOS</class>
    <class kind="class">fcl::MeshDistanceTraversalNodeOBBRSS</class>
    <class kind="class">fcl::MeshConservativeAdvancementTraversalNode</class>
    <class kind="class">fcl::MeshConservativeAdvancementTraversalNodeRSS</class>
    <class kind="class">fcl::MeshConservativeAdvancementTraversalNodeOBBRSS</class>
    <namespace>fcl</namespace>
    <namespace>fcl::details</namespace>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getBVAxis</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aed3bbb173eaddb4c723b9d2e4fb00667</anchor>
      <arglist>(const BV &amp;bv, int i)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getBVAxis&lt; OBBRSS &gt;</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a66cac0316945c461527badbc641bd5e1</anchor>
      <arglist>(const OBBRSS &amp;bv, int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>meshConservativeAdvancementTraversalNodeCanStop</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a2e510fcf3746857f48352fb655a47ad8</anchor>
      <arglist>(FCL_REAL c, FCL_REAL min_distance, FCL_REAL abs_err, FCL_REAL rel_err, FCL_REAL w, const BVHModel&lt; BV &gt; *model1, const BVHModel&lt; BV &gt; *model2, const MotionBase *motion1, const MotionBase *motion2, std::vector&lt; ConservativeAdvancementStackData &gt; &amp;stack, FCL_REAL &amp;delta_t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traversal_node_octree.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/traversal/</path>
    <filename>a00352</filename>
    <includes id="a00277" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <includes id="a00349" name="traversal_node_base.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_base.h</includes>
    <includes id="a00326" name="narrowphase.h" local="no" imported="no">hpp/fcl/narrowphase/narrowphase.h</includes>
    <includes id="a00293" name="geometric_shapes_utility.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes_utility.h</includes>
    <includes id="a00335" name="octree.h" local="no" imported="no">hpp/fcl/octree.h</includes>
    <includes id="a00273" name="BVH_model.h" local="no" imported="no">hpp/fcl/BVH/BVH_model.h</includes>
    <class kind="class">fcl::OcTreeSolver</class>
    <class kind="class">fcl::OcTreeCollisionTraversalNode</class>
    <class kind="class">fcl::OcTreeDistanceTraversalNode</class>
    <class kind="class">fcl::ShapeOcTreeCollisionTraversalNode</class>
    <class kind="class">fcl::OcTreeShapeCollisionTraversalNode</class>
    <class kind="class">fcl::ShapeOcTreeDistanceTraversalNode</class>
    <class kind="class">fcl::OcTreeShapeDistanceTraversalNode</class>
    <class kind="class">fcl::MeshOcTreeCollisionTraversalNode</class>
    <class kind="class">fcl::OcTreeMeshCollisionTraversalNode</class>
    <class kind="class">fcl::MeshOcTreeDistanceTraversalNode</class>
    <class kind="class">fcl::OcTreeMeshDistanceTraversalNode</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>traversal_node_setup.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/traversal/</path>
    <filename>a00353</filename>
    <includes id="a00351" name="traversal_node_bvhs.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_bvhs.h</includes>
    <includes id="a00354" name="traversal_node_shapes.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_shapes.h</includes>
    <includes id="a00350" name="traversal_node_bvh_shape.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_bvh_shape.h</includes>
    <includes id="a00352" name="traversal_node_octree.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_octree.h</includes>
    <includes id="a00274" name="BVH_utility.h" local="no" imported="no">hpp/fcl/BVH/BVH_utility.h</includes>
    <namespace>fcl</namespace>
    <namespace>fcl::details</namespace>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a95c64c901cb6f88eb8f1750a3a39693b</anchor>
      <arglist>(OcTreeCollisionTraversalNode&lt; NarrowPhaseSolver &gt; &amp;node, const OcTree &amp;model1, const Transform3f &amp;tf1, const OcTree &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abecc8f3c7a74fb248281752df1057821</anchor>
      <arglist>(OcTreeDistanceTraversalNode&lt; NarrowPhaseSolver &gt; &amp;node, const OcTree &amp;model1, const Transform3f &amp;tf1, const OcTree &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a67080379fadfd9c25d38e7ea1abf3a30</anchor>
      <arglist>(ShapeOcTreeCollisionTraversalNode&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const OcTree &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1f505723cb795ddf80392e80a683edec</anchor>
      <arglist>(OcTreeShapeCollisionTraversalNode&lt; S, NarrowPhaseSolver &gt; &amp;node, const OcTree &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae237616b7df4d8c8ee98326920665189</anchor>
      <arglist>(ShapeOcTreeDistanceTraversalNode&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const OcTree &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3c81924d79340eb18d2575fd1827c631</anchor>
      <arglist>(OcTreeShapeDistanceTraversalNode&lt; S, NarrowPhaseSolver &gt; &amp;node, const OcTree &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a8a08f56435bc4aae04b02f5f709fd7e7</anchor>
      <arglist>(MeshOcTreeCollisionTraversalNode&lt; BV, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; BV &gt; &amp;model1, const Transform3f &amp;tf1, const OcTree &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a80aa9d05e2f6d5e36e8ebc3f05872b9c</anchor>
      <arglist>(OcTreeMeshCollisionTraversalNode&lt; BV, NarrowPhaseSolver &gt; &amp;node, const OcTree &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; BV &gt; &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a058e2b263abb136da7805bd08e824d85</anchor>
      <arglist>(MeshOcTreeDistanceTraversalNode&lt; BV, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; BV &gt; &amp;model1, const Transform3f &amp;tf1, const OcTree &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae758c19a134b952324cd3ccee901008b</anchor>
      <arglist>(OcTreeMeshDistanceTraversalNode&lt; BV, NarrowPhaseSolver &gt; &amp;node, const OcTree &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; BV &gt; &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>acd607b020cf207eab8f10c138617c13a</anchor>
      <arglist>(ShapeCollisionTraversalNode&lt; S1, S2, NarrowPhaseSolver &gt; &amp;node, const S1 &amp;shape1, const Transform3f &amp;tf1, const S2 &amp;shape2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa865edb51f351bf334de5abaf49eb26b</anchor>
      <arglist>(MeshShapeCollisionTraversalNode&lt; BV, S, NarrowPhaseSolver &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a588a866a35e1c184f67b431a3078bdd9</anchor>
      <arglist>(ShapeMeshCollisionTraversalNode&lt; S, BV, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab3f5e9ecb6e66b9fcd67cab7cddbe5bf</anchor>
      <arglist>(MeshShapeCollisionTraversalNodeOBB&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; OBB &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad1b5d7b8983d01fba523c93a8bc2a380</anchor>
      <arglist>(MeshShapeCollisionTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a8ffc35029b19cd0acaac3f2135ad185c</anchor>
      <arglist>(MeshShapeCollisionTraversalNodekIOS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; kIOS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5fdc86d927f2b364ccfc40f1bbf141cc</anchor>
      <arglist>(MeshShapeCollisionTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abea460cfebe54203d1954be60a1bb5b2</anchor>
      <arglist>(ShapeMeshCollisionTraversalNodeOBB&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBB &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3624c11d42574422bface52f58c83d4f</anchor>
      <arglist>(ShapeMeshCollisionTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5fa452c35c4e98705c65b40d562a3732</anchor>
      <arglist>(ShapeMeshCollisionTraversalNodekIOS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; kIOS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac2bf8dd51936181b642b18143ee72d18</anchor>
      <arglist>(ShapeMeshCollisionTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a138dceb59bc0f4683725b9744958566d</anchor>
      <arglist>(MeshCollisionTraversalNode&lt; BV &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad69c5d93b0946b5e52c1090d9ff54138</anchor>
      <arglist>(MeshCollisionTraversalNodeOBB &amp;node, const BVHModel&lt; OBB &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBB &gt; &amp;model2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6172ba73edad2b47579add3a42420f13</anchor>
      <arglist>(MeshCollisionTraversalNodeRSS &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a445ae5e14b2677586c98dd9f8dae72d4</anchor>
      <arglist>(MeshCollisionTraversalNodeOBBRSS &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac92845a6978810635a67e97669b60939</anchor>
      <arglist>(MeshCollisionTraversalNodekIOS &amp;node, const BVHModel&lt; kIOS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; kIOS &gt; &amp;model2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7281e9516dfcf575e66dc2ec550ca9f9</anchor>
      <arglist>(ShapeDistanceTraversalNode&lt; S1, S2, NarrowPhaseSolver &gt; &amp;node, const S1 &amp;shape1, const Transform3f &amp;tf1, const S2 &amp;shape2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6d83108ae799336acb750074ac34875c</anchor>
      <arglist>(MeshDistanceTraversalNode&lt; BV &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae7281ec41a16bb015bec266409943bfb</anchor>
      <arglist>(MeshDistanceTraversalNodeRSS &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a9ae6bf2e1917a5ae0d39c7222f4db17b</anchor>
      <arglist>(MeshDistanceTraversalNodekIOS &amp;node, const BVHModel&lt; kIOS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; kIOS &gt; &amp;model2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7e098b423058e0e340eb36e465d1a045</anchor>
      <arglist>(MeshDistanceTraversalNodeOBBRSS &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae6081d28877bbc46eabf2c4e58fa4b69</anchor>
      <arglist>(MeshShapeDistanceTraversalNode&lt; BV, S, NarrowPhaseSolver &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3927dc6c1e9c7b490e7ba408f0457d74</anchor>
      <arglist>(ShapeMeshDistanceTraversalNode&lt; S, BV, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a565a813b61a2cc9625c945ea5cd27fcc</anchor>
      <arglist>(MeshShapeDistanceTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2c79be90859fd861e8658eac375c4c0b</anchor>
      <arglist>(MeshShapeDistanceTraversalNodekIOS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; kIOS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac1cdb1867ff01f78f183258410ad6a18</anchor>
      <arglist>(MeshShapeDistanceTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setupShapeMeshDistanceOrientedNode</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a06a2102230569411b26298d24486f83d</anchor>
      <arglist>(OrientedNode&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; BV &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5d5a356ca3b158cd12d0a7fb48a36ec7</anchor>
      <arglist>(ShapeMeshDistanceTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6397a9976cdeaaaf862fcbd3be7a6710</anchor>
      <arglist>(ShapeMeshDistanceTraversalNodekIOS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; kIOS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a284c3c2b87a088edd29880eb01eac192</anchor>
      <arglist>(ShapeMeshDistanceTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a0d2be0ab29509878e631b7a133440eb0</anchor>
      <arglist>(MeshContinuousCollisionTraversalNode&lt; BV &gt; &amp;node, const BVHModel&lt; BV &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; BV &gt; &amp;model2, const Transform3f &amp;tf2, const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a305d357f88e8c3b8225a9788da41a6db</anchor>
      <arglist>(MeshConservativeAdvancementTraversalNode&lt; BV &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, const Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, const Transform3f &amp;tf2, FCL_REAL w=1, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abbbd027912820f1ee7bdbff2cec392cd</anchor>
      <arglist>(MeshConservativeAdvancementTraversalNodeRSS &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, FCL_REAL w=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a30b4586038f9db4d294b2d42c3a03d86</anchor>
      <arglist>(MeshConservativeAdvancementTraversalNodeOBBRSS &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, FCL_REAL w=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a96aa3d9216c77da07046d67fddccabf7</anchor>
      <arglist>(ShapeConservativeAdvancementTraversalNode&lt; S1, S2, NarrowPhaseSolver &gt; &amp;node, const S1 &amp;shape1, const Transform3f &amp;tf1, const S2 &amp;shape2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a694be7695ffd564038f61b09be48d1f5</anchor>
      <arglist>(MeshShapeConservativeAdvancementTraversalNode&lt; BV, S, NarrowPhaseSolver &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, FCL_REAL w=1, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae8a3fdd8186ea3c140b5650fe642ca9c</anchor>
      <arglist>(MeshShapeConservativeAdvancementTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, FCL_REAL w=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5cecee41fb90fc4e4571f4b7fae31ccc</anchor>
      <arglist>(MeshShapeConservativeAdvancementTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, FCL_REAL w=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a82c756df9480d5e756902ba623900f58</anchor>
      <arglist>(ShapeMeshConservativeAdvancementTraversalNode&lt; S, BV, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, FCL_REAL w=1, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a855700003a10bb817a1a1fca63c67ce1</anchor>
      <arglist>(ShapeMeshConservativeAdvancementTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, FCL_REAL w=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac7007887b0110ee81983b34de79f7ca4</anchor>
      <arglist>(ShapeMeshConservativeAdvancementTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, FCL_REAL w=1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traversal_node_shapes.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/traversal/</path>
    <filename>a00354</filename>
    <includes id="a00277" name="collision_data.h" local="no" imported="no">hpp/fcl/collision_data.h</includes>
    <includes id="a00349" name="traversal_node_base.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_base.h</includes>
    <includes id="a00326" name="narrowphase.h" local="no" imported="no">hpp/fcl/narrowphase/narrowphase.h</includes>
    <includes id="a00293" name="geometric_shapes_utility.h" local="no" imported="no">hpp/fcl/shape/geometric_shapes_utility.h</includes>
    <includes id="a00267" name="BV.h" local="no" imported="no">hpp/fcl/BV/BV.h</includes>
    <includes id="a00324" name="motion.h" local="no" imported="no">hpp/fcl/ccd/motion.h</includes>
    <class kind="class">fcl::ShapeCollisionTraversalNode</class>
    <class kind="class">fcl::ShapeDistanceTraversalNode</class>
    <class kind="class">fcl::ShapeConservativeAdvancementTraversalNode</class>
    <namespace>fcl</namespace>
  </compound>
  <compound kind="file">
    <name>traversal_recurse.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/traversal/</path>
    <filename>a00355</filename>
    <includes id="a00349" name="traversal_node_base.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_base.h</includes>
    <includes id="a00351" name="traversal_node_bvhs.h" local="no" imported="no">hpp/fcl/traversal/traversal_node_bvhs.h</includes>
    <includes id="a00271" name="BVH_front.h" local="no" imported="no">hpp/fcl/BVH/BVH_front.h</includes>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>collisionRecurse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7082c4c49ecd3be15a18f6dee37fbd67</anchor>
      <arglist>(CollisionTraversalNodeBase *node, int b1, int b2, BVHFrontList *front_list, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collisionRecurse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a12b3f73ae31f3bdc69629d7ea125b330</anchor>
      <arglist>(MeshCollisionTraversalNodeOBB *node, int b1, int b2, const Matrix3f &amp;R, const Vec3f &amp;T, BVHFrontList *front_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collisionRecurse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a940ad8297b2c6a5db2c0bed9b8799e04</anchor>
      <arglist>(MeshCollisionTraversalNodeRSS *node, int b1, int b2, const Matrix3f &amp;R, const Vec3f &amp;T, BVHFrontList *front_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfCollisionRecurse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6cdb9900b6817670263ddb863a7d7c71</anchor>
      <arglist>(CollisionTraversalNodeBase *node, int b, BVHFrontList *front_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distanceRecurse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abf6fa798bb3ed06efd235533cd2eb55f</anchor>
      <arglist>(DistanceTraversalNodeBase *node, int b1, int b2, BVHFrontList *front_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distanceQueueRecurse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a51482db3ea32b61e68253cc25584f84d</anchor>
      <arglist>(DistanceTraversalNodeBase *node, int b1, int b2, BVHFrontList *front_list, int qsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propagateBVHFrontListCollisionRecurse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7da1836e80129377c7f98e6ff54a6440</anchor>
      <arglist>(CollisionTraversalNodeBase *node, BVHFrontList *front_list, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vec_3f.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/math/</path>
    <filename>a00356</filename>
    <includes id="a00283" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <includes id="a00316" name="eigen/math_details.h" local="no" imported="no">hpp/fcl/eigen/math_details.h</includes>
    <includes id="a00357" name="eigen/vec_3fx.h" local="no" imported="no">hpp/fcl/eigen/vec_3fx.h</includes>
    <namespace>fcl</namespace>
    <member kind="typedef">
      <type>Eigen::FclMatrix&lt; FCL_REAL, 1 &gt;</type>
      <name>Vec3f</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a071c9823fe8a2919d77c3edfcf8bbb5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af5f251d8c729f6f265e5c40e05f32992</anchor>
      <arglist>(std::ostream &amp;o, const Vec3f &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>eigen/vec_3fx.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/eigen/</path>
    <filename>a00357</filename>
    <includes id="a00283" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <includes id="a00336" name="product.h" local="no" imported="no">hpp/fcl/eigen/product.h</includes>
    <class kind="class">fcl::FclType</class>
    <class kind="class">Eigen::FclOp</class>
    <class kind="class">Eigen::FclMatrix</class>
    <class kind="struct">Eigen::internal::traits&lt; FclOp&lt; T &gt; &gt;</class>
    <class kind="struct">Eigen::internal::traits&lt; FclMatrix&lt; T, Cols, _Options &gt; &gt;</class>
    <class kind="struct">Eigen::internal::remove_fcl</class>
    <class kind="struct">Eigen::internal::remove_fcl&lt; FclOp&lt; Derived &gt; &gt;</class>
    <class kind="struct">Eigen::internal::remove_fcl&lt; const FclOp&lt; Derived &gt; &gt;</class>
    <class kind="struct">Eigen::internal::remove_fcl&lt; FclMatrix&lt; T, Col, Options &gt; &gt;</class>
    <class kind="struct">Eigen::internal::remove_fcl&lt; const FclMatrix&lt; T, Col, Options &gt; &gt;</class>
    <class kind="struct">Eigen::internal::deduce_fcl_type</class>
    <class kind="struct">Eigen::internal::deduce_fcl_type&lt; Derived, OtherDerived, false &gt;</class>
    <class kind="struct">Eigen::internal::deduce_fcl_type&lt; Derived, OtherDerived, true &gt;</class>
    <class kind="struct">Eigen::FclProduct</class>
    <class kind="struct">Eigen::UnaryReturnType</class>
    <class kind="struct">Eigen::BinaryReturnType</class>
    <class kind="class">Eigen::FclMatrix</class>
    <class kind="class">Eigen::FclOp</class>
    <namespace>fcl</namespace>
    <namespace>Eigen</namespace>
    <namespace>Eigen::internal</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FCL_CCD_INTERVALVECTOR_PLUGIN</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>abb412f30b4e25ef6f9fb388ef65bfd2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FCL_CCD_MATRIXVECTOR_PLUGIN</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>aecdc43a852e26b24de2d28c114fee8fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FCL_EIGEN_EXPOSE_PARENT_TYPE</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>ad938175ce37147ea99195f338517f8ad</anchor>
      <arglist>(Type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FCL_EIGEN_MAKE_CWISE_BINARY_OP</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>a24bd302aff51da597759a0d0abaa6be6</anchor>
      <arglist>(METHOD, FUNCTOR)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FCL_EIGEN_MAKE_CWISE_UNARY_OP</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>ac7b959a6488d97e6854a52a0580ed16e</anchor>
      <arglist>(METHOD, FUNCTOR)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FCL_EIGEN_RENAME_PARENT_METHOD</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>a92ce25facbdc40edbd8d444e1c7f0e35</anchor>
      <arglist>(OLD, NEW, RETTYPE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FCL_EIGEN_MAKE_EXPOSE_PARENT1</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>a86f593ff8132bab98249eabb730bce51</anchor>
      <arglist>(METHOD)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FCL_EIGEN_MAKE_EXPOSE_PARENT_ARRAY1</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>a141932ff98525b792144d63c9dfdfbf8</anchor>
      <arglist>(METHOD)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FCL_EIGEN_MAKE_EXPOSE_PARENT_ARRAY_SCALAR1</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>ac659bec50274767ac82932b04857714b</anchor>
      <arglist>(METHOD)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FCL_EIGEN_MAKE_GET_COL_ROW</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>a9df24df4a7da16f5d4b2550ddad6c450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FCL_EIGEN_MATRIX_DOT_AXIS</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>a15d63eb3233c5a2376cc6bd620270312</anchor>
      <arglist>(NAME, axis, index)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FCL_EIGEN_MATRIX_DOT</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>a37718c185c17b16f816d30c7bdaed9a2</anchor>
      <arglist>(NAME, FUNC)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FCL_EIGEN_MAKE_CROSS</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>a55390f3e3cbfbb5d4e2362e0fa2ca19c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FCL_EIGEN_MAKE_DOT</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>aa6e72e59ea600f22630ad482e7414a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FCL_EIGEN_CURRENT_CLASS</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>aeb015bd153dec409f717d8c120d54e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FCL_EIGEN_CURRENT_CLASS</name>
      <anchorfile>a00357.html</anchorfile>
      <anchor>aeb015bd153dec409f717d8c120d54e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Eigen::FclMatrix&lt; T, 1, _Options &gt;</type>
      <name>normalize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa3f4eb2cb9c9158fe70693572564a556</anchor>
      <arglist>(const Eigen::FclMatrix&lt; T, 1, _Options &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Derived::Scalar</type>
      <name>triple</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1eb74586d87b94532e78b912efbab69f</anchor>
      <arglist>(const FclType&lt; Derived &gt; &amp;x, const FclType&lt; Derived &gt; &amp;y, const FclType&lt; Derived &gt; &amp;z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Eigen::BinaryReturnType&lt; const Derived, const OtherDerived &gt;::Min</type>
      <name>min</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abede411f0f0b89ff3c77e493baf34f49</anchor>
      <arglist>(const FclType&lt; Derived &gt; &amp;x, const FclType&lt; OtherDerived &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Eigen::BinaryReturnType&lt; const Derived, const OtherDerived &gt;::Max</type>
      <name>max</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>adc01efadebd02f9e0f4d5165bfb49353</anchor>
      <arglist>(const FclType&lt; Derived &gt; &amp;x, const FclType&lt; OtherDerived &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Eigen::UnaryReturnType&lt; const Derived &gt;::Abs</type>
      <name>abs</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2dada93ebf4709eafff5f06a3ce03c2d</anchor>
      <arglist>(const FclType&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateCoordinateSystem</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a9067a2383e7d382cefc100120c7df4f0</anchor>
      <arglist>(FclType&lt; Derived &gt; &amp;_w, FclType&lt; Derived &gt; &amp;_u, FclType&lt; Derived &gt; &amp;_v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hat</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad2f949779c2ce891db001dd235cf1e78</anchor>
      <arglist>(Matrix &amp;mat, const Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a20f9c22d88c89315470d9d26b99ae8ac</anchor>
      <arglist>(const Matrix &amp;R1, const Vector &amp;t1, const Matrix &amp;R2, const Vector &amp;t2, Matrix &amp;R, Vector &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eigen</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a079477390e70cbe032cd6b2a929a91e2</anchor>
      <arglist>(const FclType&lt; Matrix &gt; &amp;m, typename Matrix::Scalar dout[3], Vector *vout)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::FclOp&lt; Eigen::Transpose&lt; const typename Eigen::internal::remove_fcl&lt; Derived &gt;::type &gt; &gt;</type>
      <name>transpose</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2a56c94fd9aeaefadc2ead1793d2911b</anchor>
      <arglist>(const FclType&lt; Derived &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::FclMatrix&lt; T, 3, _Options &gt;</type>
      <name>inverse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aca89d4c1fcf37c291a4244d3286b3496</anchor>
      <arglist>(const Eigen::FclMatrix&lt; T, 3, _Options &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Matrix::Scalar</type>
      <name>quadraticForm</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a010df7f480c0f45c023cb963021e973d</anchor>
      <arglist>(const Matrix &amp;R, const Vector &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>math/vec_3fx.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/math/</path>
    <filename>a00358</filename>
    <includes id="a00283" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <class kind="class">fcl::Vec3fX</class>
    <namespace>fcl</namespace>
    <member kind="function" static="yes">
      <type>static Vec3fX&lt; T &gt;</type>
      <name>normalize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5f6ac3448599cffbfe4bc6262384f45d</anchor>
      <arglist>(const Vec3fX&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T::meta_type</type>
      <name>triple</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a25b0880f9cdceb4032357f4b4d6c70e2</anchor>
      <arglist>(const Vec3fX&lt; T &gt; &amp;x, const Vec3fX&lt; T &gt; &amp;y, const Vec3fX&lt; T &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a8b3eb556cc0c15185193c062eb7c7058</anchor>
      <arglist>(std::ostream &amp;out, const Vec3fX&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3fX&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>afbd25eaa3f4cb3240907f43431838697</anchor>
      <arglist>(const Vec3fX&lt; T &gt; &amp;x, const Vec3fX&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3fX&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af514fed52188cdaf9f79542cbd0b5f2a</anchor>
      <arglist>(const Vec3fX&lt; T &gt; &amp;x, const Vec3fX&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3fX&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa70509a0f6a08a46be14603a8c2ef1bd</anchor>
      <arglist>(const Vec3fX&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateCoordinateSystem</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a9625410ac3be7e54b537941c5fab87af</anchor>
      <arglist>(const Vec3fX&lt; T &gt; &amp;w, Vec3fX&lt; T &gt; &amp;u, Vec3fX&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec3fX&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a9d89af60b09fa47240281569ef01ff49</anchor>
      <arglist>(const typename Vec3fX&lt; T &gt;::U &amp;t, const Vec3fX&lt; T &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vec_nf.h</name>
    <path>/local/jmirabel/devel/hpp/src/hpp-fcl/include/hpp/fcl/math/</path>
    <filename>a00359</filename>
    <includes id="a00283" name="data_types.h" local="no" imported="no">hpp/fcl/data_types.h</includes>
    <class kind="class">fcl::Vec_n</class>
    <class kind="class">fcl::Vecnf</class>
    <namespace>fcl</namespace>
    <member kind="function">
      <type>void</type>
      <name>repack</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af40bd7af3c3b1b12aa5f88ac5a5e3cab</anchor>
      <arglist>(const Vec_n&lt; T1, N1 &gt; &amp;input, Vec_n&lt; T2, N2 &gt; &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; T, N &gt;</type>
      <name>operator*</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a63a30cea374364d775413dfee98242d6</anchor>
      <arglist>(T t, const Vec_n&lt; T, N &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; T, M+N &gt;</type>
      <name>combine</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a613c6d49ab1a8a8341d503c4620115b1</anchor>
      <arglist>(const Vec_n&lt; T, N &gt; &amp;v1, const Vec_n&lt; T, M &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5b1177028849a3c66ec2d098f656c649</anchor>
      <arglist>(std::ostream &amp;o, const Vec_n&lt; T, N &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_ccd_simplex_t</name>
    <filename>a00001.html</filename>
    <member kind="variable">
      <type>ccd_support_t</type>
      <name>ps</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>a1609e97ba51ff164e2cd14b121f738c0</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last</name>
      <anchorfile>a00001.html</anchorfile>
      <anchor>ad201b2be3be7050fe1dff06c3c208d64</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>_ccd_support_t</name>
    <filename>a00002.html</filename>
    <member kind="variable">
      <type>ccd_vec3_t</type>
      <name>v</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>ab909713fcdaa7e0a5fde3c6ed0742d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ccd_vec3_t</type>
      <name>v1</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>a99b0c669ab050b4087a3a471278335ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ccd_vec3_t</type>
      <name>v2</name>
      <anchorfile>a00002.html</anchorfile>
      <anchor>aecd5b05f318a73319a1afcb005da5b3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::AABB</name>
    <filename>a00003.html</filename>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a015fbeced149ddf271dfa9094c09cc49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a85c0cbbf0d6f311e5d57610e83dd6ee9</anchor>
      <arglist>(const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a39dcac940c6287c539bae3134b4ff8b8</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a6473dcd51a187a27bfd0dd393a73ea38</anchor>
      <arglist>(const AABB &amp;core, const Vec3f &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ac6f9d354855b925716734db966afb30b</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>af668c58d1a79fc0fd59f85d5c811cb5a</anchor>
      <arglist>(const AABB &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ad8922dc36302438a858971d6275f3824</anchor>
      <arglist>(const AABB &amp;, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ab026766154ad6542ad0d909771d196e8</anchor>
      <arglist>(const AABB &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>axisOverlap</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a266b90419c95f62b98755fb65a5fd6f2</anchor>
      <arglist>(const AABB &amp;other, int axis_id) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a0d818c6345483469dd65df317e8b9c84</anchor>
      <arglist>(const AABB &amp;other, AABB &amp;overlap_part) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>af3e7366e9d3b260daba81bb058a40efb</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>AABB &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a6e69edeb7af89f37655ffc53992d6bfd</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>AABB &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a8847a61910b650adb733aed0f7f944b8</anchor>
      <arglist>(const AABB &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>operator+</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ad5603ca320c4a7a3afebd5d745ef7185</anchor>
      <arglist>(const AABB &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ab8642c0537437319f87a64e0b03128e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a3c4600d0e975fe4830625cad2e7925ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aa6c42fd540747257b6156d40137e143f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a194a8bc1f36adfd1b6cb60667ad16717</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>ad72e536d32343e2316ca6c0609e0b3b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a7dc221d88c5799ebf33a4b0dfe8038c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>center</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a4837bc58a4c78dfc403cb284a0d567fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a1454fce217d3bb16a7117b5a051c1178</anchor>
      <arglist>(const AABB &amp;other, Vec3f *P, Vec3f *Q) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>af7ec4d41029d3d9b92066fcbdaccc7ad</anchor>
      <arglist>(const AABB &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a367023235bce9fc64b5c9d8d79800df1</anchor>
      <arglist>(const AABB &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>AABB &amp;</type>
      <name>expand</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a0740e1d8110408f3664e9e92cb1c1816</anchor>
      <arglist>(const Vec3f &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type>AABB &amp;</type>
      <name>expand</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>aaf2c001045feec9bf40bd1124d665f08</anchor>
      <arglist>(const AABB &amp;core, FCL_REAL ratio)</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>min_</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a4b90244b02b7a8f33886b896d9c98626</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>max_</name>
      <anchorfile>a00003.html</anchorfile>
      <anchor>a4362ac34896aa9fa5a2a81d82096e632</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::internal::assign</name>
    <filename>a00004.html</filename>
    <templarg></templarg>
    <templarg>Size</templarg>
    <member kind="function" static="yes">
      <type>static Eigen::Matrix&lt; typename Derived::Scalar, 4, 1 &gt;</type>
      <name>run</name>
      <anchorfile>a00004.html</anchorfile>
      <anchor>a0be99f99cede027a1633488a7cd44ee8</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::internal::assign&lt; Derived, 3 &gt;</name>
    <filename>a00005.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static Eigen::Matrix&lt; typename Derived::Scalar, 4, 1 &gt;</type>
      <name>run</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a1e787d39be8ab2cc901ba1cad70c5e37</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::internal::assign&lt; Derived, 4 &gt;</name>
    <filename>a00006.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static Eigen::Matrix&lt; typename Derived::Scalar, 4, 1 &gt;</type>
      <name>run</name>
      <anchorfile>a00006.html</anchorfile>
      <anchor>a8f55b9ca2c808fb82eb3b5ef5c2cfdb2</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::BallEulerJoint</name>
    <filename>a00007.html</filename>
    <base>fcl::Joint</base>
    <member kind="function">
      <type></type>
      <name>BallEulerJoint</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>ab40a6909f68852285b043061d3a67e9f</anchor>
      <arglist>(const boost::shared_ptr&lt; Link &gt; &amp;link_parent, const boost::shared_ptr&lt; Link &gt; &amp;link_child, const Transform3f &amp;transform_to_parent, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BallEulerJoint</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a4f7fb50ca35db5618eb268f782c35951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDofs</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>a0a84df4058633d2b3121dc4fe4d41d00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>getLocalTransform</name>
      <anchorfile>a00007.html</anchorfile>
      <anchor>abe640f5c5e58545cb5198c44f715c28d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::BinaryReturnType</name>
    <filename>a00008.html</filename>
    <templarg>Derived</templarg>
    <templarg>OtherDerived</templarg>
    <member kind="typedef">
      <type>Derived::Scalar</type>
      <name>Scalar</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a0a418d447c6ac86c28d1e55b111d708e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FclOp&lt; const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt; &gt;</type>
      <name>Difference</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a028ac4f10b0d51d43a833dd23cc879c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FclOp&lt; const CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt; &gt;</type>
      <name>Sum</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a8bf63036cbc4a03bcae6813744e2ee68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FclOp&lt; const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt; &gt;</type>
      <name>Min</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ae311418e196daf6c9c0c2b959393b2f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FclOp&lt; const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt; &gt;</type>
      <name>Max</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>ade8abd4c962c8dfe018c8ab086cee6eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FclMatrix&lt; Scalar, 1, 0 &gt;</type>
      <name>Cross</name>
      <anchorfile>a00008.html</anchorfile>
      <anchor>a934ddfc9fbb33fb7302b89275bb31095</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Box</name>
    <filename>a00009.html</filename>
    <base>fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a3a5be9ce0d9011460968212558f12917</anchor>
      <arglist>(FCL_REAL x, FCL_REAL y, FCL_REAL z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a6e80e921b4b0ac37367fa009889482fc</anchor>
      <arglist>(const Vec3f &amp;side_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Box</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>aad11efdabb09f4e082d1bd5d2a868d15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a5063cc413d3726ea104eba634b97b456</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a9982d154e84ac052b08e6a5abe218bee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>a15580500e70d1dd2384038751202e5bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>acd944b78ba9a84e9f3982cbe46c90b4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>side</name>
      <anchorfile>a00009.html</anchorfile>
      <anchor>abb5a7eff3f2aed0b47f665432e0712e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::BroadPhaseCollisionManager</name>
    <filename>a00010.html</filename>
    <member kind="function">
      <type></type>
      <name>BroadPhaseCollisionManager</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a160ae1051cdeef40482eaff757b3178d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BroadPhaseCollisionManager</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a8be28c7bc59a1e58a28a684e0d244123</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerObjects</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a7fd4d3d4e17bafa28f8f90949d63a178</anchor>
      <arglist>(const std::vector&lt; CollisionObject * &gt; &amp;other_objs)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerObject</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a9d418ef7eed4328d165633fd8274005e</anchor>
      <arglist>(CollisionObject *obj)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unregisterObject</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a32efc1e309160cdd71166bbf991b3c00</anchor>
      <arglist>(CollisionObject *obj)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a626ff2c1611970cf82cbaa9ebc8d3b0e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a51c295a07b5bafaedabc9d7ff2408a5b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>aa8d61db0541b4037557d90e0a4b418bf</anchor>
      <arglist>(CollisionObject *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>accb8d7461eb23312603fa707079575c2</anchor>
      <arglist>(const std::vector&lt; CollisionObject * &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a50bd6946d1ac468c35ea471c95804378</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getObjects</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ab5b54168dfc92d33811d6db51804d91f</anchor>
      <arglist>(std::vector&lt; CollisionObject * &gt; &amp;objs) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collide</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>ad0725b0d5c690fb52b7d3032941754d8</anchor>
      <arglist>(CollisionObject *obj, void *cdata, CollisionCallBack callback) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>distance</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a79ece2453b2e9a025309ac3da49c998b</anchor>
      <arglist>(CollisionObject *obj, void *cdata, DistanceCallBack callback) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collide</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a3e45bce4996b74fc3efe7f8bc5193f44</anchor>
      <arglist>(void *cdata, CollisionCallBack callback) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>distance</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a36fb79069e059ef80e7733867a7a541b</anchor>
      <arglist>(void *cdata, DistanceCallBack callback) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collide</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a99ef4a6ad8822cd377d64f74193bcf0a</anchor>
      <arglist>(BroadPhaseCollisionManager *other_manager, void *cdata, CollisionCallBack callback) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>distance</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a460615248007e6b6b0795a6052b61790</anchor>
      <arglist>(BroadPhaseCollisionManager *other_manager, void *cdata, DistanceCallBack callback) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a941b83229a3667349ed849b4bd473c31</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>size</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a77c2472a067720f9690c47496fd25fbc</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>inTestedSet</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a967563217493b8fea00f5f2cfe45c827</anchor>
      <arglist>(CollisionObject *a, CollisionObject *b) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insertTestedSet</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a6f6e44079b25161a6c28a119aab26c4f</anchor>
      <arglist>(CollisionObject *a, CollisionObject *b) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; std::pair&lt; CollisionObject *, CollisionObject * &gt; &gt;</type>
      <name>tested_set</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>afbb8773218f43e6b98ad69d40dcf4331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>enable_tested_set_</name>
      <anchorfile>a00010.html</anchorfile>
      <anchor>a28bdad160ad8721e9650d529cbf0fd2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::BroadPhaseContinuousCollisionManager</name>
    <filename>a00011.html</filename>
    <member kind="function">
      <type></type>
      <name>BroadPhaseContinuousCollisionManager</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a6412a3d4471336fbf639f33e17a01c10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BroadPhaseContinuousCollisionManager</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ad13cc5a30e4c2168205a3bae3bb7c7ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>registerObjects</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ac7fb702496fc753794cd28d2f6051f4b</anchor>
      <arglist>(const std::vector&lt; ContinuousCollisionObject * &gt; &amp;other_objs)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>registerObject</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ae59a1aae84833fc32996edda89940824</anchor>
      <arglist>(ContinuousCollisionObject *obj)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unregisterObject</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ae8dee24d9c1583dfee4b3fc6ffe5a082</anchor>
      <arglist>(ContinuousCollisionObject *obj)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>af3023a057317e9c4b002ebd113cac702</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a0558054891826dbd71a51349673f624d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aebae2daaaa7a36aa6f76d524a4e04730</anchor>
      <arglist>(ContinuousCollisionObject *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>aa82c75cce63f1481091c86f018f61914</anchor>
      <arglist>(const std::vector&lt; ContinuousCollisionObject * &gt; &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a46c5c4f23e420686ea874213b514c498</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getObjects</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a2216054bd3b26a8b40c4e508c69aa60e</anchor>
      <arglist>(std::vector&lt; ContinuousCollisionObject * &gt; &amp;objs) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collide</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ac883498d7a756f1ec16c1730d51e89ed</anchor>
      <arglist>(ContinuousCollisionObject *obj, void *cdata, CollisionCallBack callback) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>distance</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a912efd267c0a7fba272a9e21bcdcb283</anchor>
      <arglist>(ContinuousCollisionObject *obj, void *cdata, DistanceCallBack callback) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collide</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a0f942668ca99cc3eaa5b0a8e8684cd9b</anchor>
      <arglist>(void *cdata, CollisionCallBack callback) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>distance</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a41df22a216cc8e790ce6fa8b625b4818</anchor>
      <arglist>(void *cdata, DistanceCallBack callback) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collide</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a19300ca6403bd46bfd6f00c0316ffd9e</anchor>
      <arglist>(BroadPhaseContinuousCollisionManager *other_manager, void *cdata, CollisionCallBack callback) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>distance</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>ab7b47debc01d184b4575f0ced622c139</anchor>
      <arglist>(BroadPhaseContinuousCollisionManager *other_manager, void *cdata, DistanceCallBack callback) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a515b53dba517fd0e7cada4498ba81758</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>size</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>a009641059120404c3cda902fd3ace37e</anchor>
      <arglist>() const  =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::BVFitter</name>
    <filename>a00012.html</filename>
    <templarg></templarg>
    <base>fcl::BVFitterBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BVFitter</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a4722985aeb0345e475e48187823e6d96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>adeb6716ac4ae92706f25374baa936b56</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>ad42e4e1ca46a1bf89f19e0f0e140bbee</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>BV</type>
      <name>fit</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a3e137348fc3d858f6da1a33167c00350</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00012.html</anchorfile>
      <anchor>a35087b185f550f4c40691f9c7e94a1dc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::BVFitter&lt; kIOS &gt;</name>
    <filename>a00013.html</filename>
    <base>BVFitterBase&lt; kIOS &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a99c8d533f3121985434e28adc498091c</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a1ef0a2d0a51459b29a68eea94644e6f0</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>kIOS</type>
      <name>fit</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a9aabad2bc3158eb8202b6726b2ac456d</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00013.html</anchorfile>
      <anchor>a3cdd4fec5185aa56416c516cca320cc6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::BVFitter&lt; OBB &gt;</name>
    <filename>a00014.html</filename>
    <base>BVFitterBase&lt; OBB &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a54cb162b57d7e00bb72403f1c661c6d7</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a227dfe5344ff7f442ff4974b8b43bbe9</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>OBB</type>
      <name>fit</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>a214e138700cb4d13ed850dbf3d400c7a</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00014.html</anchorfile>
      <anchor>afa0f1745db38a962cc742eb2b0e5fbba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::BVFitter&lt; OBBRSS &gt;</name>
    <filename>a00015.html</filename>
    <base>BVFitterBase&lt; OBBRSS &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a4cfcf7c70aa3e87fe65d4b055b73405c</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a4dec302a55438dddfc40b05668056566</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>OBBRSS</type>
      <name>fit</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a02a47e22dbc5395ad13a1202f68b727f</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00015.html</anchorfile>
      <anchor>a9fb1ce4fab611a9dc5d5ba1967f36952</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::BVFitter&lt; RSS &gt;</name>
    <filename>a00016.html</filename>
    <base>BVFitterBase&lt; RSS &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a4eba35f7990e1e990163b3638fb182fd</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>ae78b8ca0244ea99a91cecb0f402f37d0</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>RSS</type>
      <name>fit</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>a9df33e02699a59d3cf5ad6aebbddf85b</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00016.html</anchorfile>
      <anchor>adccd6f92ea26124a68128b0a62126db0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::BVFitterBase</name>
    <filename>a00017.html</filename>
    <templarg>BV</templarg>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad7812f05f438e1b6fbd62d0757f306c2</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aa25453b8729f7c5a9f2c8452639b4f48</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual BV</type>
      <name>fit</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a0a830436d7e687200980c901d027b794</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a7e5f2a7b954b43890f1fb91542f87eb2</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVFitterBase&lt; kIOS &gt;</name>
    <filename>a00017.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad7812f05f438e1b6fbd62d0757f306c2</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aa25453b8729f7c5a9f2c8452639b4f48</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual kIOS</type>
      <name>fit</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a0a830436d7e687200980c901d027b794</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a7e5f2a7b954b43890f1fb91542f87eb2</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVFitterBase&lt; OBB &gt;</name>
    <filename>a00017.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad7812f05f438e1b6fbd62d0757f306c2</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aa25453b8729f7c5a9f2c8452639b4f48</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OBB</type>
      <name>fit</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a0a830436d7e687200980c901d027b794</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a7e5f2a7b954b43890f1fb91542f87eb2</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVFitterBase&lt; OBBRSS &gt;</name>
    <filename>a00017.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad7812f05f438e1b6fbd62d0757f306c2</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aa25453b8729f7c5a9f2c8452639b4f48</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OBBRSS</type>
      <name>fit</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a0a830436d7e687200980c901d027b794</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a7e5f2a7b954b43890f1fb91542f87eb2</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVFitterBase&lt; RSS &gt;</name>
    <filename>a00017.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>ad7812f05f438e1b6fbd62d0757f306c2</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aa25453b8729f7c5a9f2c8452639b4f48</anchor>
      <arglist>(Vec3f *vertices_, Vec3f *prev_vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RSS</type>
      <name>fit</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a0a830436d7e687200980c901d027b794</anchor>
      <arglist>(unsigned int *primitive_indices, int num_primitives)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a7e5f2a7b954b43890f1fb91542f87eb2</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::BVHCollisionTraversalNode</name>
    <filename>a00018.html</filename>
    <templarg>BV</templarg>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHCollisionTraversalNode</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a5093142d4ee1d6f9811ef351f23f33e4</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a7539f8ad520afc6dacb395d6d43d87b5</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8b4eef96227a92523cb700ba89e25582</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8bb6229b519cb3c5da92d95b8ad1082d</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a39f2163e9b2a72128803b592e9bb78f4</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa1570ee85acf49b34b08e99b95ecfc4d</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a0a41e1dc191cb25e135dc7ec6f935cfb</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a022492a65f1c8c1975878c282c9d43a5</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a37737d1bd168ab6e680661bd5792f0b0</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1a553a23b96caf1ab8f3065e446c07d8</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model1</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>acd2caf582e6808d0203c15c7d452168f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model2</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ab7481093d0443a100189cd00ebc65e24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a984769616570420870a0ee4af5219ade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a3fd874e8f385b1f8f3d7e892b07a5276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ac8cf32dfd79b134349415f88b75a1262</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHCollisionTraversalNode&lt; kIOS &gt;</name>
    <filename>a00018.html</filename>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHCollisionTraversalNode</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a5093142d4ee1d6f9811ef351f23f33e4</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a7539f8ad520afc6dacb395d6d43d87b5</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8b4eef96227a92523cb700ba89e25582</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8bb6229b519cb3c5da92d95b8ad1082d</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a39f2163e9b2a72128803b592e9bb78f4</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa1570ee85acf49b34b08e99b95ecfc4d</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a0a41e1dc191cb25e135dc7ec6f935cfb</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a022492a65f1c8c1975878c282c9d43a5</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a37737d1bd168ab6e680661bd5792f0b0</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1a553a23b96caf1ab8f3065e446c07d8</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; kIOS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>acd2caf582e6808d0203c15c7d452168f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; kIOS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ab7481093d0443a100189cd00ebc65e24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a984769616570420870a0ee4af5219ade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a3fd874e8f385b1f8f3d7e892b07a5276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ac8cf32dfd79b134349415f88b75a1262</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHCollisionTraversalNode&lt; OBB &gt;</name>
    <filename>a00018.html</filename>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHCollisionTraversalNode</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a5093142d4ee1d6f9811ef351f23f33e4</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a7539f8ad520afc6dacb395d6d43d87b5</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8b4eef96227a92523cb700ba89e25582</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8bb6229b519cb3c5da92d95b8ad1082d</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a39f2163e9b2a72128803b592e9bb78f4</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa1570ee85acf49b34b08e99b95ecfc4d</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a0a41e1dc191cb25e135dc7ec6f935cfb</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a022492a65f1c8c1975878c282c9d43a5</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a37737d1bd168ab6e680661bd5792f0b0</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1a553a23b96caf1ab8f3065e446c07d8</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBB &gt; *</type>
      <name>model1</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>acd2caf582e6808d0203c15c7d452168f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBB &gt; *</type>
      <name>model2</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ab7481093d0443a100189cd00ebc65e24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a984769616570420870a0ee4af5219ade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a3fd874e8f385b1f8f3d7e892b07a5276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ac8cf32dfd79b134349415f88b75a1262</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHCollisionTraversalNode&lt; OBBRSS &gt;</name>
    <filename>a00018.html</filename>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHCollisionTraversalNode</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a5093142d4ee1d6f9811ef351f23f33e4</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a7539f8ad520afc6dacb395d6d43d87b5</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8b4eef96227a92523cb700ba89e25582</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8bb6229b519cb3c5da92d95b8ad1082d</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a39f2163e9b2a72128803b592e9bb78f4</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa1570ee85acf49b34b08e99b95ecfc4d</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a0a41e1dc191cb25e135dc7ec6f935cfb</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a022492a65f1c8c1975878c282c9d43a5</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a37737d1bd168ab6e680661bd5792f0b0</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1a553a23b96caf1ab8f3065e446c07d8</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBBRSS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>acd2caf582e6808d0203c15c7d452168f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBBRSS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ab7481093d0443a100189cd00ebc65e24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a984769616570420870a0ee4af5219ade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a3fd874e8f385b1f8f3d7e892b07a5276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ac8cf32dfd79b134349415f88b75a1262</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHCollisionTraversalNode&lt; RSS &gt;</name>
    <filename>a00018.html</filename>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHCollisionTraversalNode</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a5093142d4ee1d6f9811ef351f23f33e4</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a7539f8ad520afc6dacb395d6d43d87b5</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8b4eef96227a92523cb700ba89e25582</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a8bb6229b519cb3c5da92d95b8ad1082d</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a39f2163e9b2a72128803b592e9bb78f4</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>aa1570ee85acf49b34b08e99b95ecfc4d</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a0a41e1dc191cb25e135dc7ec6f935cfb</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a022492a65f1c8c1975878c282c9d43a5</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a37737d1bd168ab6e680661bd5792f0b0</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a1a553a23b96caf1ab8f3065e446c07d8</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; RSS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>acd2caf582e6808d0203c15c7d452168f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; RSS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ab7481093d0443a100189cd00ebc65e24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a984769616570420870a0ee4af5219ade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>a3fd874e8f385b1f8f3d7e892b07a5276</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00018.html</anchorfile>
      <anchor>ac8cf32dfd79b134349415f88b75a1262</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::BVHContinuousCollisionPair</name>
    <filename>a00019.html</filename>
    <member kind="function">
      <type></type>
      <name>BVHContinuousCollisionPair</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a569357f46301edc1b9a2d29c1645a652</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHContinuousCollisionPair</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a223f2d67aaef34d767e1530d2d2b9e48</anchor>
      <arglist>(int id1_, int id2_, FCL_REAL time)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>id1</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a8d713bb8c3de1f4aca629dcb465c85b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>id2</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a1263664316cdf0c5bd841628992c616b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>collision_time</name>
      <anchorfile>a00019.html</anchorfile>
      <anchor>a4a3c5132ddd6bad38e88a8e17091abc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::BVHDistanceTraversalNode</name>
    <filename>a00020.html</filename>
    <templarg>BV</templarg>
    <base>fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHDistanceTraversalNode</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a47a4e76ff81194065e170f58c155eddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a670b1caeb6070a0c9e4e9f3269bbf538</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ac9d1860e6d98a0fcb374a0e857a24fcf</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>acf6c9e787420b347f14cf17140a4fdb7</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a6c657074e979ef53c2e5dc5ac714fdf0</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a745aaa304dd476f9943e6ac8440eddc2</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a0f94f93cb74a8c0e021a3a3c4fcbf366</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>adc0098073bb55880807e51c7bf6902e2</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>adf340977d0311801e6191d3d4c2cfd4a</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model1</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad9cacae1f6dfdf6aa21d349bbd36b380</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model2</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a122f0662252eccec3d549a5b05df6689</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a0cff6fc4469fba801a165344107a4040</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ae6df7214cd8d40dfd1c9b49c74d15aaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a291b1dd75a9b86db4f35e66a841e0a72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHDistanceTraversalNode&lt; kIOS &gt;</name>
    <filename>a00020.html</filename>
    <base>fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHDistanceTraversalNode</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a47a4e76ff81194065e170f58c155eddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a670b1caeb6070a0c9e4e9f3269bbf538</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ac9d1860e6d98a0fcb374a0e857a24fcf</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>acf6c9e787420b347f14cf17140a4fdb7</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a6c657074e979ef53c2e5dc5ac714fdf0</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a745aaa304dd476f9943e6ac8440eddc2</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a0f94f93cb74a8c0e021a3a3c4fcbf366</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>adc0098073bb55880807e51c7bf6902e2</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>adf340977d0311801e6191d3d4c2cfd4a</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; kIOS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad9cacae1f6dfdf6aa21d349bbd36b380</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; kIOS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a122f0662252eccec3d549a5b05df6689</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a0cff6fc4469fba801a165344107a4040</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ae6df7214cd8d40dfd1c9b49c74d15aaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a291b1dd75a9b86db4f35e66a841e0a72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHDistanceTraversalNode&lt; OBBRSS &gt;</name>
    <filename>a00020.html</filename>
    <base>fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHDistanceTraversalNode</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a47a4e76ff81194065e170f58c155eddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a670b1caeb6070a0c9e4e9f3269bbf538</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ac9d1860e6d98a0fcb374a0e857a24fcf</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>acf6c9e787420b347f14cf17140a4fdb7</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a6c657074e979ef53c2e5dc5ac714fdf0</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a745aaa304dd476f9943e6ac8440eddc2</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a0f94f93cb74a8c0e021a3a3c4fcbf366</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>adc0098073bb55880807e51c7bf6902e2</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>adf340977d0311801e6191d3d4c2cfd4a</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBBRSS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad9cacae1f6dfdf6aa21d349bbd36b380</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBBRSS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a122f0662252eccec3d549a5b05df6689</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a0cff6fc4469fba801a165344107a4040</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ae6df7214cd8d40dfd1c9b49c74d15aaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a291b1dd75a9b86db4f35e66a841e0a72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHDistanceTraversalNode&lt; RSS &gt;</name>
    <filename>a00020.html</filename>
    <base>fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHDistanceTraversalNode</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a47a4e76ff81194065e170f58c155eddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a670b1caeb6070a0c9e4e9f3269bbf538</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ac9d1860e6d98a0fcb374a0e857a24fcf</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>acf6c9e787420b347f14cf17140a4fdb7</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a6c657074e979ef53c2e5dc5ac714fdf0</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a745aaa304dd476f9943e6ac8440eddc2</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a0f94f93cb74a8c0e021a3a3c4fcbf366</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>adc0098073bb55880807e51c7bf6902e2</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>adf340977d0311801e6191d3d4c2cfd4a</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; RSS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ad9cacae1f6dfdf6aa21d349bbd36b380</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; RSS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a122f0662252eccec3d549a5b05df6689</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a0cff6fc4469fba801a165344107a4040</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>ae6df7214cd8d40dfd1c9b49c74d15aaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a291b1dd75a9b86db4f35e66a841e0a72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::BVHFrontNode</name>
    <filename>a00021.html</filename>
    <member kind="function">
      <type></type>
      <name>BVHFrontNode</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>accd1404af46edcff5c37a9865981ac38</anchor>
      <arglist>(int left_, int right_)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>left</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>a57269f26b8f7fb782832151cf4e94dcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>right</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ade1b81923f59b40b9c5419e2627c304b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a00021.html</anchorfile>
      <anchor>ad025d12ffadca3f2c1558c0cf2810270</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::BVHModel</name>
    <filename>a00022.html</filename>
    <templarg>BV</templarg>
    <base>fcl::CollisionGeometry</base>
    <member kind="function">
      <type>BVHModelType</type>
      <name>getModelType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a754147c1363181ea19fb79466b4b0b2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a38fcb5c959db086729dc6d3d1c5bc581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aaf725781a411f0a35ed33f9ca05e3117</anchor>
      <arglist>(const BVHModel &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BVHModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ab0e56d63cc11fc5be315c6593a519a2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BVNode&lt; BV &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>af8f720cc202ae8110dff2454a94e5d0b</anchor>
      <arglist>(int id) const </arglist>
    </member>
    <member kind="function">
      <type>BVNode&lt; BV &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a70fefce2841b13fd9011491403e14538</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBVs</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ab34d468caef02b150adcd3777171fbed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0112fcffd86179c8f65ca066166cf38b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a22ce92ddf4d9a7cb9984136f7b7f018c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a7f6f2e5d43358450752e4cecb39fa243</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a7a8c84283932e5b74be5c4cf16f73d31</anchor>
      <arglist>(int num_tris=0, int num_vertices=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addVertex</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a6b4c12b0eea71f6b6c05ae26d4fe4458</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTriangle</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2be4b534e3b68f4873731569cc6ee605</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a1dfdb179ccb477405ac698745ea9643e</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps, const std::vector&lt; Triangle &gt; &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a8291f30200c7e2c72626d1c4376eeb6d</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a70354bb54015495559bb95cd137ccdef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginReplaceModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a452b14badbd22661e6ba4e16d6ab67c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceVertex</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a435f547b9497f5b3c100322492a865a5</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceTriangle</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2740827e790eb5ccab4bc2c8aaf4f2e1</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a7a496766de754af075069e3c5ffb908f</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endReplaceModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a494df75b80618343dc54c64dd75ee23f</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginUpdateModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ad5f8dc040fc693d61023b0b3444d312f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateVertex</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a92fe682f1dea522ba23eb7044a8d46b2</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateTriangle</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ac6e30d451ff58c8f3c2d7ff67f2ca5b4</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a20f309c69f6ca35a30ee7360168cee89</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endUpdateModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a61f276aaacc4b2950a13c9532813f6ee</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>memUsage</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a90ceb613e175879dbfc2b3acb3036a1f</anchor>
      <arglist>(int msg) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParentRelative</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a4f7710016d73967b5daa2784ff5aee6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ad4bbf6867f5eb7210bb8776fc23408b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ac5a1760105f3b700721464f9a1832776</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0523bbf2f3990b5607906426ef9d2a81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a8deeea0984adaea005c1cfee64f18092</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0c19c3224ecc8af7972303e338ebb52c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a21c3f297c3305c5005720073161d5698</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a1e43bb19cbfa1abb7167530b1d4c31eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a3d40202f0bca5354203312f56bad3b5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a73fcd60ef6156e8b170ae40002c6782c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a3cb548b2a28d40be611a4f26fe96cb88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a6120373d6c7bbfba13f85e057d932e63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aadf505edcae2341a7e72df416628294d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a1134e5a4f7503e18bef7e74b1662a259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>prev_vertices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0ea0b1ee5bec7fe3d2d8ea575c810dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_tris</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>af2ede8da1d6939efcf4b9b984942753d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_vertices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2953a9947132714b4b2c7331cb9fb894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BVHBuildState</type>
      <name>build_state</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aed755a5dbdfa474d870559d7bb1aed90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVSplitterBase&lt; BV &gt; &gt;</type>
      <name>bv_splitter</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a5c415ad93bc09b5d3c85d0f3637d5f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVFitterBase&lt; BV &gt; &gt;</type>
      <name>bv_fitter</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aade2e92a9283f3f8e80fdb31176990f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHModel&lt; kIOS &gt;</name>
    <filename>a00022.html</filename>
    <base>fcl::CollisionGeometry</base>
    <member kind="function">
      <type>BVHModelType</type>
      <name>getModelType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a754147c1363181ea19fb79466b4b0b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a38fcb5c959db086729dc6d3d1c5bc581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aaf725781a411f0a35ed33f9ca05e3117</anchor>
      <arglist>(const BVHModel &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BVHModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ab0e56d63cc11fc5be315c6593a519a2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BVNode&lt; kIOS &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>af8f720cc202ae8110dff2454a94e5d0b</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>BVNode&lt; kIOS &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a70fefce2841b13fd9011491403e14538</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBVs</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ab34d468caef02b150adcd3777171fbed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0112fcffd86179c8f65ca066166cf38b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a22ce92ddf4d9a7cb9984136f7b7f018c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a7f6f2e5d43358450752e4cecb39fa243</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a7a8c84283932e5b74be5c4cf16f73d31</anchor>
      <arglist>(int num_tris=0, int num_vertices=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addVertex</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a6b4c12b0eea71f6b6c05ae26d4fe4458</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTriangle</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2be4b534e3b68f4873731569cc6ee605</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a1dfdb179ccb477405ac698745ea9643e</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps, const std::vector&lt; Triangle &gt; &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a8291f30200c7e2c72626d1c4376eeb6d</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a70354bb54015495559bb95cd137ccdef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginReplaceModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a452b14badbd22661e6ba4e16d6ab67c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceVertex</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a435f547b9497f5b3c100322492a865a5</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceTriangle</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2740827e790eb5ccab4bc2c8aaf4f2e1</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a7a496766de754af075069e3c5ffb908f</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endReplaceModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a494df75b80618343dc54c64dd75ee23f</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginUpdateModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ad5f8dc040fc693d61023b0b3444d312f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateVertex</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a92fe682f1dea522ba23eb7044a8d46b2</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateTriangle</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ac6e30d451ff58c8f3c2d7ff67f2ca5b4</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a20f309c69f6ca35a30ee7360168cee89</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endUpdateModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a61f276aaacc4b2950a13c9532813f6ee</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>memUsage</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a90ceb613e175879dbfc2b3acb3036a1f</anchor>
      <arglist>(int msg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParentRelative</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a4f7710016d73967b5daa2784ff5aee6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ad4bbf6867f5eb7210bb8776fc23408b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ac5a1760105f3b700721464f9a1832776</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0523bbf2f3990b5607906426ef9d2a81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aadf505edcae2341a7e72df416628294d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a1134e5a4f7503e18bef7e74b1662a259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>prev_vertices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0ea0b1ee5bec7fe3d2d8ea575c810dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_tris</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>af2ede8da1d6939efcf4b9b984942753d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_vertices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2953a9947132714b4b2c7331cb9fb894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BVHBuildState</type>
      <name>build_state</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aed755a5dbdfa474d870559d7bb1aed90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVSplitterBase&lt; kIOS &gt; &gt;</type>
      <name>bv_splitter</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a5c415ad93bc09b5d3c85d0f3637d5f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVFitterBase&lt; kIOS &gt; &gt;</type>
      <name>bv_fitter</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aade2e92a9283f3f8e80fdb31176990f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHModel&lt; OBB &gt;</name>
    <filename>a00022.html</filename>
    <base>fcl::CollisionGeometry</base>
    <member kind="function">
      <type>BVHModelType</type>
      <name>getModelType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a754147c1363181ea19fb79466b4b0b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a38fcb5c959db086729dc6d3d1c5bc581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aaf725781a411f0a35ed33f9ca05e3117</anchor>
      <arglist>(const BVHModel &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BVHModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ab0e56d63cc11fc5be315c6593a519a2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BVNode&lt; OBB &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>af8f720cc202ae8110dff2454a94e5d0b</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>BVNode&lt; OBB &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a70fefce2841b13fd9011491403e14538</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBVs</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ab34d468caef02b150adcd3777171fbed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0112fcffd86179c8f65ca066166cf38b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a22ce92ddf4d9a7cb9984136f7b7f018c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a7f6f2e5d43358450752e4cecb39fa243</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a7a8c84283932e5b74be5c4cf16f73d31</anchor>
      <arglist>(int num_tris=0, int num_vertices=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addVertex</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a6b4c12b0eea71f6b6c05ae26d4fe4458</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTriangle</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2be4b534e3b68f4873731569cc6ee605</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a1dfdb179ccb477405ac698745ea9643e</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps, const std::vector&lt; Triangle &gt; &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a8291f30200c7e2c72626d1c4376eeb6d</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a70354bb54015495559bb95cd137ccdef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginReplaceModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a452b14badbd22661e6ba4e16d6ab67c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceVertex</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a435f547b9497f5b3c100322492a865a5</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceTriangle</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2740827e790eb5ccab4bc2c8aaf4f2e1</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a7a496766de754af075069e3c5ffb908f</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endReplaceModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a494df75b80618343dc54c64dd75ee23f</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginUpdateModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ad5f8dc040fc693d61023b0b3444d312f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateVertex</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a92fe682f1dea522ba23eb7044a8d46b2</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateTriangle</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ac6e30d451ff58c8f3c2d7ff67f2ca5b4</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a20f309c69f6ca35a30ee7360168cee89</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endUpdateModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a61f276aaacc4b2950a13c9532813f6ee</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>memUsage</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a90ceb613e175879dbfc2b3acb3036a1f</anchor>
      <arglist>(int msg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParentRelative</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a4f7710016d73967b5daa2784ff5aee6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ad4bbf6867f5eb7210bb8776fc23408b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ac5a1760105f3b700721464f9a1832776</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0523bbf2f3990b5607906426ef9d2a81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aadf505edcae2341a7e72df416628294d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a1134e5a4f7503e18bef7e74b1662a259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>prev_vertices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0ea0b1ee5bec7fe3d2d8ea575c810dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_tris</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>af2ede8da1d6939efcf4b9b984942753d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_vertices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2953a9947132714b4b2c7331cb9fb894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BVHBuildState</type>
      <name>build_state</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aed755a5dbdfa474d870559d7bb1aed90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVSplitterBase&lt; OBB &gt; &gt;</type>
      <name>bv_splitter</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a5c415ad93bc09b5d3c85d0f3637d5f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVFitterBase&lt; OBB &gt; &gt;</type>
      <name>bv_fitter</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aade2e92a9283f3f8e80fdb31176990f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHModel&lt; OBBRSS &gt;</name>
    <filename>a00022.html</filename>
    <base>fcl::CollisionGeometry</base>
    <member kind="function">
      <type>BVHModelType</type>
      <name>getModelType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a754147c1363181ea19fb79466b4b0b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a38fcb5c959db086729dc6d3d1c5bc581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aaf725781a411f0a35ed33f9ca05e3117</anchor>
      <arglist>(const BVHModel &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BVHModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ab0e56d63cc11fc5be315c6593a519a2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BVNode&lt; OBBRSS &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>af8f720cc202ae8110dff2454a94e5d0b</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>BVNode&lt; OBBRSS &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a70fefce2841b13fd9011491403e14538</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBVs</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ab34d468caef02b150adcd3777171fbed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0112fcffd86179c8f65ca066166cf38b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a22ce92ddf4d9a7cb9984136f7b7f018c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a7f6f2e5d43358450752e4cecb39fa243</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a7a8c84283932e5b74be5c4cf16f73d31</anchor>
      <arglist>(int num_tris=0, int num_vertices=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addVertex</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a6b4c12b0eea71f6b6c05ae26d4fe4458</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTriangle</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2be4b534e3b68f4873731569cc6ee605</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a1dfdb179ccb477405ac698745ea9643e</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps, const std::vector&lt; Triangle &gt; &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a8291f30200c7e2c72626d1c4376eeb6d</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a70354bb54015495559bb95cd137ccdef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginReplaceModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a452b14badbd22661e6ba4e16d6ab67c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceVertex</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a435f547b9497f5b3c100322492a865a5</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceTriangle</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2740827e790eb5ccab4bc2c8aaf4f2e1</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a7a496766de754af075069e3c5ffb908f</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endReplaceModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a494df75b80618343dc54c64dd75ee23f</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginUpdateModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ad5f8dc040fc693d61023b0b3444d312f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateVertex</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a92fe682f1dea522ba23eb7044a8d46b2</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateTriangle</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ac6e30d451ff58c8f3c2d7ff67f2ca5b4</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a20f309c69f6ca35a30ee7360168cee89</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endUpdateModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a61f276aaacc4b2950a13c9532813f6ee</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>memUsage</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a90ceb613e175879dbfc2b3acb3036a1f</anchor>
      <arglist>(int msg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParentRelative</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a4f7710016d73967b5daa2784ff5aee6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ad4bbf6867f5eb7210bb8776fc23408b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ac5a1760105f3b700721464f9a1832776</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0523bbf2f3990b5607906426ef9d2a81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aadf505edcae2341a7e72df416628294d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a1134e5a4f7503e18bef7e74b1662a259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>prev_vertices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0ea0b1ee5bec7fe3d2d8ea575c810dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_tris</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>af2ede8da1d6939efcf4b9b984942753d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_vertices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2953a9947132714b4b2c7331cb9fb894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BVHBuildState</type>
      <name>build_state</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aed755a5dbdfa474d870559d7bb1aed90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVSplitterBase&lt; OBBRSS &gt; &gt;</type>
      <name>bv_splitter</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a5c415ad93bc09b5d3c85d0f3637d5f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVFitterBase&lt; OBBRSS &gt; &gt;</type>
      <name>bv_fitter</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aade2e92a9283f3f8e80fdb31176990f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHModel&lt; RSS &gt;</name>
    <filename>a00022.html</filename>
    <base>fcl::CollisionGeometry</base>
    <member kind="function">
      <type>BVHModelType</type>
      <name>getModelType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a754147c1363181ea19fb79466b4b0b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a38fcb5c959db086729dc6d3d1c5bc581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BVHModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aaf725781a411f0a35ed33f9ca05e3117</anchor>
      <arglist>(const BVHModel &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BVHModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ab0e56d63cc11fc5be315c6593a519a2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BVNode&lt; RSS &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>af8f720cc202ae8110dff2454a94e5d0b</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>BVNode&lt; RSS &gt; &amp;</type>
      <name>getBV</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a70fefce2841b13fd9011491403e14538</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBVs</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ab34d468caef02b150adcd3777171fbed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0112fcffd86179c8f65ca066166cf38b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a22ce92ddf4d9a7cb9984136f7b7f018c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a7f6f2e5d43358450752e4cecb39fa243</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a7a8c84283932e5b74be5c4cf16f73d31</anchor>
      <arglist>(int num_tris=0, int num_vertices=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addVertex</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a6b4c12b0eea71f6b6c05ae26d4fe4458</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTriangle</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2be4b534e3b68f4873731569cc6ee605</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a1dfdb179ccb477405ac698745ea9643e</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps, const std::vector&lt; Triangle &gt; &amp;ts)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a8291f30200c7e2c72626d1c4376eeb6d</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a70354bb54015495559bb95cd137ccdef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginReplaceModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a452b14badbd22661e6ba4e16d6ab67c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceVertex</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a435f547b9497f5b3c100322492a865a5</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceTriangle</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2740827e790eb5ccab4bc2c8aaf4f2e1</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>replaceSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a7a496766de754af075069e3c5ffb908f</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endReplaceModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a494df75b80618343dc54c64dd75ee23f</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>beginUpdateModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ad5f8dc040fc693d61023b0b3444d312f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateVertex</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a92fe682f1dea522ba23eb7044a8d46b2</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateTriangle</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ac6e30d451ff58c8f3c2d7ff67f2ca5b4</anchor>
      <arglist>(const Vec3f &amp;p1, const Vec3f &amp;p2, const Vec3f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>updateSubModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a20f309c69f6ca35a30ee7360168cee89</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>endUpdateModel</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a61f276aaacc4b2950a13c9532813f6ee</anchor>
      <arglist>(bool refit=true, bool bottomup=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>memUsage</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a90ceb613e175879dbfc2b3acb3036a1f</anchor>
      <arglist>(int msg) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeParentRelative</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a4f7710016d73967b5daa2784ff5aee6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ad4bbf6867f5eb7210bb8776fc23408b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>ac5a1760105f3b700721464f9a1832776</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0523bbf2f3990b5607906426ef9d2a81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aadf505edcae2341a7e72df416628294d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a1134e5a4f7503e18bef7e74b1662a259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>prev_vertices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a0ea0b1ee5bec7fe3d2d8ea575c810dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_tris</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>af2ede8da1d6939efcf4b9b984942753d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_vertices</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a2953a9947132714b4b2c7331cb9fb894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BVHBuildState</type>
      <name>build_state</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aed755a5dbdfa474d870559d7bb1aed90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVSplitterBase&lt; RSS &gt; &gt;</type>
      <name>bv_splitter</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>a5c415ad93bc09b5d3c85d0f3637d5f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::shared_ptr&lt; BVFitterBase&lt; RSS &gt; &gt;</type>
      <name>bv_fitter</name>
      <anchorfile>a00022.html</anchorfile>
      <anchor>aade2e92a9283f3f8e80fdb31176990f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::BVHShapeCollisionTraversalNode</name>
    <filename>a00023.html</filename>
    <templarg>BV</templarg>
    <templarg>S</templarg>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHShapeCollisionTraversalNode</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a679b1bf6e6da2fd6fee9fb019b81a1d9</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>abc4a6605a67e77173faddcab7f2dd9d4</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ae79b2c3f929d78df2b0b8cd53ba76a05</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ab793618c1bc82dfc2ca7f5fd40714082</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a0487dfcb21ab83452dcd71f6795c3180</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a3104744f89e6428edf5960a75b689684</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model1</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a4c33124b9feb36f003f2477b2ae2c24a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a79a12d52125bcd66688640709a428a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BV</type>
      <name>model2_bv</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a08e14d45581fc0d24a92b635dbae10e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>aaabd382be1a957654f47cf950295cadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a4098c6a390e0cd9959eac202c461a803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a11704b66523ae0202df6a618b570a28f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHShapeCollisionTraversalNode&lt; kIOS, S &gt;</name>
    <filename>a00023.html</filename>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHShapeCollisionTraversalNode</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a679b1bf6e6da2fd6fee9fb019b81a1d9</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>abc4a6605a67e77173faddcab7f2dd9d4</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ae79b2c3f929d78df2b0b8cd53ba76a05</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ab793618c1bc82dfc2ca7f5fd40714082</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a0487dfcb21ab83452dcd71f6795c3180</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a3104744f89e6428edf5960a75b689684</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; kIOS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a4c33124b9feb36f003f2477b2ae2c24a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a79a12d52125bcd66688640709a428a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>kIOS</type>
      <name>model2_bv</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a08e14d45581fc0d24a92b635dbae10e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>aaabd382be1a957654f47cf950295cadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a4098c6a390e0cd9959eac202c461a803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a11704b66523ae0202df6a618b570a28f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHShapeCollisionTraversalNode&lt; OBB, S &gt;</name>
    <filename>a00023.html</filename>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHShapeCollisionTraversalNode</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a679b1bf6e6da2fd6fee9fb019b81a1d9</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>abc4a6605a67e77173faddcab7f2dd9d4</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ae79b2c3f929d78df2b0b8cd53ba76a05</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ab793618c1bc82dfc2ca7f5fd40714082</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a0487dfcb21ab83452dcd71f6795c3180</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a3104744f89e6428edf5960a75b689684</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBB &gt; *</type>
      <name>model1</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a4c33124b9feb36f003f2477b2ae2c24a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a79a12d52125bcd66688640709a428a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBB</type>
      <name>model2_bv</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a08e14d45581fc0d24a92b635dbae10e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>aaabd382be1a957654f47cf950295cadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a4098c6a390e0cd9959eac202c461a803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a11704b66523ae0202df6a618b570a28f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHShapeCollisionTraversalNode&lt; OBBRSS, S &gt;</name>
    <filename>a00023.html</filename>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHShapeCollisionTraversalNode</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a679b1bf6e6da2fd6fee9fb019b81a1d9</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>abc4a6605a67e77173faddcab7f2dd9d4</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ae79b2c3f929d78df2b0b8cd53ba76a05</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ab793618c1bc82dfc2ca7f5fd40714082</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a0487dfcb21ab83452dcd71f6795c3180</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a3104744f89e6428edf5960a75b689684</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBBRSS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a4c33124b9feb36f003f2477b2ae2c24a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a79a12d52125bcd66688640709a428a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBBRSS</type>
      <name>model2_bv</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a08e14d45581fc0d24a92b635dbae10e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>aaabd382be1a957654f47cf950295cadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a4098c6a390e0cd9959eac202c461a803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a11704b66523ae0202df6a618b570a28f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHShapeCollisionTraversalNode&lt; RSS, S &gt;</name>
    <filename>a00023.html</filename>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHShapeCollisionTraversalNode</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a679b1bf6e6da2fd6fee9fb019b81a1d9</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>abc4a6605a67e77173faddcab7f2dd9d4</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ae79b2c3f929d78df2b0b8cd53ba76a05</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>ab793618c1bc82dfc2ca7f5fd40714082</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a0487dfcb21ab83452dcd71f6795c3180</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a3104744f89e6428edf5960a75b689684</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; RSS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a4c33124b9feb36f003f2477b2ae2c24a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a79a12d52125bcd66688640709a428a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RSS</type>
      <name>model2_bv</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a08e14d45581fc0d24a92b635dbae10e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>aaabd382be1a957654f47cf950295cadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a4098c6a390e0cd9959eac202c461a803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00023.html</anchorfile>
      <anchor>a11704b66523ae0202df6a618b570a28f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::BVHShapeDistanceTraversalNode</name>
    <filename>a00024.html</filename>
    <templarg>BV</templarg>
    <templarg>S</templarg>
    <base>fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHShapeDistanceTraversalNode</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4abdd346a74edc6bd5229c9bd3d6df4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aebca654c142afb3ee4f11d66ac3b4dd0</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>af95aa8dec98ed5ca2af2e7ed2eefb144</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a952d87442444dac0a7f39e1f81eb3d7d</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38fc764c0c00f5ca3ae38fa88ca895dc</anchor>
      <arglist>(int b1, int) const </arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model1</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a9ade8a7e56492638778b16362275d373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a79c03a2a25b936f56ba4ab9b3878db6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BV</type>
      <name>model2_bv</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aacdf1a1e3871541dcdfeb3a1d26eba4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a1cff6535f3e31cbcd56ef943de6d492e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac73cc0a44c269b3ca46ff3db0b2ce8ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac3be9671e2e99d0848c38c56d6e43355</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHShapeDistanceTraversalNode&lt; kIOS, S &gt;</name>
    <filename>a00024.html</filename>
    <base>fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHShapeDistanceTraversalNode</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4abdd346a74edc6bd5229c9bd3d6df4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aebca654c142afb3ee4f11d66ac3b4dd0</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>af95aa8dec98ed5ca2af2e7ed2eefb144</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a952d87442444dac0a7f39e1f81eb3d7d</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38fc764c0c00f5ca3ae38fa88ca895dc</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; kIOS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a9ade8a7e56492638778b16362275d373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a79c03a2a25b936f56ba4ab9b3878db6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>kIOS</type>
      <name>model2_bv</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aacdf1a1e3871541dcdfeb3a1d26eba4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a1cff6535f3e31cbcd56ef943de6d492e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac73cc0a44c269b3ca46ff3db0b2ce8ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac3be9671e2e99d0848c38c56d6e43355</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHShapeDistanceTraversalNode&lt; OBBRSS, S &gt;</name>
    <filename>a00024.html</filename>
    <base>fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHShapeDistanceTraversalNode</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4abdd346a74edc6bd5229c9bd3d6df4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aebca654c142afb3ee4f11d66ac3b4dd0</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>af95aa8dec98ed5ca2af2e7ed2eefb144</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a952d87442444dac0a7f39e1f81eb3d7d</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38fc764c0c00f5ca3ae38fa88ca895dc</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBBRSS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a9ade8a7e56492638778b16362275d373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a79c03a2a25b936f56ba4ab9b3878db6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBBRSS</type>
      <name>model2_bv</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aacdf1a1e3871541dcdfeb3a1d26eba4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a1cff6535f3e31cbcd56ef943de6d492e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac73cc0a44c269b3ca46ff3db0b2ce8ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac3be9671e2e99d0848c38c56d6e43355</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVHShapeDistanceTraversalNode&lt; RSS, S &gt;</name>
    <filename>a00024.html</filename>
    <base>fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>BVHShapeDistanceTraversalNode</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a4abdd346a74edc6bd5229c9bd3d6df4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aebca654c142afb3ee4f11d66ac3b4dd0</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>af95aa8dec98ed5ca2af2e7ed2eefb144</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a952d87442444dac0a7f39e1f81eb3d7d</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a38fc764c0c00f5ca3ae38fa88ca895dc</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; RSS &gt; *</type>
      <name>model1</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a9ade8a7e56492638778b16362275d373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a79c03a2a25b936f56ba4ab9b3878db6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RSS</type>
      <name>model2_bv</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>aacdf1a1e3871541dcdfeb3a1d26eba4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>a1cff6535f3e31cbcd56ef943de6d492e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac73cc0a44c269b3ca46ff3db0b2ce8ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00024.html</anchorfile>
      <anchor>ac3be9671e2e99d0848c38c56d6e43355</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::BVMotionBoundVisitor</name>
    <filename>a00025.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a6c52a694f7c1411d8fed797c99541c4f</anchor>
      <arglist>(const MotionBase &amp;motion) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a4d7d771e5a011d16ae93c34d2370a9f4</anchor>
      <arglist>(const SplineMotion &amp;motion) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>ae1ac9aafc2c22244d1b39e90d4cf104b</anchor>
      <arglist>(const ScrewMotion &amp;motion) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a378e1e2487f6cea5ca649de16e5e9abd</anchor>
      <arglist>(const InterpMotion &amp;motion) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00025.html</anchorfile>
      <anchor>a428f3f02be571e61c5d42f2a12da9fad</anchor>
      <arglist>(const TranslationMotion &amp;motion) const  =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::BVNode</name>
    <filename>a00026.html</filename>
    <templarg>BV</templarg>
    <base>fcl::BVNodeBase</base>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8af28fa3b492ca6f1acea40c81c7f837</anchor>
      <arglist>(const BVNode &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ad12df1f058465b85ca3d1fe82fe6c737</anchor>
      <arglist>(const BVNode &amp;other, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8100c349f660aaf8fcd2324ca7b016d5</anchor>
      <arglist>(const BVNode &amp;other, Vec3f *P1=NULL, Vec3f *P2=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getCenter</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a9e2cea6d1b0ca0eca48b6063ef8ff6b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>getOrientation</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a37e46db3e9d520b6c4165d5d1ba63018</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>getOrientation</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a13e0f1dfa7e08561d7465e508563d7fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>getOrientation</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a070656ab70faafcd6580b7a8676fa7bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>getOrientation</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a5077b8c4eea6e172ca13d9b566a9cb0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>BV</type>
      <name>bv</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a9d0bed18455553d597f52d739364b774</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVNode&lt; kIOS &gt;</name>
    <filename>a00026.html</filename>
    <base>fcl::BVNodeBase</base>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8af28fa3b492ca6f1acea40c81c7f837</anchor>
      <arglist>(const BVNode &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ad12df1f058465b85ca3d1fe82fe6c737</anchor>
      <arglist>(const BVNode &amp;other, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8100c349f660aaf8fcd2324ca7b016d5</anchor>
      <arglist>(const BVNode &amp;other, Vec3f *P1=NULL, Vec3f *P2=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getCenter</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a9e2cea6d1b0ca0eca48b6063ef8ff6b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>getOrientation</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a37e46db3e9d520b6c4165d5d1ba63018</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>kIOS</type>
      <name>bv</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a9d0bed18455553d597f52d739364b774</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVNode&lt; OBB &gt;</name>
    <filename>a00026.html</filename>
    <base>fcl::BVNodeBase</base>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8af28fa3b492ca6f1acea40c81c7f837</anchor>
      <arglist>(const BVNode &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ad12df1f058465b85ca3d1fe82fe6c737</anchor>
      <arglist>(const BVNode &amp;other, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8100c349f660aaf8fcd2324ca7b016d5</anchor>
      <arglist>(const BVNode &amp;other, Vec3f *P1=NULL, Vec3f *P2=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getCenter</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a9e2cea6d1b0ca0eca48b6063ef8ff6b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>getOrientation</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a37e46db3e9d520b6c4165d5d1ba63018</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>OBB</type>
      <name>bv</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a9d0bed18455553d597f52d739364b774</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVNode&lt; OBBRSS &gt;</name>
    <filename>a00026.html</filename>
    <base>fcl::BVNodeBase</base>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8af28fa3b492ca6f1acea40c81c7f837</anchor>
      <arglist>(const BVNode &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ad12df1f058465b85ca3d1fe82fe6c737</anchor>
      <arglist>(const BVNode &amp;other, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8100c349f660aaf8fcd2324ca7b016d5</anchor>
      <arglist>(const BVNode &amp;other, Vec3f *P1=NULL, Vec3f *P2=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getCenter</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a9e2cea6d1b0ca0eca48b6063ef8ff6b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>getOrientation</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a37e46db3e9d520b6c4165d5d1ba63018</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>OBBRSS</type>
      <name>bv</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a9d0bed18455553d597f52d739364b774</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BVNode&lt; RSS &gt;</name>
    <filename>a00026.html</filename>
    <base>fcl::BVNodeBase</base>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8af28fa3b492ca6f1acea40c81c7f837</anchor>
      <arglist>(const BVNode &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>ad12df1f058465b85ca3d1fe82fe6c737</anchor>
      <arglist>(const BVNode &amp;other, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a8100c349f660aaf8fcd2324ca7b016d5</anchor>
      <arglist>(const BVNode &amp;other, Vec3f *P1=NULL, Vec3f *P2=NULL) const</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getCenter</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a9e2cea6d1b0ca0eca48b6063ef8ff6b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>getOrientation</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a37e46db3e9d520b6c4165d5d1ba63018</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>RSS</type>
      <name>bv</name>
      <anchorfile>a00026.html</anchorfile>
      <anchor>a9d0bed18455553d597f52d739364b774</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::BVNodeBase</name>
    <filename>a00027.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>aca7c7648c50717743f1ba867600ebce8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>primitiveId</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>afea641a093c0995ef147c4c848449717</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>leftChild</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a6818d031dda50cb47205f6f5837d1653</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rightChild</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a6a0b8cc8bb56e9f9693cfea19ed26720</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>first_child</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>ad5dbf4a7800e3e363037c70832a3eb77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>first_primitive</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>abac5f855986413897d5d15883869997e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_primitives</name>
      <anchorfile>a00027.html</anchorfile>
      <anchor>a1ba90180a92f8193bce61d6f1cd0d2a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::BVSplitter</name>
    <filename>a00028.html</filename>
    <templarg></templarg>
    <base>fcl::BVSplitterBase</base>
    <member kind="function">
      <type></type>
      <name>BVSplitter</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>aaef464d0d46a068e50ca9b8fcbd66f54</anchor>
      <arglist>(SplitMethodType method)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BVSplitter</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a2d35062cb979cc611d5cb7bbe7dc5e81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>abe046b5fb2e9eb2b7668623be033c4f2</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRule</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>aecd1ed1265406298b205ae3cb3d04bee</anchor>
      <arglist>(const BV &amp;bv, unsigned int *primitive_indices, int num_primitives)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a5a107d4b651b627cce9ab25fcad16077</anchor>
      <arglist>(const Vec3f &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a6c4e63973e009535d8527d25b0e9b3d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a06ff69ea80a1b8aa15e334aaefdf0046</anchor>
      <arglist>(const Vec3f &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>ac43ce29317f5398655c36e898be1ca5c</anchor>
      <arglist>(const Vec3f &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a896106955b9216b09bf36c347d8e10ec</anchor>
      <arglist>(const Vec3f &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>apply</name>
      <anchorfile>a00028.html</anchorfile>
      <anchor>a3151ba59db227b4f2b32a2ab80cacaa8</anchor>
      <arglist>(const Vec3f &amp;q) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::BVSplitterBase</name>
    <filename>a00029.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>set</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>ab669e60df10a980b2085e4d42609b37b</anchor>
      <arglist>(Vec3f *vertices_, Triangle *tri_indices_, BVHModelType type_)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeRule</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a3bd11911e4da4a6aa56b2a3b6fbfb6da</anchor>
      <arglist>(const BV &amp;bv, unsigned int *primitive_indices, int num_primitives)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>apply</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a57eb6b11668cdb90fb8b0a106f5151e1</anchor>
      <arglist>(const Vec3f &amp;q) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00029.html</anchorfile>
      <anchor>a3732795634a006eceec0c8ee7038db33</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Capsule</name>
    <filename>a00030.html</filename>
    <base>fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Capsule</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>af888d8319e747743732ab65baaceb43c</anchor>
      <arglist>(FCL_REAL radius_, FCL_REAL lz_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a1efe297e6249535276e1222ed5a25696</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a3dee7736092cfda63bed68c0918e778e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a4746f24884a403e4940959c4b02bbd55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a43c17d7fff0b9c8cbeb25c23e611f829</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a43c945454170e6baa9228d3a0398e1e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>lz</name>
      <anchorfile>a00030.html</anchorfile>
      <anchor>a9a367d9640661166c36b5eb5e977d429</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::CollisionFunctionMatrix</name>
    <filename>a00031.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::size_t(*</type>
      <name>CollisionFunc</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a28643cdca9b0e63b294afff1f702eb01</anchor>
      <arglist>)(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionFunctionMatrix</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>a50ff0b720d647e2ccda010f87719ae70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>CollisionFunc</type>
      <name>collision_matrix</name>
      <anchorfile>a00031.html</anchorfile>
      <anchor>adec94ad2f44e521192d7b603905e8f0c</anchor>
      <arglist>[NODE_COUNT][NODE_COUNT]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::CollisionGeometry</name>
    <filename>a00032.html</filename>
    <member kind="function">
      <type></type>
      <name>CollisionGeometry</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae53cf946fe77271bd11c830d93955ce0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CollisionGeometry</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>add7ec3c58a7a53d6bf4ea7cd1bfa22c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af900b496c6a7a080564f04f1456938ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a68a1cdb7d1230a0110d45dbfc97e6c72</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a959bb5b7de75d5ecbd7227ce3597a165</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getUserData</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a9dfc845bf3d8fae809aff769d6a19a27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserData</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a4d705c15632b7e721c4f5055c04a2201</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOccupied</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a0847d8b754e8b865eddae64b2156c9df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFree</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5b348810aa523d1184abcdcba8951760</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUncertain</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a3d0dd5c1f83b306e83e1e1a67b33b7b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a46cb19e2341494795c59202e363d980e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a583932fb53ab6b591cee912ef6718480</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a5d57bced4f85197c5193770b9280f78b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix3f</type>
      <name>computeMomentofInertiaRelatedToCOM</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>aa8bbec834ffc8f3716868133ffd969a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>aabb_center</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a1c235489affcb9b8777cb89361332967</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>aabb_radius</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>af3528201b37ef04d5cb177fa09091869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AABB</type>
      <name>aabb_local</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a66b5eb8dc9bc2d7f0764bee457d270a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>user_data</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>acbea20af82e97729c5eef23b3a33af1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ae0251b4154d5edf256b8412379be145d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>threshold_occupied</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>ac4e268b65096484c010eb0f8e859155c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>threshold_free</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a7cf41f9a0d3e1e275455c82d9f8ad511</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::CollisionObject</name>
    <filename>a00033.html</filename>
    <member kind="function">
      <type></type>
      <name>CollisionObject</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a0c908d515e47614e9f432b3aafbbba62</anchor>
      <arglist>(const boost::shared_ptr&lt; CollisionGeometry &gt; &amp;cgeom_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionObject</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ab075fbb5c09bb90ff1831486adca6145</anchor>
      <arglist>(const boost::shared_ptr&lt; CollisionGeometry &gt; &amp;cgeom_, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollisionObject</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a28b5015e9b1f978e7ec1ebf87ca54f38</anchor>
      <arglist>(const boost::shared_ptr&lt; CollisionGeometry &gt; &amp;cgeom_, const Matrix3f &amp;R, const Vec3f &amp;T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CollisionObject</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a615c37c8f7435ffc75da5a15a44f596f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a3968f6666038f73c3abbe9298e887c00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a7a625c0026c43c212b8e0201d1b24107</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AABB &amp;</type>
      <name>getAABB</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a0fd3cac3e79991186fe0c73fc59cdc6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeAABB</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>afd35e3ad701e430d6ee9723db61f99a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getUserData</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>aec2cf6a2ccde936e77a6e63741685135</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserData</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a06435d37025e50418203c175ee10af82</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getTranslation</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ac4875449f5e7b707e405355fe48c7115</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getRotation</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a6e614b13c03c7ef3ae8f9f9a05e675bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion3f &amp;</type>
      <name>getQuatRotation</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a349463e3df0f4023c2bb9b031d95408b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>getTransform</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ac01f31c4c1e49456a8e25f8ada2428c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a0f1df6823a4d6664b336a158c0123097</anchor>
      <arglist>(const Matrix3f &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTranslation</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a0682f748c0e2b300a7cf3a60891366b5</anchor>
      <arglist>(const Vec3f &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuatRotation</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a8fdda156c9c9553612251170a78fe4a1</anchor>
      <arglist>(const Quaternion3f &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a4114b7bbfdc9e9ff6c07e915dca6135f</anchor>
      <arglist>(const Matrix3f &amp;R, const Vec3f &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a5326661a4b80a61d95a82e23614d3743</anchor>
      <arglist>(const Quaternion3f &amp;q, const Vec3f &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a50e651b50fc02b8313c6102559473a3f</anchor>
      <arglist>(const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentityTransform</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ae31f099796130a10ae6e2303b93a7987</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentityTransform</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a0a311aa063f466810f507f916f9be690</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_DEPRECATED const CollisionGeometry *</type>
      <name>getCollisionGeometry</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a112a65767bad81992e5438e441f02ea8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; const CollisionGeometry &gt; &amp;</type>
      <name>collisionGeometry</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a7faf64a9c30e94f2aa544d867a463d92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; CollisionGeometry &gt; &amp;</type>
      <name>collisionGeometry</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a66de824c5d391fb24b23edc700ac7b93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getCostDensity</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a8f5a9fefb9ec5b67d7fc1a20f7d5739c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCostDensity</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a332f826a90972d9c71de7fad027b6c45</anchor>
      <arglist>(FCL_REAL c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOccupied</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>ab9b2b11abf2e79d1f0a6aad56bc06d19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFree</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a6474c3783843de3cc8450d17c0119044</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUncertain</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a9dded95ba24ff2ecf8ffc9ba4cdabfa6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; CollisionGeometry &gt;</type>
      <name>cgeom</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a43766006c7cf9dac1671624228d5ca2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; const CollisionGeometry &gt;</type>
      <name>cgeom_const</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a36d1c7b6304a6cc86f3a0704d3eab0e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Transform3f</type>
      <name>t</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>acaa4a0845ba3859ca6c614c3cb7b7ab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AABB</type>
      <name>aabb</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>a68074222ff204fe01a9c626eff358e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>user_data</name>
      <anchorfile>a00033.html</anchorfile>
      <anchor>af5c9d0303539b598179f28e79590ecad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::CollisionRequest</name>
    <filename>a00034.html</filename>
    <member kind="function">
      <type></type>
      <name>CollisionRequest</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a1c55c6e9d7ee2540e60a823b8c177b58</anchor>
      <arglist>(size_t num_max_contacts_=1, bool enable_contact_=false, bool enable_distance_lower_bound_=false, size_t num_max_cost_sources_=1, bool enable_cost_=false, bool use_approximate_cost_=true, GJKSolverType gjk_solver_type_=GST_LIBCCD)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>af76525f0efe3b05be9d2bccd122689db</anchor>
      <arglist>(const CollisionResult &amp;result) const </arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>num_max_contacts</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a1262cef2d8988af674b69e2b0baa53ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_contact</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a1f985d6551ef5a10655e9890e2d06608</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_distance_lower_bound</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a94c755b306ffe7f10015c1e974fe43c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>num_max_cost_sources</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a9b71f864acc0b49c7feb97585b444818</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_cost</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a929be08b1d77aaca5645e6b299a73b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_approximate_cost</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>ac79d33b40b171a27bb88d33420d80cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GJKSolverType</type>
      <name>gjk_solver_type</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>aa6e12aca49ff98133d28af6a085a1f2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_cached_gjk_guess</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>a12c2827fd8deae6387299859bbef8512</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>cached_gjk_guess</name>
      <anchorfile>a00034.html</anchorfile>
      <anchor>af3cdbe1188e0dc882e82f59d8c1beb7e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::CollisionResult</name>
    <filename>a00035.html</filename>
    <member kind="function">
      <type></type>
      <name>CollisionResult</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a9fd32e99205c2b503c1eed46c68167c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addContact</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>af3f489f16cae20ce995fbe2559cd41fc</anchor>
      <arglist>(const Contact &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCostSource</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>aedb3af0a5196cfd35dbd481da6136950</anchor>
      <arglist>(const CostSource &amp;c, std::size_t num_max_cost_sources)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a2a0794ed26bcc805a52ed059307cd341</anchor>
      <arglist>(const CollisionResult &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCollision</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>aed599cb31600ec6d0585d9adb4cde946</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numContacts</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a42888e5008d832b5f5f51e2c4f4d7825</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCostSources</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a44362bb0363f3e164e4416827bdff3b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Contact &amp;</type>
      <name>getContact</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>afccdb2f211dc2aa518324952bd05c19e</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getContacts</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>aaee5a51642c4c8cac0d5369d00d0c79f</anchor>
      <arglist>(std::vector&lt; Contact &gt; &amp;contacts_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCostSources</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a4d7d50999390d74fec50d54a89d4e60f</anchor>
      <arglist>(std::vector&lt; CostSource &gt; &amp;cost_sources_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>a98bc785bea0d3f3c5cb86103b4309663</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>cached_gjk_guess</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>adc106b8ef6d043f08c294cdb6156531e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>distance_lower_bound</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>afecd8c2544d6e2ebb07af906b58e1a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>invertResults</name>
      <anchorfile>a00035.html</anchorfile>
      <anchor>ac194dfff179a5026c233c9d4489ca6d4</anchor>
      <arglist>(CollisionResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::CollisionTraversalNodeBase</name>
    <filename>a00036.html</filename>
    <base>fcl::TraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>CollisionTraversalNodeBase</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a3da808c2b3f4030b341ad5b224ec7707</anchor>
      <arglist>(bool enable_distance_lower_bound_=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CollisionTraversalNodeBase</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a0a794fa7dfb6bdfb255b0c5b186faf15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>BVTesting</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ac083443b8e69e46505a3f0d201e72f0f</anchor>
      <arglist>(int b1, int b2) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>BVTesting</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a470733c9240b54b63c0d54b0fc2b0a02</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>leafTesting</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>ad24cf5c57422db078c02e3905c9e9e3e</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canStop</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>aa66fe0d3b19cb4bc994ccabcd0a6f650</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableStatistics</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>aa488805fdaa9174526f34bb397ed2083</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="variable">
      <type>CollisionRequest</type>
      <name>request</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a9b63d94fed095cf53f5105d855d5892a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CollisionResult *</type>
      <name>result</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>aca58aa9ffbc9748a2b856946988b2772</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_statistics</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a0b389d65a7cf3211c3fd4f482d36798e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_distance_lower_bound</name>
      <anchorfile>a00036.html</anchorfile>
      <anchor>a7c83ab48e9de11368e3cb19c7f1a18dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Cone</name>
    <filename>a00037.html</filename>
    <base>fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Cone</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>abd87740fe97bf00cfef3f3534c4aa0cf</anchor>
      <arglist>(FCL_REAL radius_, FCL_REAL lz_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a5601dff1358f11aaecc2c0fd1be5c7ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a5babe8d46bd2f9badabd56cc7fa9e766</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>ac6178663c1b427213b8f5f7081663040</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a087b39271ff6558b94f3f675333d6ee5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>a709ce52a035444c7c7fe6a8b0657ba0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>aebd4cf71cbe0f2115b2fd8fc166bb4d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>lz</name>
      <anchorfile>a00037.html</anchorfile>
      <anchor>abec988fb66fdc172da2e97b2979c6d6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::ConservativeAdvancementFunctionMatrix</name>
    <filename>a00038.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>FCL_REAL(*</type>
      <name>ConservativeAdvancementFunc</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a038ed71ee05c02713f7760f747ca145c</anchor>
      <arglist>)(const CollisionGeometry *o1, const MotionBase *motion1, const CollisionGeometry *o2, const MotionBase *motion2, const NarrowPhaseSolver *nsolver, const ContinuousCollisionRequest &amp;request, ContinuousCollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConservativeAdvancementFunctionMatrix</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>a66a676190fe4136d28691d7c9bf4c26d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ConservativeAdvancementFunc</type>
      <name>conservative_advancement_matrix</name>
      <anchorfile>a00038.html</anchorfile>
      <anchor>abbf838bc2cba550e645534d0e442c05c</anchor>
      <arglist>[NODE_COUNT][NODE_COUNT]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::ConservativeAdvancementStackData</name>
    <filename>a00039.html</filename>
    <member kind="function">
      <type></type>
      <name>ConservativeAdvancementStackData</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aff9ceacee329cbb32769fb7955ada01a</anchor>
      <arglist>(const Vec3f &amp;P1_, const Vec3f &amp;P2_, int c1_, int c2_, FCL_REAL d_)</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>P1</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aaa6dec1cbd0f87b71d25424e4d190473</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>P2</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>ad2931e302f84b80fe1e6af84df6726fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>c1</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aed4c702c50323406be7d909bb15703e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>c2</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>af2082751f3c5a9c9ee9a7b174d7f150d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>d</name>
      <anchorfile>a00039.html</anchorfile>
      <anchor>aa04e131c74749aceb38ac38f018ea18b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::Contact</name>
    <filename>a00040.html</filename>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ad7723693935aa555b96614d341b63054</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a260104d65103e4df5307c43c7b590661</anchor>
      <arglist>(const CollisionGeometry *o1_, const CollisionGeometry *o2_, int b1_, int b2_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Contact</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>aa38d4ee0aee874f65954e718d2fe9367</anchor>
      <arglist>(const CollisionGeometry *o1_, const CollisionGeometry *o2_, int b1_, int b2_, const Vec3f &amp;pos_, const Vec3f &amp;normal_, FCL_REAL depth_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a4ebd5d4bfab90cd2be7a71f7bffd1356</anchor>
      <arglist>(const Contact &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ae2af7bffceaa31f4abd15139675a5132</anchor>
      <arglist>(const Contact &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>const CollisionGeometry *</type>
      <name>o1</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ac66af1f59a951e537da106d21bc55f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CollisionGeometry *</type>
      <name>o2</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ae5d8bbf343d94b19ec3226c4e2d3d13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b1</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>aa566737f7417df11b98d2a155c8003b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b2</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>afb71a9238c264c87bf6fdddf66d7b89e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>normal</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ad754af1e733163a9a096af189ea93c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>pos</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>a036eab66253e259be7405773918e4618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>penetration_depth</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ad05e347ba908fe727e77bed944c78f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NONE</name>
      <anchorfile>a00040.html</anchorfile>
      <anchor>ad53f96f08a5dc40838a43e74385febc8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ContinuousCollisionObject</name>
    <filename>a00041.html</filename>
    <member kind="function">
      <type></type>
      <name>ContinuousCollisionObject</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>aaa093e2b47697e40582beb239e551c8b</anchor>
      <arglist>(const boost::shared_ptr&lt; CollisionGeometry &gt; &amp;cgeom_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContinuousCollisionObject</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>aa83f5209c3aabf286424c8e2f3675b64</anchor>
      <arglist>(const boost::shared_ptr&lt; CollisionGeometry &gt; &amp;cgeom_, const boost::shared_ptr&lt; MotionBase &gt; &amp;motion_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ContinuousCollisionObject</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a3cd474eed3b8b66ecafdb6b523d7b570</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a06daa69b1552549ab1535b1a284c32e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a996913ad545044b5fcb0a10e190b7a0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const AABB &amp;</type>
      <name>getAABB</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>abd1d9241c8821fa5413eee4033b047a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeAABB</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a6d9922a33b39286a469aed138c45c69a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getUserData</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ac01f6a9d4484af72c35dcff8b956c2b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUserData</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>ae79da2672b75c0d391ad0327404cadb0</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type>MotionBase *</type>
      <name>getMotion</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a99bbadeec1b44bf74ed8aa7a60967ea7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_DEPRECATED const CollisionGeometry *</type>
      <name>getCollisionGeometry</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a0d71bdb632a70f525cbf6cc0f6424fa5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; const CollisionGeometry &gt; &amp;</type>
      <name>collisionGeometry</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a5f202071c52c17fe01b9f58ad202cff2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; CollisionGeometry &gt;</type>
      <name>cgeom</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a71797728056934753749e10cc4db564c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; const CollisionGeometry &gt;</type>
      <name>cgeom_const</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a9dc19a14d106f261c8944b5d0352ed74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; MotionBase &gt;</type>
      <name>motion</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>aa928ef2706cd1e8711686f961937194a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AABB</type>
      <name>aabb</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a682524b9b98307e2fe35d997a22914be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>user_data</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a81403340c91fe06778132cf1cf87044a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::ContinuousCollisionRequest</name>
    <filename>a00042.html</filename>
    <member kind="function">
      <type></type>
      <name>ContinuousCollisionRequest</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a34f68a0c3b9c54cbf5662443b166b829</anchor>
      <arglist>(std::size_t num_max_iterations_=10, FCL_REAL toc_err_=0.0001, CCDMotionType ccd_motion_type_=CCDM_TRANS, GJKSolverType gjk_solver_type_=GST_LIBCCD, CCDSolverType ccd_solver_type_=CCDC_NAIVE)</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>num_max_iterations</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a5cb44ff89683c68265f83f0f91ceb3d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>toc_err</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a2bd5f1bae9babd366dd69c3d3ab8c9bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CCDMotionType</type>
      <name>ccd_motion_type</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ae771968881a84b6e4e19bc28eb198a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GJKSolverType</type>
      <name>gjk_solver_type</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>ae9df95bc799c838a71d8cae689a947bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CCDSolverType</type>
      <name>ccd_solver_type</name>
      <anchorfile>a00042.html</anchorfile>
      <anchor>a014c303ccfd83aa544a297de0cffd016</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::ContinuousCollisionResult</name>
    <filename>a00043.html</filename>
    <member kind="function">
      <type></type>
      <name>ContinuousCollisionResult</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a2e155009c5ea3820e05e33b0f3e58eaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>is_collide</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>aaf4ed2461361fbf9fe75bae992257a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>time_of_contact</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>aae24c953e8763ba1e01b3da91b16d290</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>contact_tf1</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a4c8c087a80c7c7c18cb878bdba05920f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>contact_tf2</name>
      <anchorfile>a00043.html</anchorfile>
      <anchor>a51ad0d0532f1ae17473b3e247767e463</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Convex</name>
    <filename>a00044.html</filename>
    <base>fcl::ShapeBase</base>
    <class kind="struct">fcl::Convex::Edge</class>
    <member kind="function">
      <type></type>
      <name>Convex</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a5075e2aad32c5274af29ad38b81aefad</anchor>
      <arglist>(Vec3f *plane_normals_, FCL_REAL *plane_dis_, int num_planes_, Vec3f *points_, int, int *polygons_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Convex</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a2694257cebe17f45455c143ebc4b6270</anchor>
      <arglist>(const Convex &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Convex</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a2378231877ebb67b895918e2012e9009</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a6a8e0ca59e200572001fb1855fceb6d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ab1d0a7694e8fc87c1893aca991668052</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a9357bbfa4c588ed51dc5b871a904b321</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>computeCOM</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aa58321bf11b04f82551d0967f820bbc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ad2c00f1770d072465fcfea5c52cbe882</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>plane_normals</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a99c79facbc378f7f57d6c6ac4dd89767</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL *</type>
      <name>plane_dis</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ac23f94a3a3d8b69f276b87645e510c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>polygons</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ab200afcbdf83e09edc51f741fb5dc9ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>points</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a5363a53789755f6a11ced1a89dd86480</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_points</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ae3a7a826f88000ffe1ced193bbca2a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_edges</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a2bc5327a5f5120e2210a44d904c2274b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_planes</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a17f8aa9a4142b5326eb7b6ba172ef88e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Edge *</type>
      <name>edges</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>aa0193b2c027765038b6d5537a63deaf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>center</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a3e5a77880536f3512f70c701a7ab6ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillEdges</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a521f8fe62508abe1746ea560c457f0be</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::CostSource</name>
    <filename>a00045.html</filename>
    <member kind="function">
      <type></type>
      <name>CostSource</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ab72fff7637d5e3f5f8d9be93c9ca8e1a</anchor>
      <arglist>(const Vec3f &amp;aabb_min_, const Vec3f &amp;aabb_max_, FCL_REAL cost_density_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CostSource</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a48eeeab3f2d1b6da221c60eb90a41ce1</anchor>
      <arglist>(const AABB &amp;aabb, FCL_REAL cost_density_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CostSource</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a83cda69821eb37732a810bfcb0e76765</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ab1391bf6323b5c5c930455a64e2366fe</anchor>
      <arglist>(const CostSource &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a31af84e2e488340c25055748479817e5</anchor>
      <arglist>(const CostSource &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>aabb_min</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a2a22ec268b4994a3c89f68fa31fd2595</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>aabb_max</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a33fdaf05798bf64b5df1e854e3d9bd40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>a0986ff78c89aec3d5b86e638254b5c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>total_cost</name>
      <anchorfile>a00045.html</anchorfile>
      <anchor>ace85e17a771221828b830b778b51907c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Cylinder</name>
    <filename>a00046.html</filename>
    <base>fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Cylinder</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a3a6c181b630f846033a28dff2e471263</anchor>
      <arglist>(FCL_REAL radius_, FCL_REAL lz_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a360bc95f7051a9012e084c0cbe01de03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aea5ff111030cb825c363a30b83ebc85e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>ab35486cfaf3bcff4950290bc06e64e02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a703c48fcb679e6d3a88c3a932e443cfc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>a3c41b3ac6482b0df3ae7c8fc6b30e211</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>lz</name>
      <anchorfile>a00046.html</anchorfile>
      <anchor>aa7a7d86e7948b8407d1d708035239e54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::deduce_fcl_type</name>
    <filename>a00047.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>coefwise</templarg>
  </compound>
  <compound kind="struct">
    <name>internal::deduce_fcl_type</name>
    <filename>a00048.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>coefwise</templarg>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::deduce_fcl_type&lt; Derived, OtherDerived, false &gt;</name>
    <filename>a00049.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ProductReturnType&lt; Derived, OtherDerived &gt;::Type</type>
      <name>Type</name>
      <anchorfile>a00049.html</anchorfile>
      <anchor>a0f5149217013654fa809aa71328a328d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>internal::deduce_fcl_type&lt; Derived, OtherDerived, false &gt;</name>
    <filename>a00050.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ProductReturnType&lt; Derived, OtherDerived &gt;::Type</type>
      <name>Type</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a664b134cf9477dc8e508de9c9189ce9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::deduce_fcl_type&lt; Derived, OtherDerived, true &gt;</name>
    <filename>a00051.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>CwiseBinaryOp&lt; scalar_multiple_op&lt; typename Derived::Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>Type</name>
      <anchorfile>a00051.html</anchorfile>
      <anchor>abec391102da9b31a9178ec8519ee20f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>internal::deduce_fcl_type&lt; Derived, OtherDerived, true &gt;</name>
    <filename>a00052.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>CwiseBinaryOp&lt; scalar_multiple_op&lt; typename Derived::Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>Type</name>
      <anchorfile>a00052.html</anchorfile>
      <anchor>a468b0403cb9e8602d17369a4fa0b7dd3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::DistanceFunctionMatrix</name>
    <filename>a00053.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>FCL_REAL(*</type>
      <name>DistanceFunc</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>ab39744ccb5c2c39535285c174cf63fd9</anchor>
      <arglist>)(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceFunctionMatrix</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>afe56246dedbc849a2c5b9033edfd2b2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>DistanceFunc</type>
      <name>distance_matrix</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a3aba170419304f3069766553d8be37f2</anchor>
      <arglist>[NODE_COUNT][NODE_COUNT]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::DistanceRequest</name>
    <filename>a00054.html</filename>
    <member kind="function">
      <type></type>
      <name>DistanceRequest</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a262f681c907056e3cccb2b59231552cf</anchor>
      <arglist>(bool enable_nearest_points_=false, FCL_REAL rel_err_=0.0, FCL_REAL abs_err_=0.0, GJKSolverType gjk_solver_type_=GST_LIBCCD)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSatisfied</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>ac82e4d6023ce9696e7e2a41620978852</anchor>
      <arglist>(const DistanceResult &amp;result) const </arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_nearest_points</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a2d6fc162e37083d4c520789dd951ba76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>aa30e423392591534888df4f45ea9c95a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>a8f9f2996c3be165117a3e063b1e58bad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GJKSolverType</type>
      <name>gjk_solver_type</name>
      <anchorfile>a00054.html</anchorfile>
      <anchor>afb9663fd581e15a012d059ee9ace18a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::DistanceResult</name>
    <filename>a00055.html</filename>
    <member kind="function">
      <type></type>
      <name>DistanceResult</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>aeb89cc3a824c62262aec0bb038327fac</anchor>
      <arglist>(FCL_REAL min_distance_=std::numeric_limits&lt; FCL_REAL &gt;::max())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a88235ec871808ab906e172dc5073cef2</anchor>
      <arglist>(FCL_REAL distance, const CollisionGeometry *o1_, const CollisionGeometry *o2_, int b1_, int b2_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a84af253a0a0da10082e1ef949a70e065</anchor>
      <arglist>(FCL_REAL distance, const CollisionGeometry *o1_, const CollisionGeometry *o2_, int b1_, int b2_, const Vec3f &amp;p1, const Vec3f &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a387d9ccb92e8f9c2f3552d461b055e81</anchor>
      <arglist>(const DistanceResult &amp;other_result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a35db4ff58af19a5e8f39015683da482e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>min_distance</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>ada3a31aee6c56f493b7b2d6364128fa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>nearest_points</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a0334911d9647bbb838c13bc7abd08d45</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>const CollisionGeometry *</type>
      <name>o1</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a02ac9128db28152589088dca2f0a08f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const CollisionGeometry *</type>
      <name>o2</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a3d3063c735bafda0cb247c1f1c238d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b1</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>a459fca527b209619c4477687a53f8d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b2</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>aa78964959532ee552deabe84b5aeefa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>NONE</name>
      <anchorfile>a00055.html</anchorfile>
      <anchor>ac2d029f411727091f22a04c77238593f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::DistanceTraversalNodeBase</name>
    <filename>a00056.html</filename>
    <base>fcl::TraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>DistanceTraversalNodeBase</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a406675629d318dd3edfdbe66c673464c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DistanceTraversalNodeBase</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a87175ea3b9ca9c81ac0a744a1f4f9c15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a1ae91ff94c08eb6101adbacb1d64ca85</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>leafTesting</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a360ec21ea9e8ec42db2e273e48c153eb</anchor>
      <arglist>(int b1, int b2) const  =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>canStop</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a7d1d0ada63329266f19c75ca92cfb4cf</anchor>
      <arglist>(FCL_REAL c) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableStatistics</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a396fff56436438c162e26f13d8aa49b8</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="variable">
      <type>DistanceRequest</type>
      <name>request</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a2a7c09a3b02f0cee48719d0a1d6387b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DistanceResult *</type>
      <name>result</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a8fc9677d0d65310c1cf87ae50af0c77a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_statistics</name>
      <anchorfile>a00056.html</anchorfile>
      <anchor>a1e5924e385d7b607dc0c3c461fab3db7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::DynamicAABBTreeCollisionManager</name>
    <filename>a00057.html</filename>
    <base>fcl::BroadPhaseCollisionManager</base>
    <member kind="typedef">
      <type>NodeBase&lt; AABB &gt;</type>
      <name>DynamicAABBNode</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>ae3ed17c553120a3da3f82d52e8d67131</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::unordered_map&lt; CollisionObject *, DynamicAABBNode * &gt;</type>
      <name>DynamicAABBTable</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a3cfbdcdf6db0514be6168315b1263ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicAABBTreeCollisionManager</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a7dc91a775ed44fe1ee99620c8f1b56c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObjects</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a17e47d3ff44b8d5e7e5aae4b37760132</anchor>
      <arglist>(const std::vector&lt; CollisionObject * &gt; &amp;other_objs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObject</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>aed6b28e7646a0b2aeb6017204358a413</anchor>
      <arglist>(CollisionObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterObject</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>aac53d09f35bc6530aa6d69bf6261e855</anchor>
      <arglist>(CollisionObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a7615ee9ecfcc83c68b3f9fe3f5adfe94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>aaf6835db90507f8b75fc06323c81c3c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a551730ae47c6fcc587475965eed52341</anchor>
      <arglist>(CollisionObject *updated_obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>add6b28bf3023c5b12629fcfa06349ed7</anchor>
      <arglist>(const std::vector&lt; CollisionObject * &gt; &amp;updated_objs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a62fcd7ea29ba20ae75d7ffd6f8c9c20f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getObjects</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a5d5ac805876fd85517b27f7ff1df6ea3</anchor>
      <arglist>(std::vector&lt; CollisionObject * &gt; &amp;objs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a6ab39140ff5a328c6a5ddac2eb940810</anchor>
      <arglist>(CollisionObject *obj, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a5b36b5ebdbe3d4c94e163d7d449c5ff6</anchor>
      <arglist>(CollisionObject *obj, void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a4a39b58a53b51aca5b7316719159304c</anchor>
      <arglist>(void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a718555cdfc7f72ccdc3358376868dbde</anchor>
      <arglist>(void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a7d438de1a177fed61fdfcc13588f53aa</anchor>
      <arglist>(BroadPhaseCollisionManager *other_manager_, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a41fe0164d64e79070105a71cd0e57ff6</anchor>
      <arglist>(BroadPhaseCollisionManager *other_manager_, void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a1194317930fe12ea46e81c89f13f2426</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a19f85ea667d27165a852d083f6372f57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const HierarchyTree&lt; AABB &gt; &amp;</type>
      <name>getTree</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a642ea5346decab8c1c4081e6b71a7ae5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_tree_nonbalanced_level</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a11ffc4dc5a3e42a64489ba4318ab35b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>tree_incremental_balance_pass</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a0398f33ad1ace4f86ae6022da5536af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int &amp;</type>
      <name>tree_topdown_balance_threshold</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a33182310a75faada5959a730cc1b2b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int &amp;</type>
      <name>tree_topdown_level</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a14639eec63214b87f6d6cc0139a40554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>tree_init_level</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a7baef9cbfc82a89f3a595fb09a8e5e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>octree_as_geometry_collide</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>a478b13b00c01338dbc3501f725eabb2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>octree_as_geometry_distance</name>
      <anchorfile>a00057.html</anchorfile>
      <anchor>adc0c488a9dd87b30b298378878aae3a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::DynamicAABBTreeCollisionManager_Array</name>
    <filename>a00058.html</filename>
    <base>fcl::BroadPhaseCollisionManager</base>
    <member kind="typedef">
      <type>implementation_array::NodeBase&lt; AABB &gt;</type>
      <name>DynamicAABBNode</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a8ffd4796d33e146039c883d6b6c7310f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::unordered_map&lt; CollisionObject *, size_t &gt;</type>
      <name>DynamicAABBTable</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a9abc92366042cf9ede5c8a84b92201b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicAABBTreeCollisionManager_Array</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a899cc7ff65a4b4c3cbc7d6ccae7ffbfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObjects</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a2e6077f6f5d995272d1fb6a1e3318375</anchor>
      <arglist>(const std::vector&lt; CollisionObject * &gt; &amp;other_objs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObject</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a9c98a098dcbd336e4606187f3b945b20</anchor>
      <arglist>(CollisionObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterObject</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a093420e61f1921bb9e8b328b4b7b608d</anchor>
      <arglist>(CollisionObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aaed79cc158b2be7468cd86669f5c5b9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a74e82f21b473f7719f06cd3a735df881</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a257dccf12c4f9426660253c2f4fba7fd</anchor>
      <arglist>(CollisionObject *updated_obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a090b42e8f558ebfaf019c44a1108456a</anchor>
      <arglist>(const std::vector&lt; CollisionObject * &gt; &amp;updated_objs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a657dfaf80f612d232ce587873e122593</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getObjects</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a27acb8ab949e72decad53d477ff53dfe</anchor>
      <arglist>(std::vector&lt; CollisionObject * &gt; &amp;objs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ade71e133e2244b2ed0fcf57f2ee5ec5e</anchor>
      <arglist>(CollisionObject *obj, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a839bef331d0c1b92f87f218895424c0e</anchor>
      <arglist>(CollisionObject *obj, void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a7f57d29607d18ca19693edfc0545ced3</anchor>
      <arglist>(void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>ab1c62f47a52c654e46a6419398de6c9a</anchor>
      <arglist>(void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>acec62639ee9d4c555495579108b9e292</anchor>
      <arglist>(BroadPhaseCollisionManager *other_manager_, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a135ab14a799b2a75d4075c35df449f1a</anchor>
      <arglist>(BroadPhaseCollisionManager *other_manager_, void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a3316207ec2482e8c31156adaf4bc0b1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a2f26e7cea8c0ad2cd4da8a412af3d158</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const implementation_array::HierarchyTree&lt; AABB &gt; &amp;</type>
      <name>getTree</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a4e84beb893f6b2a6f44bfeee8b54325a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>max_tree_nonbalanced_level</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a9c2c684ea2e1fda3e7c87d172590befd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>tree_incremental_balance_pass</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a4e51df3056823a8b9b7e04181f3acd02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int &amp;</type>
      <name>tree_topdown_balance_threshold</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>abe73e63129735909ff2cfa227b89aaa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int &amp;</type>
      <name>tree_topdown_level</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a76a7cf8f7f1baa56cc6c457810ebccac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>tree_init_level</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a2543b6464b873fa6e16e53810e728e42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>octree_as_geometry_collide</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>aebd407079ff148f7ee20d7869a9a9086</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>octree_as_geometry_distance</name>
      <anchorfile>a00058.html</anchorfile>
      <anchor>a6a6169b908b72ca16bbb70f0d4dc3d9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::Convex::Edge</name>
    <filename>a00059.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>first</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>aa03526a1db2ffc21b161d13fb2cae8f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>second</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a123159c7ce53eee96cb580b3ac9af5dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::eigen_m3</name>
    <filename>a00060.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>meta_type</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a962cd5399c99d98502a7f74bb3bb0755</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>eigen_v3&lt; T &gt;</type>
      <name>vector_type</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a693be0198495c1be4c10ec38055a432a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; T, 3, 3 &gt;</type>
      <name>Base</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ae37249286dbcf79bcf64f820185f5cbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::ColXpr</type>
      <name>ColXpr</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a22f68603c1741715b29cb90a86c6ce10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::ConstColXpr</type>
      <name>ConstColXpr</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>acf27b57cb8470b693bfa5e6c3d67dc59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::RowXpr</type>
      <name>RowXpr</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ad5d74d54d20dec0090925dd36d5fb61e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::ConstRowXpr</type>
      <name>ConstRowXpr</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>adc328bbb4995b63d876d11b2046b598c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_m3</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ad7f0f0808fd71e3235272e00374044de</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_m3</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ac2403fcdd5c560b9653218f44c217649</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_m3 &amp;</type>
      <name>operator=</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a19c816d9c64743d8ed1952d6ca21c352</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_m3</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a04ce431b6a927646a281105910cc69ef</anchor>
      <arglist>(T xx, T xy, T xz, T yx, T yy, T yz, T zx, T zy, T zz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_m3</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a8cd8dfe13328106f7ce81a4f8cbb65a6</anchor>
      <arglist>(const vector_type &amp;v1, const vector_type &amp;v2, const vector_type &amp;v3)</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>getColumn</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>afabb2cbca70a769cb6153e42fd6ec430</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>getRow</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a386af1c6d6e9b8fd760787cc1945d284</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>getColumn</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a0e7ac60b96299c7efe6479fab548c04e</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>getRow</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>af40dd8335c2a09b6e044e4b30dc5b4fc</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_m3&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a8f30862f5a6a5ded49d5c74aee8d9429</anchor>
      <arglist>(const eigen_m3&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_m3&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a5a395e6ce1ab5aa59171b7b963a0f85b</anchor>
      <arglist>(const eigen_m3&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_m3&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a8b4af7607df7cc91d723aa1f82b96d13</anchor>
      <arglist>(const eigen_m3&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_m3&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a7c9b2aaf8532ed97f3eb3405710ea17f</anchor>
      <arglist>(T c)</arglist>
    </member>
    <member kind="function">
      <type>eigen_m3&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a80adb7282fa44ceaf500b7ff7cb5e6a0</anchor>
      <arglist>(T c)</arglist>
    </member>
    <member kind="function">
      <type>eigen_m3&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ae4e734e5b442773326f636f708ff02ac</anchor>
      <arglist>(T c)</arglist>
    </member>
    <member kind="function">
      <type>eigen_m3&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a0ca6df58efaa701912e500ae5943f909</anchor>
      <arglist>(T c)</arglist>
    </member>
    <member kind="function">
      <type>eigen_m3&lt; T &gt; &amp;</type>
      <name>transpose</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a88b9f4d2e64ee18ed988400a565865b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>eigen_m3&lt; T &gt; &amp;</type>
      <name>inverse</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ad627607815c4548dd9711e006937d179</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::ProductReturnType&lt; eigen_m3&lt; T &gt;, OtherDerived &gt;::Type</type>
      <name>transposeTimes</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>aafc618b4f9636a2f749bfcb160865bcc</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const Eigen::ProductReturnType&lt; eigen_m3&lt; T &gt;, OtherDerived &gt;::Type</type>
      <name>timesTranspose</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a25646f4fe61cdaa2c1d6eae81b25f838</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transposeDotX</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a82f2caba4a5171b6541a789371c54693</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transposeDotY</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a8080bb90fecff0e388deb9bfcada55e6</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transposeDotZ</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a7389fbf3545410af12176d6acc981c01</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transposeDot</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ada3c9ca7e7e0baebd392a9213bcee3b7</anchor>
      <arglist>(size_t i, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dotX</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a89a7aa4f62a9a1c2b01c3dad5e6f8ad2</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dotY</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>abdd5b5fea22b4524bdf453d6bd99a459</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dotZ</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>ac7be14fcb9ce0bf79048a04a0698df45</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a7307eae13539c166e0fb6d117a5750fa</anchor>
      <arglist>(size_t i, const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>aea309b04f96054416dfcdc7517e8fae0</anchor>
      <arglist>(T xx, T xy, T xz, T yx, T yy, T yz, T zx, T zy, T zz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a8173841e74287a24b13b86a240edf9f4</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const eigen_m3&lt; T &gt; &amp;</type>
      <name>getIdentity</name>
      <anchorfile>a00060.html</anchorfile>
      <anchor>a1c9bf6e387e6954497bbb03082f6a730</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::eigen_v3</name>
    <filename>a00061.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>meta_type</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a86dcd526c5cd022182f6cf005ac902c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; T, 3, 1 &gt;</type>
      <name>Base</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a395712f050e30994bb9af6eb8dd8a3fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_v3</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>af0566706786e6ffb04ec96725bf1148a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_v3</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a4d1bb9f96b987df0d4599e44fd28dcf8</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_v3 &amp;</type>
      <name>operator=</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>adcfe2cadd1ee9a25f622f6d26c886705</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_v3</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ac6ca9d549f52b1866c18abd0ef573cc5</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_v3</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a1ea181848fc5e2399eb7683309292044</anchor>
      <arglist>(T *x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_v3</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>aaefc1e112d5c4a8a722b28d42423d890</anchor>
      <arglist>(T x, T y, T z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a1a13d096460ddaf915f4562a853cfb04</anchor>
      <arglist>(T x, T y, T z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a3debcc4e250a57c9ebf7ca7a6d953362</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a0df42493573aa25bf4a3d82ac93d335a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>eigen_v3&lt; T &gt; &amp;</type>
      <name>ubound</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a2eb559b8b7ac647382ece36a11288a08</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>eigen_v3&lt; T &gt; &amp;</type>
      <name>lbound</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>ada2a7bb142098282ae055721624aa1af</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>eigen_v3&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>abdaa6e2b3a791944b48102dfe710a63c</anchor>
      <arglist>(const eigen_v3&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_v3&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>abe24bdaf1c67ee2528aac79b1de93abf</anchor>
      <arglist>(const eigen_v3&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_v3&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a8c13637f954c9bdc94c4fc3faf6fc224</anchor>
      <arglist>(const eigen_v3&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_v3&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a4e60b1ba621f46a14ac765fc81a87042</anchor>
      <arglist>(const eigen_v3&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_v3&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a7f6cff1c3eb5b5c26fb58b0db070b00f</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>eigen_v3&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>af7ed419d44801fd6c7f878be5928715f</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>eigen_v3&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a021711ddd912a806d1ea7c9e38fd9ef6</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>eigen_v3&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00061.html</anchorfile>
      <anchor>a2898c7c018fde41ecf203f671bcc24da</anchor>
      <arglist>(T t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::eigen_wrapper_m3</name>
    <filename>a00062.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>meta_type</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>ae49c7b0c8f9bf6a073bb21315db45a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>eigen_wrapper_v3&lt; T &gt;</type>
      <name>vector_type</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a48ca67a7ff347b1ec14d0f4f979d8b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; T, 3, 3, Eigen::RowMajor &gt;</type>
      <name>matrix_type</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a256433486e48a6537a64aa7081837e68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; T, 3, 1 &gt;</type>
      <name>inner_col_type</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aa52f17728eb8406ef4b77baefcb35dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>matrix_type::ConstRowXpr</type>
      <name>ConstRowXpr</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a3399582d303c9fc746fc5b7e1df4cc2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_m3</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a7ee62e2f0aa4a171d5e189a6614e7d54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_m3</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>af52a0979d2a7efe8d9f099dd120c114b</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_m3</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a03955fe6b3086bfc8610e79cff96e909</anchor>
      <arglist>(T xx, T xy, T xz, T yx, T yy, T yz, T zx, T zy, T zz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_m3</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>acbbc5dc9679f88bed08ed3150bcdeae2</anchor>
      <arglist>(const vector_type &amp;v1, const vector_type &amp;v2, const vector_type &amp;v3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_m3</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>afcb5140bbdcf024bde3766670f77c288</anchor>
      <arglist>(const eigen_wrapper_m3&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>inner_col_type</type>
      <name>getColumn</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a8550e16ff548707b008686df93655ec2</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>getRow</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a5a48eacc82ad4d21ef27979c1b9c3660</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a255e3c84e365c8ee41bd533a0282dfdb</anchor>
      <arglist>(size_t i, size_t j) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a23b21baa823b37561d3a6f996d29e4df</anchor>
      <arglist>(size_t i, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>vector_type</type>
      <name>operator*</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>ae015018993b8ed7e732478431b84e57c</anchor>
      <arglist>(const vector_type &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a23e5aea6be9d57d0a679e420a8d07f79</anchor>
      <arglist>(const eigen_wrapper_m3&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a07296c6eb30deb79b3a01057fa13bf75</anchor>
      <arglist>(const eigen_wrapper_m3&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a100733ce0bfed1cf809fd56e733724a7</anchor>
      <arglist>(const eigen_wrapper_m3&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a412a502bf3a2fb0cb157a9033e99978b</anchor>
      <arglist>(T c) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a5312ad105e714810aed0c66fc45d4631</anchor>
      <arglist>(T c) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>adf012cd5ca92eb6128a18e339a7afcc6</anchor>
      <arglist>(T c) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a9938e034903ba63e7fc16a55505b243e</anchor>
      <arglist>(T c) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a260657886c6c3d74c2b26af3f4a3a608</anchor>
      <arglist>(const eigen_wrapper_m3&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a7c4fb54270cfe4a050650f78e38c7c75</anchor>
      <arglist>(const eigen_wrapper_m3&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a18af01fc0537ad88c682bc75a9886a26</anchor>
      <arglist>(const eigen_wrapper_m3&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aca185a329b945a652417e37f38a99a6e</anchor>
      <arglist>(T c)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a9c773c7b5ca06806850fa7c47127bdb1</anchor>
      <arglist>(T c)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>abf5e52c50cf10db20f394d15d1b63396</anchor>
      <arglist>(T c)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>ad3ccb17ba33c647194f9039cf93ad7a5</anchor>
      <arglist>(T c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a408f0b00304538883aa6bf82a8da95ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>ae5ef52cea2b2bb87a14b8d165abb0996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>determinant</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aff949168b0f71fda94f6b16d9dc58173</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt; &amp;</type>
      <name>transpose</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>af02bf4a06786f81be1c18b5b01267e0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt; &amp;</type>
      <name>inverse</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aa58b5ac4ea2e3854667850369a8813d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt;</type>
      <name>transposeTimes</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a8e58a56184865d6fde7a8b2dfb868ace</anchor>
      <arglist>(const eigen_wrapper_m3&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt;</type>
      <name>timesTranspose</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>adf8eae152da911eeeefadbae9d98cdc4</anchor>
      <arglist>(const eigen_wrapper_m3&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>vector_type</type>
      <name>transposeTimes</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a725b7ab7545ecc36ba5524776637a2a5</anchor>
      <arglist>(const vector_type &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transposeDotX</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a1b8792a92ed15b4801903cb6ecc5d671</anchor>
      <arglist>(const vector_type &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transposeDotY</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a44f320e2bc44337ff7290f4df28b3572</anchor>
      <arglist>(const vector_type &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transposeDotZ</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a59d8293fb35c2355bf8634af7e8987c3</anchor>
      <arglist>(const vector_type &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transposeDot</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a27c9487e55b0e24612c02fdbb34604ba</anchor>
      <arglist>(size_t i, const vector_type &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dotX</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>ace2c3616ec3967a1f9785dd89089abce</anchor>
      <arglist>(const vector_type &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dotY</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>aa0602276f2b0f37efa8aac1b4f7bab35</anchor>
      <arglist>(const vector_type &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dotZ</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a7cb9121848a0d94866eee9ce718e7d66</anchor>
      <arglist>(const vector_type &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>adc9f4e0942fef875756e5f396c7a4582</anchor>
      <arglist>(size_t i, const vector_type &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a50ac5e01826a04bb4ca15468e181e778</anchor>
      <arglist>(T xx, T xy, T xz, T yx, T yy, T yz, T zx, T zy, T zz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>afd133719b18ddac0c94f322e3feb7cf5</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const eigen_wrapper_m3&lt; T &gt; &amp;</type>
      <name>getIdentity</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>adab9d4252ee7e9936126dc3706dec3cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>matrix_type</type>
      <name>m</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a9b9de005d195e29d203232f7bb6d1095</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::eigen_wrapper_v3</name>
    <filename>a00063.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>meta_type</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a6bea5b8c5f037ebc25067cb1e9fbce32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; T, 3, 1 &gt;</type>
      <name>vector_type</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a0b721daec13cad1fe9ada988cba394ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_v3</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>aa021f9511b7be0fb5192e6159dd2284f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_v3</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>aeef5a75974e0264e230d630ed5c44802</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_v3</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a47c75b76b63a9daff76c75346a5d7053</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_v3</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>abd79a02b42cb7c9753b88003aff641f0</anchor>
      <arglist>(T *x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_v3</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>aeec96652ae9179893565f03ee08e5d6b</anchor>
      <arglist>(T x, T y, T z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a966fc7c17765b8ef6a081437fa117749</anchor>
      <arglist>(T x, T y, T z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ae0cabe252733423fcbe211609ba27afc</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>ab0f44ca1c8d8c5d44ab3ffc32a7d11a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt; &amp;</type>
      <name>ubound</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>af27574d87ac3e6d1b55b318ac4b52279</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt; &amp;</type>
      <name>lbound</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>af6f3cbb8556c3d99caef321de462b006</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a58f3b437033dac258e10aae19d5f0b59</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>aa0fb38c796b45fb21a9b4c2c4735efdf</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a2f2e4701de734118da537f4608ff4cd4</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>abde7f543d27ed0d4b6f1e58f65af9e4f</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a66475d7ed3647464e4829c53f36ce847</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a4a87c8d5b853f16856f1e93b8a8d5fcd</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a5fad33c29c60b04f2f863a4b33fc0465</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a71ca1fa7538b76affd6e6912968b0d90</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>acee1f063a3fd2fc775155a131b431098</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>aa4fc5c76b2034b7c43a3243b87f5a7e7</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>aa4624f4af56e005ea4530961115a6d92</anchor>
      <arglist>(T t) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a31b5f658b709c2ece289d26e6dc9baa2</anchor>
      <arglist>(T t) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a234ad6075f0ad21a68c75df41c64c203</anchor>
      <arglist>(T t) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a08a816fd7b9f32dafe26c464286a23d0</anchor>
      <arglist>(T t) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a42ae6ffbf138ddb0b56cfc76aba401ec</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a7326e6e9bdad7247b050dd1ba9c52dcd</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>aea32445c0a92dec41ee92fc4273dc27d</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>aa5c9647b52b6da0dc248070e815a4be5</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v3&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>aaac5eda1278a95566e3162e138a0dfcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>vector_type</type>
      <name>v</name>
      <anchorfile>a00063.html</anchorfile>
      <anchor>a08202255d9d12792d7372f55f57899e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::eigen_wrapper_v4</name>
    <filename>a00064.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>meta_type</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>acfd97386aa7bf77d166daad5b73cfed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; T, 4, 1 &gt;</type>
      <name>vector_type</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a2166a4c19011921f4a3a1419fb593bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_v4</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a206bdc3e619f01d557919f510a26a8a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_v4</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a662ff6482ce411efca9c0ca5f0843e63</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_v4</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a69e548270c7a15f2ce15be4e7772a8d2</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_v4</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>af429cd2005460f7ee6ea93f95484a297</anchor>
      <arglist>(T *x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eigen_wrapper_v4</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a8e909e230ee09bef72fba3ba8e6ffcc0</anchor>
      <arglist>(T x, T y, T z)</arglist>
    </member>
    <member kind="function">
      <type>vector_type::template FixedSegmentReturnType&lt; 3 &gt;::Type</type>
      <name>d</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aa250343f5ee143509f3eebddd8f209e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>vector_type::template ConstFixedSegmentReturnType&lt; 3 &gt;::Type</type>
      <name>d</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a12752150ac84803f74a233f4b5c79e3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a127e39f4e947c69349c0cd839473e880</anchor>
      <arglist>(T x, T y, T z, T w=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aa562864ee2afa5c6247edac08c258a6b</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a68eb3e927f2a47d9db9101bf8f96773d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>ubound</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ad4cfa0fa0120f95a1c68fd759ef9f482</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>lbound</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a75c62258b7468d8813b40afe2e616cf3</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a60973ea50d866265d96816495d019019</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a58a4ed2fc09a80e459d38d3df4541dc5</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a11443a807d38bc64f7dace01b28e197a</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ad3ec700b2e9920ce769ea7bcd6c4ecda</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>abd3ce9d4d7db00d07e5c157ac5702113</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a62b31bf36fcd9d3b00300c912b3dfa9a</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a59db02454e4fddbc7d1ba810e7129af5</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a5dd3a9d88f084535021b3e283902d65c</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ae29e3bb4bfee84c17fb02556293a5056</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a31653a90674c1c10a74f6c9245da15d4</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>ac3c7a00ba648f1bb2c12102860eabb50</anchor>
      <arglist>(T t) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aa01783d562419dafab15a654cffb8031</anchor>
      <arglist>(T t) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a7d9fab6025067789890b84c1bf6eca4c</anchor>
      <arglist>(T t) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a4739a4c5b0ac9c97e772e23a2a5d75b8</anchor>
      <arglist>(T t) const </arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>afeaf854ef020349d755ed8c884f0ea9b</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a1ea95f2191509ba99dd99808ded5e96e</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>aebc5024c4328c1a9f427a821d09a3e86</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a12030f73020957a6bc5ebb5b8984c461</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_v4&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>acdda44fc53e81fdb94fed78b2e8a8a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>vector_type</type>
      <name>v</name>
      <anchorfile>a00064.html</anchorfile>
      <anchor>a287b6e2569e1d215f5b84fbf55fe102b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::IntervalTreeCollisionManager::EndPoint</name>
    <filename>a00065.html</filename>
    <member kind="variable">
      <type>CollisionObject *</type>
      <name>obj</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>ab791830e0c95d195f687283d7e956b34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>value</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a951a85eefa37bc6631ec97852204b513</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>minmax</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a4229c97d64692875f714308f36918078</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::SaPCollisionManager::EndPoint</name>
    <filename>a00066.html</filename>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getVal</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a229d543f58ff37bbfdfd5806147ae5df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f &amp;</type>
      <name>getVal</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a2b897b22282d1988da6475491fc607dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3f::U</type>
      <name>getVal</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a98c6659a709701bbfdb9b7e578f484f1</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f::U &amp;</type>
      <name>getVal</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a6e35ba01a1ace0d81222765df74fa4d7</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>minmax</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a91fc1dce91382ef8d9606534be1be527</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SaPAABB *</type>
      <name>aabb</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>a30fb477521f6c533a9808293b161161f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EndPoint *</type>
      <name>prev</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ade504df4ebc0010cd79b6a726272244d</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>EndPoint *</type>
      <name>next</name>
      <anchorfile>a00066.html</anchorfile>
      <anchor>ab3b5194a1214c25b6d0aa6cc28964bdc</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::EPA</name>
    <filename>a00067.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Valid</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03a6499ddfc7b1c73a76aad0a83d1478966</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Touching</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03ae741576f561c5b298a3e1c055a287fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Degenerated</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03a180be62b1ae1a450ec8df59fd142b50e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NonConvex</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03ac3898b8119cf17d53c88896bd392fc92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InvalidHull</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03a2ba6a112cc30dbf70c38d2b479fc90ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OutOfFaces</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03a0493469c52012cc12a0a1e6c49d61ca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OutOfVertices</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03ab6568acfdfa71ac346671fd12c4c90bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AccuracyReached</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03a44205fa32815f1848b9fa58ac70e92eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FallBack</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03a0fe913cf623b8c1227ea0a668fa8d1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Failed</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03a2dfb4ab1ded43d7044843c626dea6ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Valid</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03a6499ddfc7b1c73a76aad0a83d1478966</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Touching</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03ae741576f561c5b298a3e1c055a287fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Degenerated</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03a180be62b1ae1a450ec8df59fd142b50e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NonConvex</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03ac3898b8119cf17d53c88896bd392fc92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InvalidHull</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03a2ba6a112cc30dbf70c38d2b479fc90ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OutOfFaces</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03a0493469c52012cc12a0a1e6c49d61ca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OutOfVertices</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03ab6568acfdfa71ac346671fd12c4c90bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AccuracyReached</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03a44205fa32815f1848b9fa58ac70e92eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FallBack</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03a0fe913cf623b8c1227ea0a668fa8d1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Failed</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a45e4784de6960092e7a6ac06f2fbac03a2dfb4ab1ded43d7044843c626dea6ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EPA</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af1dd87c341651ea5c5d95ab425764784</anchor>
      <arglist>(unsigned int max_face_num_, unsigned int max_vertex_num_, unsigned int max_iterations_, FCL_REAL tolerance_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EPA</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a11f8aa718b44fd0e7448d5c25efbc37c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3b68a661b29bcd019864488f21d92296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getEdgeDist</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a89399124aa2fc01e054affff3a889e9c</anchor>
      <arglist>(SimplexF *face, SimplexV *a, SimplexV *b, FCL_REAL &amp;dist)</arglist>
    </member>
    <member kind="function">
      <type>SimplexF *</type>
      <name>newFace</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae2ccc3ea15de485e0281e5bf899a4551</anchor>
      <arglist>(SimplexV *a, SimplexV *b, SimplexV *c, bool forced)</arglist>
    </member>
    <member kind="function">
      <type>SimplexF *</type>
      <name>findBest</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a30a6b5c3f20420cbf91fcb62b609c653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>evaluate</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a6990df2a2401224efcb581cc545c1fa2</anchor>
      <arglist>(GJK &amp;gjk, const Vec3f &amp;guess)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>expand</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a250188fe8d5ed361e4f0d56b0de29baa</anchor>
      <arglist>(size_t pass, SimplexV *w, SimplexF *f, size_t e, SimplexHorizon &amp;horizon)</arglist>
    </member>
    <member kind="variable">
      <type>Status</type>
      <name>status</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a3749da27d0b9410841c4589fda68185f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GJK::Simplex</type>
      <name>result</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a18e771c405d22793057b79b3bcf67001</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>normal</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ae20de3851800a62584b51f00d0a3050e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a18e8bef6d890a49c47033d2b898f1a05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SimplexV *</type>
      <name>sv_store</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a1c8113e097030ba5e27ceef3b297b513</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SimplexF *</type>
      <name>fc_store</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>af5710ecd70cc31a97161515be402bec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>nextsv</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>aadee7fee97fad6f18e8a6519c291006c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SimplexList</type>
      <name>hull</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>ac2567a11f68abbc0cb1207d3aeaeab28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SimplexList</type>
      <name>stock</name>
      <anchorfile>a00067.html</anchorfile>
      <anchor>a9662593adb0d7be2b6401144eb0cd6c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Exception</name>
    <filename>a00068.html</filename>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a350dfd748fa890f3f12e7c26e0adb9c1</anchor>
      <arglist>(const std::string &amp;what)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ab823f9c30d99ae01658bcc7ad2d8df42</anchor>
      <arglist>(const std::string &amp;prefix, const std::string &amp;what)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Exception</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>ab098f3c1ed3d063894ebf9ef089bb8d4</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::FclMatrix</name>
    <filename>a00069.html</filename>
    <templarg>T</templarg>
    <templarg>Cols</templarg>
    <templarg>_Options</templarg>
    <base>FclType&lt; FclMatrix&lt; T, Cols, _Options &gt; &gt;</base>
    <member kind="typedef">
      <type>Matrix&lt; T, 3, Cols, _Options &gt;</type>
      <name>Base</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a7c3886fcc073cad6bff1055e7ec14ec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>U</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a299f0397a42504559955379a6bd2f209</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>meta_type</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>abc16ed2ad9c4f90aec2bc0731900b991</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclMatrix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a609da8da2a00618499b17f6bcac28b7e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclMatrix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a1ae58026e80f9d34e32ec3a96341d310</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ac4055604c9f6f0eeeda83bb5aecece2c</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclMatrix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a9ba8c2044d9f9c2f1279e3a1d4c0106b</anchor>
      <arglist>(T x, T y, T z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclMatrix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>af039a192ba9ce786ce58f83d5e8a4768</anchor>
      <arglist>(T xx, T xy, T xz, T yx, T yy, T yz, T zx, T zy, T zz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclMatrix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a72cd5c5ad9e0a4a1129009c6f86332af</anchor>
      <arglist>(const ::fcl::FclType&lt; Vector &gt; &amp;r0, const ::fcl::FclType&lt; Vector &gt; &amp;r1, const ::fcl::FclType&lt; Vector &gt; &amp;r2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclMatrix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a34db3494a85d702423f90c4131bc33de</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE const FclOp&lt; const CwiseUnaryOp&lt; internal::scalar_add_op&lt; Scalar &gt;, const Base &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a987a3167d4c306e52484757d6243c880</anchor>
      <arglist>(const Scalar &amp;scalar) const </arglist>
    </member>
    <member kind="function">
      <type>const UnaryReturnType&lt; Base &gt;::Opposite</type>
      <name>operator-</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a897e4604ef9c5b58c04efae329442c41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>normalize</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a9c05a68ce522b8a14a706375bc2f914c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>normalize</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a2e0e88f0ecea6f7774eb2781a002c963</anchor>
      <arglist>(bool *signal)</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>abs</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a6b41b7291082cd183243c17887190bc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a9b4d14e65f99c2068985084d8ab923c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sqrLength</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a21def08e80da024ada97fb6abc7a6b1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a56f1c33e4b3f6425448d36e47eaf175f</anchor>
      <arglist>(T x, T y, T z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a0cf864151978cdf8184142faf95967dc</anchor>
      <arglist>(T xx, T xy, T xz, T yx, T yy, T yz, T zx, T zy, T zz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a4a55a9fd22600c5df23f3294349c8e4d</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a7343a9897b506175d695733f7eeefe62</anchor>
      <arglist>(const FclMatrix &amp;other, T epsilon=std::numeric_limits&lt; T &gt;::epsilon()*100) const </arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>negate</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a1be46bc42821d9fb2dac6a014868e3b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a849f6bf25ec9e2701ad2aaaf8c893729</anchor>
      <arglist>(const FclMatrix &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ae7f1be1380a7ac340bc3560d9a4414b2</anchor>
      <arglist>(const FclMatrix &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>ubound</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ac23cfeb3a626829606f0ca367ece06b1</anchor>
      <arglist>(const FclMatrix &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>lbound</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ac73227f3c3f329d79ac11d0da1d36510</anchor>
      <arglist>(const FclMatrix &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a02d1b8cd9f8deae597ce2b2b37ae8b59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>transpose</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a60f62fa1de79974067d32f3f56837c0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>inverse</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a02ae5d02922216dc3e33bd87fefed30e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE const FclProduct&lt; const Base, const OtherDerived &gt;::TransposeTimesType</type>
      <name>transposeTimes</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a9933a6fdd190320770f62df6d4a6771f</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE const FclProduct&lt; const Base, const OtherDerived &gt;::TimesTransposeType</type>
      <name>timesTranspose</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a31ece284ad9cdd2904a4a5f809bf2a16</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE const FclProduct&lt; const Base, const OtherDerived &gt;::TensorTransformType</type>
      <name>tensorTransform</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ae0095073a5a6ba1fc030ad79654f1ee9</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEulerZYX</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a8a91fb633b6a9bcb3f216f8cdf23fb0e</anchor>
      <arglist>(Scalar eulerX, Scalar eulerY, Scalar eulerZ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEulerYPR</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a96cd93db77c03d8c4e2a966968a7b72a</anchor>
      <arglist>(Scalar yaw, Scalar pitch, Scalar roll)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const FclMatrix &amp;</type>
      <name>getIdentity</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>afe7395dc80423ed8ead822f0119f130f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FclMatrix&lt; FCL_REAL, 1 &gt;</name>
    <filename>a00069.html</filename>
    <base>FclType&lt; FclMatrix&lt; FCL_REAL, Cols, internal::traits&lt; Matrix&lt; FCL_REAL, 3, Cols &gt; &gt;::Options &gt; &gt;</base>
    <member kind="typedef">
      <type>Matrix&lt; FCL_REAL, 3, Cols, internal::traits&lt; Matrix&lt; FCL_REAL, 3, Cols &gt; &gt;::Options &gt;</type>
      <name>Base</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a7c3886fcc073cad6bff1055e7ec14ec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FCL_REAL</type>
      <name>U</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a299f0397a42504559955379a6bd2f209</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FCL_REAL</type>
      <name>meta_type</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>abc16ed2ad9c4f90aec2bc0731900b991</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclMatrix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a609da8da2a00618499b17f6bcac28b7e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclMatrix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a1ae58026e80f9d34e32ec3a96341d310</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclMatrix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a9ba8c2044d9f9c2f1279e3a1d4c0106b</anchor>
      <arglist>(FCL_REAL x, FCL_REAL y, FCL_REAL z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclMatrix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>af039a192ba9ce786ce58f83d5e8a4768</anchor>
      <arglist>(FCL_REAL xx, FCL_REAL xy, FCL_REAL xz, FCL_REAL yx, FCL_REAL yy, FCL_REAL yz, FCL_REAL zx, FCL_REAL zy, FCL_REAL zz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclMatrix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a72cd5c5ad9e0a4a1129009c6f86332af</anchor>
      <arglist>(const ::fcl::FclType&lt; Vector &gt; &amp;r0, const ::fcl::FclType&lt; Vector &gt; &amp;r1, const ::fcl::FclType&lt; Vector &gt; &amp;r2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclMatrix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a34db3494a85d702423f90c4131bc33de</anchor>
      <arglist>(FCL_REAL x)</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ac4055604c9f6f0eeeda83bb5aecece2c</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE const FclOp&lt; const CwiseUnaryOp&lt; internal::scalar_add_op&lt; Scalar &gt;, const Base &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a987a3167d4c306e52484757d6243c880</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const UnaryReturnType&lt; Base &gt;::Opposite</type>
      <name>operator-</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a897e4604ef9c5b58c04efae329442c41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>normalize</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a9c05a68ce522b8a14a706375bc2f914c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>normalize</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a2e0e88f0ecea6f7774eb2781a002c963</anchor>
      <arglist>(bool *signal)</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>abs</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a6b41b7291082cd183243c17887190bc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>length</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a9b4d14e65f99c2068985084d8ab923c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>sqrLength</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a21def08e80da024ada97fb6abc7a6b1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a56f1c33e4b3f6425448d36e47eaf175f</anchor>
      <arglist>(FCL_REAL x, FCL_REAL y, FCL_REAL z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a0cf864151978cdf8184142faf95967dc</anchor>
      <arglist>(FCL_REAL xx, FCL_REAL xy, FCL_REAL xz, FCL_REAL yx, FCL_REAL yy, FCL_REAL yz, FCL_REAL zx, FCL_REAL zy, FCL_REAL zz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a4a55a9fd22600c5df23f3294349c8e4d</anchor>
      <arglist>(FCL_REAL x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a7343a9897b506175d695733f7eeefe62</anchor>
      <arglist>(const FclMatrix &amp;other, FCL_REAL epsilon=std::numeric_limits&lt; FCL_REAL &gt;::epsilon()*100) const</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>negate</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a1be46bc42821d9fb2dac6a014868e3b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a849f6bf25ec9e2701ad2aaaf8c893729</anchor>
      <arglist>(const FclMatrix &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ae7f1be1380a7ac340bc3560d9a4414b2</anchor>
      <arglist>(const FclMatrix &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>ubound</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ac23cfeb3a626829606f0ca367ece06b1</anchor>
      <arglist>(const FclMatrix &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>lbound</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ac73227f3c3f329d79ac11d0da1d36510</anchor>
      <arglist>(const FclMatrix &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a02d1b8cd9f8deae597ce2b2b37ae8b59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>transpose</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a60f62fa1de79974067d32f3f56837c0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>inverse</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a02ae5d02922216dc3e33bd87fefed30e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE const FclProduct&lt; const Base, const OtherDerived &gt;::TransposeTimesType</type>
      <name>transposeTimes</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a9933a6fdd190320770f62df6d4a6771f</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE const FclProduct&lt; const Base, const OtherDerived &gt;::TimesTransposeType</type>
      <name>timesTranspose</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a31ece284ad9cdd2904a4a5f809bf2a16</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE const FclProduct&lt; const Base, const OtherDerived &gt;::TensorTransformType</type>
      <name>tensorTransform</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ae0095073a5a6ba1fc030ad79654f1ee9</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEulerZYX</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a8a91fb633b6a9bcb3f216f8cdf23fb0e</anchor>
      <arglist>(Scalar eulerX, Scalar eulerY, Scalar eulerZ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEulerYPR</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a96cd93db77c03d8c4e2a966968a7b72a</anchor>
      <arglist>(Scalar yaw, Scalar pitch, Scalar roll)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const FclMatrix &amp;</type>
      <name>getIdentity</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>afe7395dc80423ed8ead822f0119f130f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FclMatrix&lt; FCL_REAL, 3 &gt;</name>
    <filename>a00069.html</filename>
    <base>FclType&lt; FclMatrix&lt; FCL_REAL, Cols, internal::traits&lt; Matrix&lt; FCL_REAL, 3, Cols &gt; &gt;::Options &gt; &gt;</base>
    <member kind="typedef">
      <type>Matrix&lt; FCL_REAL, 3, Cols, internal::traits&lt; Matrix&lt; FCL_REAL, 3, Cols &gt; &gt;::Options &gt;</type>
      <name>Base</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a7c3886fcc073cad6bff1055e7ec14ec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FCL_REAL</type>
      <name>U</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a299f0397a42504559955379a6bd2f209</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FCL_REAL</type>
      <name>meta_type</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>abc16ed2ad9c4f90aec2bc0731900b991</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclMatrix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a609da8da2a00618499b17f6bcac28b7e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclMatrix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a1ae58026e80f9d34e32ec3a96341d310</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclMatrix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a9ba8c2044d9f9c2f1279e3a1d4c0106b</anchor>
      <arglist>(FCL_REAL x, FCL_REAL y, FCL_REAL z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclMatrix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>af039a192ba9ce786ce58f83d5e8a4768</anchor>
      <arglist>(FCL_REAL xx, FCL_REAL xy, FCL_REAL xz, FCL_REAL yx, FCL_REAL yy, FCL_REAL yz, FCL_REAL zx, FCL_REAL zy, FCL_REAL zz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclMatrix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a72cd5c5ad9e0a4a1129009c6f86332af</anchor>
      <arglist>(const ::fcl::FclType&lt; Vector &gt; &amp;r0, const ::fcl::FclType&lt; Vector &gt; &amp;r1, const ::fcl::FclType&lt; Vector &gt; &amp;r2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclMatrix</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a34db3494a85d702423f90c4131bc33de</anchor>
      <arglist>(FCL_REAL x)</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ac4055604c9f6f0eeeda83bb5aecece2c</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE const FclOp&lt; const CwiseUnaryOp&lt; internal::scalar_add_op&lt; Scalar &gt;, const Base &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a987a3167d4c306e52484757d6243c880</anchor>
      <arglist>(const Scalar &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const UnaryReturnType&lt; Base &gt;::Opposite</type>
      <name>operator-</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a897e4604ef9c5b58c04efae329442c41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>normalize</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a9c05a68ce522b8a14a706375bc2f914c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>normalize</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a2e0e88f0ecea6f7774eb2781a002c963</anchor>
      <arglist>(bool *signal)</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>abs</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a6b41b7291082cd183243c17887190bc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>length</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a9b4d14e65f99c2068985084d8ab923c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>sqrLength</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a21def08e80da024ada97fb6abc7a6b1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a56f1c33e4b3f6425448d36e47eaf175f</anchor>
      <arglist>(FCL_REAL x, FCL_REAL y, FCL_REAL z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a0cf864151978cdf8184142faf95967dc</anchor>
      <arglist>(FCL_REAL xx, FCL_REAL xy, FCL_REAL xz, FCL_REAL yx, FCL_REAL yy, FCL_REAL yz, FCL_REAL zx, FCL_REAL zy, FCL_REAL zz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a4a55a9fd22600c5df23f3294349c8e4d</anchor>
      <arglist>(FCL_REAL x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a7343a9897b506175d695733f7eeefe62</anchor>
      <arglist>(const FclMatrix &amp;other, FCL_REAL epsilon=std::numeric_limits&lt; FCL_REAL &gt;::epsilon()*100) const</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>negate</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a1be46bc42821d9fb2dac6a014868e3b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a849f6bf25ec9e2701ad2aaaf8c893729</anchor>
      <arglist>(const FclMatrix &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ae7f1be1380a7ac340bc3560d9a4414b2</anchor>
      <arglist>(const FclMatrix &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>ubound</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ac23cfeb3a626829606f0ca367ece06b1</anchor>
      <arglist>(const FclMatrix &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>lbound</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ac73227f3c3f329d79ac11d0da1d36510</anchor>
      <arglist>(const FclMatrix &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a02d1b8cd9f8deae597ce2b2b37ae8b59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>transpose</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a60f62fa1de79974067d32f3f56837c0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FclMatrix &amp;</type>
      <name>inverse</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a02ae5d02922216dc3e33bd87fefed30e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE const FclProduct&lt; const Base, const OtherDerived &gt;::TransposeTimesType</type>
      <name>transposeTimes</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a9933a6fdd190320770f62df6d4a6771f</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE const FclProduct&lt; const Base, const OtherDerived &gt;::TimesTransposeType</type>
      <name>timesTranspose</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a31ece284ad9cdd2904a4a5f809bf2a16</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE const FclProduct&lt; const Base, const OtherDerived &gt;::TensorTransformType</type>
      <name>tensorTransform</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>ae0095073a5a6ba1fc030ad79654f1ee9</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEulerZYX</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a8a91fb633b6a9bcb3f216f8cdf23fb0e</anchor>
      <arglist>(Scalar eulerX, Scalar eulerY, Scalar eulerZ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEulerYPR</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>a96cd93db77c03d8c4e2a966968a7b72a</anchor>
      <arglist>(Scalar yaw, Scalar pitch, Scalar roll)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const FclMatrix &amp;</type>
      <name>getIdentity</name>
      <anchorfile>a00069.html</anchorfile>
      <anchor>afe7395dc80423ed8ead822f0119f130f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::FclOp</name>
    <filename>a00070.html</filename>
    <templarg>EigenOp</templarg>
    <base>FclType&lt; FclOp&lt; EigenOp &gt; &gt;</base>
    <member kind="typedef">
      <type>internal::traits&lt; EigenOp &gt;::Scalar</type>
      <name>T</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a55c3edf4103b24dd82b1a5f95b38ca14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EigenOp</type>
      <name>Base</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a4ab0c9b53d277d2b8b994d50cd87b666</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclOp</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>aa40fa1536a80a84249058fd86de57e47</anchor>
      <arglist>(Lhs &amp;lhs, const Rhs &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclOp</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>aeeea710be1e3fcaf07a9e6aa54d090c1</anchor>
      <arglist>(const FclOp&lt; OtherEigenOp &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FclOp</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a6150a7a94716263bbc3a18ba39072ead</anchor>
      <arglist>(XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_STRONG_INLINE const FclOp&lt; const CwiseUnaryOp&lt; internal::scalar_add_op&lt; Scalar &gt;, const Base &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a996ac64dc85f30076ba4f864899e50ac</anchor>
      <arglist>(const Scalar &amp;scalar) const </arglist>
    </member>
    <member kind="function">
      <type>const UnaryReturnType&lt; const Base &gt;::Opposite</type>
      <name>operator-</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a4daae913a3074aef30a6002af7d0ea76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnaryReturnType&lt; EigenOp &gt;::Normalize</type>
      <name>normalize</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>acca6613a2e3e1ee63d19ca37304c2195</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const UnaryReturnType&lt; EigenOp &gt;::Abs</type>
      <name>abs</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>abbffd02f4fd45ea62f422512f549ea0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>length</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a1e05122acff8952e798b4b91af4f224b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sqrLength</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>acf2a70056f945828eae3ff6122ff2249</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a9ad22a85e425be6dc3268c60a2ebc2e5</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;other, T epsilon=std::numeric_limits&lt; T &gt;::epsilon()*100) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>aa8cc77e7fa589749d3df53a8fedc0f8b</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>add9f47845009ce84c77060c7751fa9e9</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a45fbe3ce469b18c84c6918d177fe980f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FclOp&lt; Transpose&lt; const Base &gt; &gt;</type>
      <name>transpose</name>
      <anchorfile>a00070.html</anchorfile>
      <anchor>a7d1c5ce4dced204842b096a334830faa</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::FclProduct</name>
    <filename>a00071.html</filename>
    <templarg>Derived</templarg>
    <templarg>OtherDerived</templarg>
    <member kind="enumvalue">
      <name>COEFWISE</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a11a006e7da398b9a24b375a693977ab0a75641a4779a0f79a3919ddc5f28b2990</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::remove_fcl&lt; Derived &gt;::type</type>
      <name>EDerived</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a471cfcc9b0ff8313b2bfa33f7ab38c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::remove_fcl&lt; OtherDerived &gt;::type</type>
      <name>EOtherDerived</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a8235a5849b46c727bdacb81952df0a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FclOp&lt; typename internal::deduce_fcl_type&lt; EDerived, EOtherDerived, COEFWISE &gt;::Type &gt;</type>
      <name>ProductType</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a2d6f28c082c88cee4f23ceeedbed22af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FclOp&lt; typename ProductReturnType&lt; Transpose&lt; Derived &gt;, EOtherDerived &gt;::Type &gt;</type>
      <name>TransposeTimesType</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a21af4644a126b87b7fa3583d2a16622a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FclOp&lt; typename ProductReturnType&lt; EDerived, Transpose&lt; EOtherDerived &gt; &gt;::Type &gt;</type>
      <name>TimesTransposeType</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>afc397f64a73aa57496cb8f157a9beb4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FclOp&lt; typename ProductReturnType&lt; ProductType, Transpose&lt; EDerived &gt; &gt;::Type &gt;</type>
      <name>TensorTransformType</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>ac00c800cd27f3bf96d8e3cad0cb40b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COEFWISE</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a11a006e7da398b9a24b375a693977ab0a75641a4779a0f79a3919ddc5f28b2990</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_STRONG_INLINE ProductType</type>
      <name>run</name>
      <anchorfile>a00071.html</anchorfile>
      <anchor>a02cd4af8b009b8a6b49c383d1f469854</anchor>
      <arglist>(const Derived &amp;l, const OtherDerived &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FclProduct</name>
    <filename>a00072.html</filename>
    <templarg>Derived</templarg>
    <templarg>OtherDerived</templarg>
    <member kind="enumvalue">
      <name>COEFWISE</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a1c452a20ca01ce10fdae85a3fba70485aee5c044ecdff2edf93fb22acd82de4de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::remove_fcl&lt; Derived &gt;::type</type>
      <name>EDerived</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>ad42deb73f0bc07cb350f0a702b9565ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::remove_fcl&lt; OtherDerived &gt;::type</type>
      <name>EOtherDerived</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a7618ea9656166434d88b1a9b61ef5415</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FclOp&lt; typename internal::deduce_fcl_type&lt; EDerived, EOtherDerived, COEFWISE &gt;::Type &gt;</type>
      <name>ProductType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>af8c62793b6ad6b61b02037ca1244e305</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FclOp&lt; typename ProductReturnType&lt; Transpose&lt; Derived &gt;, EOtherDerived &gt;::Type &gt;</type>
      <name>TransposeTimesType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a55a2830c11e6bed726fbff596509e881</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FclOp&lt; typename ProductReturnType&lt; EDerived, Transpose&lt; EOtherDerived &gt; &gt;::Type &gt;</type>
      <name>TimesTransposeType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a427520c049c213f40fc910c84fe3bb59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FclOp&lt; typename ProductReturnType&lt; ProductType, Transpose&lt; EDerived &gt; &gt;::Type &gt;</type>
      <name>TensorTransformType</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a3499f628d5ecb7dfdb695b0414bbe04c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COEFWISE</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>a1c452a20ca01ce10fdae85a3fba70485aee5c044ecdff2edf93fb22acd82de4de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EIGEN_STRONG_INLINE ProductType</type>
      <name>run</name>
      <anchorfile>a00072.html</anchorfile>
      <anchor>affa9dc2677e4b459a3ae70c599a6ad5b</anchor>
      <arglist>(const Derived &amp;l, const OtherDerived &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::FclType</name>
    <filename>a00073.html</filename>
    <templarg>Derived</templarg>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>fcl</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>ad0c289c0def9f45b6c96e94535eb823c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>fcl</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a040c02d9428378ce573a269d5b957ba8</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FclType&lt; FclMatrix&lt; FCL_REAL, Cols, internal::traits&lt; Matrix&lt; FCL_REAL, 3, Cols &gt; &gt;::Options &gt; &gt;</name>
    <filename>a00073.html</filename>
    <member kind="function">
      <type>FclMatrix&lt; FCL_REAL, Cols, internal::traits&lt; Matrix&lt; FCL_REAL, 3, Cols &gt; &gt;::Options &gt; &amp;</type>
      <name>fcl</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>ad0c289c0def9f45b6c96e94535eb823c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FclMatrix&lt; FCL_REAL, Cols, internal::traits&lt; Matrix&lt; FCL_REAL, 3, Cols &gt; &gt;::Options &gt; &amp;</type>
      <name>fcl</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a040c02d9428378ce573a269d5b957ba8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FclType&lt; FclMatrix&lt; T, Cols, _Options &gt; &gt;</name>
    <filename>a00073.html</filename>
    <member kind="function">
      <type>FclMatrix&lt; T, Cols, _Options &gt; &amp;</type>
      <name>fcl</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>ad0c289c0def9f45b6c96e94535eb823c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FclMatrix&lt; T, Cols, _Options &gt; &amp;</type>
      <name>fcl</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a040c02d9428378ce573a269d5b957ba8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FclType&lt; FclOp&lt; EigenOp &gt; &gt;</name>
    <filename>a00073.html</filename>
    <member kind="function">
      <type>FclOp&lt; EigenOp &gt; &amp;</type>
      <name>fcl</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>ad0c289c0def9f45b6c96e94535eb823c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FclOp&lt; EigenOp &gt; &amp;</type>
      <name>fcl</name>
      <anchorfile>a00073.html</anchorfile>
      <anchor>a040c02d9428378ce573a269d5b957ba8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::GJK</name>
    <filename>a00074.html</filename>
    <class kind="struct">fcl::details::GJK::Simplex</class>
    <class kind="struct">fcl::details::GJK::SimplexV</class>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae79829da2faaea99dc92f2de6a6460d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Valid</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae79829da2faaea99dc92f2de6a6460d0a67b06dc50a16e2c728ac20542a411d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Inside</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae79829da2faaea99dc92f2de6a6460d0afc21803c4fff39eac14566e8f74436af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Failed</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae79829da2faaea99dc92f2de6a6460d0a1d56a37c0766372db35d157e302e3162</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Valid</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae79829da2faaea99dc92f2de6a6460d0a67b06dc50a16e2c728ac20542a411d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Inside</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae79829da2faaea99dc92f2de6a6460d0afc21803c4fff39eac14566e8f74436af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Failed</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae79829da2faaea99dc92f2de6a6460d0a1d56a37c0766372db35d157e302e3162</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GJK</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a5be26d3c98cf9f5bce30a636477c8240</anchor>
      <arglist>(unsigned int max_iterations_, FCL_REAL tolerance_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a198d8ce4a3bc4ea3117c1752ea524ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>evaluate</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a55e4897c9b74b77f01229539f4e1c971</anchor>
      <arglist>(const MinkowskiDiff &amp;shape_, const Vec3f &amp;guess)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSupport</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae67420ee442a44ff9397a938846d09a7</anchor>
      <arglist>(const Vec3f &amp;d, SimplexV &amp;sv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSupport</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a67c6575da249fc38c8fa9be6df83073e</anchor>
      <arglist>(const Vec3f &amp;d, const Vec3f &amp;v, SimplexV &amp;sv) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeVertex</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ae8148d730274143875e005fbff841e52</anchor>
      <arglist>(Simplex &amp;simplex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendVertex</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a4b3e9be0cef29352f6376afbc954e74d</anchor>
      <arglist>(Simplex &amp;simplex, const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>encloseOrigin</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>ad49657364a9c85d1d6cb5e8c2d7acae6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Simplex *</type>
      <name>getSimplex</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a7e0dd5cacb30a635195c4d6a2d01e3c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getGuessFromSimplex</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>abf09d13132c97513eb4d18d51f3d8902</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>MinkowskiDiff</type>
      <name>shape</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a0ccc8e76a9dcaf7d252b07c655db2aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>ray</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a3ee6790f7b3fd348ee81ec0cece0c62e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>aebcbabf078980d250f4629a00503646d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Simplex</type>
      <name>simplices</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a0fa1e063c559ad457e45a54de84ecdec</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::details::GJKInitializer</name>
    <filename>a00075.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static GJKSupportFunction</type>
      <name>getSupportFunction</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a0a00e10294ade96b38ab7a75f98dbb3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GJKCenterFunction</type>
      <name>getCenterFunction</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a4e4704a2416aa61161a1972d6ec322df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createGJKObject</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>ac0912cdfa97782e8338a5e5e4b660a8d</anchor>
      <arglist>(const T &amp;, const Transform3f &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteGJKObject</name>
      <anchorfile>a00075.html</anchorfile>
      <anchor>a8dbb82e2aaa5e53e22dc2962bea0363a</anchor>
      <arglist>(void *o)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::details::GJKInitializer&lt; Box &gt;</name>
    <filename>a00076.html</filename>
    <member kind="function" static="yes">
      <type>static GJKSupportFunction</type>
      <name>getSupportFunction</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a5e850f8f7923f936578771dbc7409f05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GJKCenterFunction</type>
      <name>getCenterFunction</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a4f52f95fa7f5d6231afffdda706eff70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createGJKObject</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>a9071cc66146fe354b9c531b2fb6bcc34</anchor>
      <arglist>(const Box &amp;s, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteGJKObject</name>
      <anchorfile>a00076.html</anchorfile>
      <anchor>aae25762eaccdc569da5c70aa583ab812</anchor>
      <arglist>(void *o)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::details::GJKInitializer&lt; Capsule &gt;</name>
    <filename>a00077.html</filename>
    <member kind="function" static="yes">
      <type>static GJKSupportFunction</type>
      <name>getSupportFunction</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>aec0430247bbeeda76e3b01dee3892f1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GJKCenterFunction</type>
      <name>getCenterFunction</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>ab6bd294428a5d3c0f73fc3a68b8ae1c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createGJKObject</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a0401d438416e058dd8ceea34d27604ca</anchor>
      <arglist>(const Capsule &amp;s, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteGJKObject</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a07be99f19822c2b9dd74ae7d49ccdb49</anchor>
      <arglist>(void *o)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::details::GJKInitializer&lt; Cone &gt;</name>
    <filename>a00078.html</filename>
    <member kind="function" static="yes">
      <type>static GJKSupportFunction</type>
      <name>getSupportFunction</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a9e14983830053e2463ad54ce33d7a031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GJKCenterFunction</type>
      <name>getCenterFunction</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>aa776391f3053b21d4af5b03956f6e97c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createGJKObject</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>aef0b4bd4ce570c8e0bcc81cc1f84bc97</anchor>
      <arglist>(const Cone &amp;s, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteGJKObject</name>
      <anchorfile>a00078.html</anchorfile>
      <anchor>a6fbd1ed3d547af2328ff0aec18cf4cce</anchor>
      <arglist>(void *o)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::details::GJKInitializer&lt; Convex &gt;</name>
    <filename>a00079.html</filename>
    <member kind="function" static="yes">
      <type>static GJKSupportFunction</type>
      <name>getSupportFunction</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a81bfbccea94f31bcfbe829e5e5ed3c7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GJKCenterFunction</type>
      <name>getCenterFunction</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>af9736fa974a492603487c25320fb1a56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createGJKObject</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>aee2ae5e207d9e57cb85d9bf51a98ba95</anchor>
      <arglist>(const Convex &amp;s, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteGJKObject</name>
      <anchorfile>a00079.html</anchorfile>
      <anchor>a659655a32e4d713d5e7706208ee03a1e</anchor>
      <arglist>(void *o)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::details::GJKInitializer&lt; Cylinder &gt;</name>
    <filename>a00080.html</filename>
    <member kind="function" static="yes">
      <type>static GJKSupportFunction</type>
      <name>getSupportFunction</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a2d991a08baf8292c4d49bbe19ead65ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GJKCenterFunction</type>
      <name>getCenterFunction</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a6f94041f2e462ec4af45e1baf8b14c64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createGJKObject</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>af4a54c515653f7e98002d8eca6a92822</anchor>
      <arglist>(const Cylinder &amp;s, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteGJKObject</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>abad4229bfa709f6e9a10686f930f21b0</anchor>
      <arglist>(void *o)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::details::GJKInitializer&lt; Sphere &gt;</name>
    <filename>a00081.html</filename>
    <member kind="function" static="yes">
      <type>static GJKSupportFunction</type>
      <name>getSupportFunction</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>ab11c6b0b71da39e95b952dc3710492f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GJKCenterFunction</type>
      <name>getCenterFunction</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>aa7ef17f84978ca81b5056b7a93d52cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void *</type>
      <name>createGJKObject</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>afdb0a7746f7cc8dff312a3d14a51d325</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>deleteGJKObject</name>
      <anchorfile>a00081.html</anchorfile>
      <anchor>a21e3ab1d5f3d7dc96161f09ce8b891d7</anchor>
      <arglist>(void *o)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::GJKSolver_indep</name>
    <filename>a00082.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>aa639998329c13d12205cbb5bc9381dd2</anchor>
      <arglist>(const S1 &amp;s1, const Transform3f &amp;tf1, const S2 &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a4743426f3eac48ef21879dc674e38638</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a504b49e94e0e612d69c7c5ca5e9ed32a</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a1f196d860e3d388a164470053868ae8e</anchor>
      <arglist>(const S1 &amp;s1, const Transform3f &amp;tf1, const S2 &amp;s2, const Transform3f &amp;tf2, FCL_REAL *distance, Vec3f *p1, Vec3f *p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a210bea9602bd04610a81c698e75af24f</anchor>
      <arglist>(const S1 &amp;s1, const Transform3f &amp;tf1, const S2 &amp;s2, const Transform3f &amp;tf2, FCL_REAL *distance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleDistance</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a499d89e8cd09ba1ee93c1c2785bbc930</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, FCL_REAL *distance, Vec3f *p1, Vec3f *p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleDistance</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a5e7f991c6456f0b0861020eaa9a24f57</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, FCL_REAL *distance) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleDistance</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ab650e265c70140ecdd1e7c054871fc6a</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL *distance, Vec3f *p1, Vec3f *p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleDistance</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ad43e905ca9c29981ad98b0b78c8a1a5b</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL *distance) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GJKSolver_indep</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a20116919d6fc8a905a915faf865b0521</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableCachedGuess</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>afb51701a27fa08072611f477fab22891</anchor>
      <arglist>(bool if_enable) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCachedGuess</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>acf0dbfd396564006c6fc8fff978e3be8</anchor>
      <arglist>(const Vec3f &amp;guess) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getCachedGuess</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a1646b92650ad4e1ac30276d24c29d925</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a9e9386fc5cd0d9ece3f1be271a2748df</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a66b032dcff162ca86116e20bcfa28423</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a27d17cf7d46eebe839079d501d3b1eac</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ab022a1f759148d15c1dceb6ebf12d4b7</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Box &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a4bed0e5b42e816dcae8970cc5f2ce556</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ae5774c899b711aadcbf4616a35c194e7</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a3b9b3f2b88efe6ef20e6b274e3f3a09b</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a23416f5b3301bb94149c49c89224df3c</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Box &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>aea05b53c8284598fa6833711fbaae6a7</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a360a2772d3ea4a4e9e97e6cfd76da6f4</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>aab5c493d248d0a2f4e7c7995f62fecc6</anchor>
      <arglist>(const Cylinder &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a19e0ca56cdcb0693039f82dd98993541</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Cylinder &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>af1929ca47cfa76882bbe9fad327bc395</anchor>
      <arglist>(const Cone &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a0f02b43d1db2daae4b3b9a8bfd060c26</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Cone &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a97eaa3e4d8123a9735356f3d36b5e351</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ad6e38e9414bcc33f922a8f0cd536362c</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a77df828f077a848f93a011018203ba3b</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a349cf27879a9ed33371f8462ca697bd1</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a5ca961c5f899a68b657d0e8ed276f342</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ab1a078977789ca389e8196d274e9d3dd</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>acd3cb0e834bca404293c5b70736b8402</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Box &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a851b11c975909a58e7805fcb62ee59a3</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a523546317b0d1808333e1c6a6b9f28ba</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a5b77699fe4571891c3db974c85ecbe08</anchor>
      <arglist>(const Cylinder &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a0f2776f1f4e4d835fe27f33a511fd827</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Cylinder &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a7216730ef903422afb7b0bf418a99580</anchor>
      <arglist>(const Cone &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a3e882eb0c572afdd1e59c3aa2fa66bbe</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Cone &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a6c52e9969b5e0324b871d427fc00c984</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a6da5cb42dbeb57de7fe48bdce60dd661</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ac2e62f56c33560cf58a9152e8f521aa2</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>af8ca1d78379a48fa571912d7da1bccb1</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleIntersect</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a05c7c7835a453340c10689b1bdce84b4</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a2827aa0217d7d2d2d68caba733ae88ca</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, FCL_REAL *dist, Vec3f *p1, Vec3f *p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a30af3778c3d64089bb429f9f62cfa97c</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL *dist, Vec3f *p1, Vec3f *p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a8e35ad7ab367b565ebd7db2fecfe7c49</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL *dist, Vec3f *p1, Vec3f *p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>afd144b36fe3aa5408c876ed81f241822</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, FCL_REAL *dist, Vec3f *p1, Vec3f *p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleDistance</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a75abc56fc454fc136726631c2f1db0dd</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, FCL_REAL *dist, Vec3f *p1, Vec3f *p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleDistance</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a3ec84fed955b01d6d9be03c705f09855</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL *dist, Vec3f *p1, Vec3f *p2) const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>epa_max_face_num</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a97c647aec36b539fe5492d07b9643e1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>epa_max_vertex_num</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ac87d355fec733140bc026628f1457e9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>epa_max_iterations</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a58d161633183d0bb8e3a415c1784d3da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>epa_tolerance</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a5288f2356e1ab4c0e981c17bdf02b9ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>gjk_tolerance</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a050dc411a0f26f888e75dcc166680165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>gjk_max_iterations</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>ab9f7e50d7a4c464b87ca9deb92a5e929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enable_cached_guess</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a0725ffc3053007e92ee15520cf2c7817</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>cached_guess</name>
      <anchorfile>a00082.html</anchorfile>
      <anchor>a008bb871bd5b7333ea295c5c9f6f3072</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::GJKSolver_libccd</name>
    <filename>a00083.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a6054267a58f000a37eb9a2b0285b1fd0</anchor>
      <arglist>(const S1 &amp;s1, const Transform3f &amp;tf1, const S2 &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>afe8742b674cf4db98b65f6add3706a2c</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a2aabbc17516bf4e53c36787861dfc832</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a27b52a8647c00b79f7383a932f4ce62f</anchor>
      <arglist>(const S1 &amp;s1, const Transform3f &amp;tf1, const S2 &amp;s2, const Transform3f &amp;tf2, FCL_REAL *dist, Vec3f *p1, Vec3f *p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a01d03d5450c9c996e0ca584a4e382706</anchor>
      <arglist>(const S1 &amp;s1, const Transform3f &amp;tf1, const S2 &amp;s2, const Transform3f &amp;tf2, FCL_REAL *dist) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleDistance</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ab93808b1fc29b62af923c0615c582a67</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, FCL_REAL *dist, Vec3f *p1, Vec3f *p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleDistance</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aef3d1be2e26b46982d044b8241396c90</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, FCL_REAL *dist)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleDistance</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ab6b281e9a676901d5915659961411276</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL *dist, Vec3f *p1, Vec3f *p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleDistance</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a9ddeaca505c3f09f2ae6539008fc750a</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL *dist) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GJKSolver_libccd</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a95b5a858c8046327398e08f9c9ba43e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableCachedGuess</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a03290e94ab378a0056e6cd1e3502df05</anchor>
      <arglist>(bool) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCachedGuess</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a0235a4d84ec2f9e3c3693e47813362aa</anchor>
      <arglist>(const Vec3f &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getCachedGuess</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a92c95ff4ef3b4393a2bddfdad2d2f4ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a47ebb41d32fb993f3f8110722970f6a7</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a45a1818f31e9fcc183131144bfc52329</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a11b1836bb24f3daea089d9c1fe1af23e</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>afdd8ce48cb5ced37e3d5324ed97bce63</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Box &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a8bfa434945f7cf8369705568fce2c47d</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a7f257e508f566d58da73c258d376134a</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ac764270629610b3384707244bdcf3556</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a46a9507dc0482607ebd1b8bb87ea4c59</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Box &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad306fe20bed27c1dce630b2881a75a11</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>acb694b5d0c6468fcf7371c6d9d56f65f</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a659f78683b6030f8c8899680c7dd1031</anchor>
      <arglist>(const Cylinder &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a89d19fb7c2c845a31225052fbe5b92b2</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Cylinder &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a8f9064bec23e76f9815243bf62565e50</anchor>
      <arglist>(const Cone &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a7e2753cdecba1981e4afb2064846072b</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Cone &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>acd46aa759c4be2163d6f1a5d82effdf5</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a1b12b1ab05f2b0821a04bff629d545f1</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Halfspace &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a3dcf45500756e8433e0666a3d48b0d31</anchor>
      <arglist>(const Halfspace &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abc0675723b4ad2ced06efb2abfaa6fec</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ae6ec686bb40a7c7cf0c4fa47c087f908</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a52169fc3255d41d6b73d3e0e70def1eb</anchor>
      <arglist>(const Box &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa9a8065fbf80fbfa0e5fbbf16e07e76f</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Box &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a082dd9ee25746717b76990341ad2d8c0</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a9fa7efb7517fee927865033a1d57e5d5</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aa0b39d8513cbcb1dae527c4fd70eb365</anchor>
      <arglist>(const Cylinder &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a1298890555b3daf06ef041e102c8d3ae</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Cylinder &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad5a4c9703491129108a9b4b75edf92c5</anchor>
      <arglist>(const Cone &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>acd363e61745d696cb594b2cb80ff3250</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Cone &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a29151d84d2c8ef3b36a945fefbb7a78d</anchor>
      <arglist>(const Plane &amp;s1, const Transform3f &amp;tf1, const Plane &amp;s2, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>abbd0e62d19c493eee7b8ab7545a44cc9</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a6d62c9c14b99d1383643594fca28e2c3</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a16d943a58dc704efe7bc01ad3cc5da59</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleIntersect</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a2f1b14c6b8abb455ca04ac56a2258677</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a8cd267d6cb2ebc0526ac76d79399d3ad</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, FCL_REAL *dist, Vec3f *p1, Vec3f *p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a169e31aaf3496af54acf150623da330e</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL *dist, Vec3f *p1, Vec3f *p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a4859a50064ae0499b7c6bbd0a582b0e7</anchor>
      <arglist>(const Sphere &amp;s1, const Transform3f &amp;tf1, const Sphere &amp;s2, const Transform3f &amp;tf2, FCL_REAL *dist, Vec3f *p1, Vec3f *p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeDistance</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a8326de3a5b07a50f9373f8848353aa8f</anchor>
      <arglist>(const Capsule &amp;s1, const Transform3f &amp;tf1, const Capsule &amp;s2, const Transform3f &amp;tf2, FCL_REAL *dist, Vec3f *p1, Vec3f *p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleDistance</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>ad2974228487201b5b5c78e9d7ff22b9c</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, FCL_REAL *dist, Vec3f *p1, Vec3f *p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeTriangleDistance</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>a3331181765b4d3c2586739708d5e8ba7</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf1, const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf2, FCL_REAL *dist, Vec3f *p1, Vec3f *p2) const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>max_collision_iterations</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>af6761d9717d263bf7defc55f4dd9006f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>max_distance_iterations</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>af9af48a94612c12a41cb9778bffff6b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>collision_tolerance</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>adc7978d45379ed1d35ec9dcf083e484d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>distance_tolerance</name>
      <anchorfile>a00083.html</anchorfile>
      <anchor>aceb572eca5a43ce2840ed2e301c4584d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::GreedyKCenters</name>
    <filename>a00084.html</filename>
    <templarg>_T</templarg>
    <member kind="typedef">
      <type>boost::function&lt; double(const _T &amp;, const _T &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a393ff3be57f513f5393dec962646fae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GreedyKCenters</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>ae8a982da1d8dd751f57e2fc5a6adb433</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GreedyKCenters</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>ac31eac8a9d3726a7f81d0f7344feba5a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistanceFunction</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a63db9029c45e99a6a9aa6824855430dc</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a64d76318b68268667085f1c89215552c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>kcenters</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>ae5e7df1ff63e74d3a9532003d307c6b2</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data, unsigned int k, std::vector&lt; unsigned int &gt; &amp;centers, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;dists)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>acf21e6c4f24c59c95942dde84cbfbd78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RNG</type>
      <name>rng_</name>
      <anchorfile>a00084.html</anchorfile>
      <anchor>a4fc349437439c6eaf82001483d266bcf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Halfspace</name>
    <filename>a00085.html</filename>
    <base>fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Halfspace</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a6cec7f7fc025168c73d5f03c23ee71c0</anchor>
      <arglist>(const Vec3f &amp;n_, FCL_REAL d_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Halfspace</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>af1aa4c31f7002247a09b23f76dffc863</anchor>
      <arglist>(FCL_REAL a, FCL_REAL b, FCL_REAL c, FCL_REAL d_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Halfspace</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>af5da6b810279a0173de0263f953f8d78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>signedDistance</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a9e00668e35153943c78ffaaadb8c5d29</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a292621f3fbfc364bc2edfafab4430adb</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a3259abcd68f2c1f8b8dc4d03b6cb0037</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>afd982cc49d70e3ff2a1b345bf5445441</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>n</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>a8e9a0065766b904e2bd61c0c43923147</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>d</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>aaa9c9ee30d877f1c7028283ae6168b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unitNormalTest</name>
      <anchorfile>a00085.html</anchorfile>
      <anchor>ae447f77fd08bd68663156aad032dfbc6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::HierarchyTree</name>
    <filename>a00086.html</filename>
    <templarg>BV</templarg>
    <member kind="function">
      <type></type>
      <name>HierarchyTree</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a05f1379717ccd63d2b18ce9dadc75cc0</anchor>
      <arglist>(int bu_threshold_=16, int topdown_level_=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HierarchyTree</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ac44eca02fdb953f62834e06a8e296639</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a7dc3134cfcd29e32e18cbe97060b8cdb</anchor>
      <arglist>(std::vector&lt; NodeType * &gt; &amp;leaves, int level=0)</arglist>
    </member>
    <member kind="function">
      <type>NodeType *</type>
      <name>insert</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a6ea0ed35cb474ffe30b9767e070ac336</anchor>
      <arglist>(const BV &amp;bv, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>adf4eb1ae8e9d40bed5af0e045f87951a</anchor>
      <arglist>(NodeType *leaf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a7a5f1cb66f7a7b058671af6ddc071eee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a318bb2b3dcd4f8ebdb5c7c1ba30ef9d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a16e2df823ee9ca812cce8aa90006345a</anchor>
      <arglist>(NodeType *leaf, int lookahead_level=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a5bdac27a85166c076c9c0a5a1b33e66e</anchor>
      <arglist>(NodeType *leaf, const BV &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a2e8c1efe68fb7f1489f2666a7ccbcd63</anchor>
      <arglist>(NodeType *leaf, const BV &amp;bv, const Vec3f &amp;vel, FCL_REAL margin)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a0264806efe1b5d25b05cad06a9306df7</anchor>
      <arglist>(NodeType *leaf, const BV &amp;bv, const Vec3f &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMaxHeight</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a6a30bec3882d923e9be2a913cfa51d9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMaxDepth</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a672546b9d83f6d377c8b3917f0867dca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>balanceBottomup</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a5c93afb602115b806c3028d1b02413e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>balanceTopdown</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a62272f89e6f8c94638dad4dafd51a102</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>balanceIncremental</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a387307aaab7a715a30f60bf6e9c59306</anchor>
      <arglist>(int iterations)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refit</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>acd1b21fd16f31f6bea0cf2df0bcfe414</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractLeaves</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>adea88d9a2a3f09e8d6ef37d44329868f</anchor>
      <arglist>(const NodeType *root, std::vector&lt; NodeType * &gt; &amp;leaves) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a699672e5b74e5262a1acd9defb1ef2f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeType *</type>
      <name>getRoot</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a693b651b8f6d7cb796d21cfeb8983726</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeType *&amp;</type>
      <name>getRoot</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a988384bb7b0ac5c7a569fd0c372bd564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a81939f82f4f5275c7f3a3a11625bbbad</anchor>
      <arglist>(NodeType *root, int depth)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a92b50b3b8a26ea43fa43e0f17bb18968</anchor>
      <arglist>(NodeBase&lt; AABB &gt; *leaf, const AABB &amp;bv_, const Vec3f &amp;vel, FCL_REAL margin)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ab8ed0c4a9778b8b69ea969d3fa628675</anchor>
      <arglist>(NodeBase&lt; AABB &gt; *leaf, const AABB &amp;bv_, const Vec3f &amp;vel)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>topdown_level</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a35dd65eeacffbb3fb110b1fe41ad9e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bu_threshold</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a68e0054c778f7ffea536a7b72d721cd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeType *</type>
      <name>root_node</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a8a7b72f14b91ff0ae3ae956bddf8d2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>n_leaves</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a0f741aa25fa77e82a3288509b893629c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>opath</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>aa5f629a3b009efe278a14fc289f22142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeType *</type>
      <name>free_node</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a63c4458ae617976da91071cc48d7696f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>max_lookahead_level</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a8772525377f5c7c0ca58262af00b8f6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::implementation_array::HierarchyTree</name>
    <filename>a00087.html</filename>
    <templarg>BV</templarg>
    <member kind="function">
      <type></type>
      <name>HierarchyTree</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>aa625ae83b3bde44a83ebdc3fb1ecebdc</anchor>
      <arglist>(int bu_threshold_=16, int topdown_level_=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HierarchyTree</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a53d72f39d171876286b7a984fb1308cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a22a08ce92973909aa1e1301b52543f5f</anchor>
      <arglist>(NodeType *leaves, int n_leaves_, int level=0)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>insert</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a9f7399fdde323d995b98332a6a19ad07</anchor>
      <arglist>(const BV &amp;bv, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a21dc1115a59c94124d9ce469b08e0835</anchor>
      <arglist>(size_t leaf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>af177226521fb7cf6df53ded427b8fa36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a2442d63214a666b954e23811217d92da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a9d6090e68ce1db325eb122ff55056ab4</anchor>
      <arglist>(size_t leaf, int lookahead_level=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>aa1c6b13f45fce50cefacba2aba17c13b</anchor>
      <arglist>(size_t leaf, const BV &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a6d11d4236213d796b2d225ccaaccc2b7</anchor>
      <arglist>(size_t leaf, const BV &amp;bv, const Vec3f &amp;vel, FCL_REAL margin)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>af6a9cf640fe47910b9fe5692c59b70b4</anchor>
      <arglist>(size_t leaf, const BV &amp;bv, const Vec3f &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMaxHeight</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>aa22d22d883cec859000114717b695c80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMaxDepth</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>afc75cfc74d0138073f8323179d26467a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>balanceBottomup</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a246d740843f82159f86f32959d3b04f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>balanceTopdown</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a56e026e6e744bf8df0df0123507c8fb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>balanceIncremental</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>af078e2ab1577f9b378e1ed3391fd03f2</anchor>
      <arglist>(int iterations)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refit</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>aba975feb358f5cc092ade1e2eb51234c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractLeaves</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a14d040393cd31068661d56915560aec0</anchor>
      <arglist>(size_t root, NodeType *&amp;leaves) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a2c41efe169e20ef161a1a0894864cead</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getRoot</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a5b4acdf2eef0c686d1fc6d68b428e176</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeType *</type>
      <name>getNodes</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a862a1e4742583a10f744b4bd1c47b80c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a57a995e2469a0474675d32e5ddeef1b9</anchor>
      <arglist>(size_t root, int depth)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>topdown_level</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a01f846b9ca84254d9cd8d425a756d81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bu_threshold</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a2a6cc4aa7fb38800c7adb321c36b4d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>NULL_NODE</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a1e89d126950185960803552df8cb701e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>root_node</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a9407442bf498a34fd898c70f02475451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeType *</type>
      <name>nodes</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>af6593beb9fe331002788dbffd70f3cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>n_nodes</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a6493743470b2cf3f7e9f7016ab03055b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>n_nodes_alloc</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>afb17431bfcacc47a11ec6a57e8a43082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>n_leaves</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ad6d03efc2b6016d1fc32562e756eece3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>freelist</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a2fe60266cd3f0ebae3824c9b91745b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>opath</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a8f50e60ad2e9e8b07e471cd61019be8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>max_lookahead_level</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ae0cee40e82db5ee7b11a43ef0bf3da1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HierarchyTree&lt; fcl::AABB &gt;</name>
    <filename>a00086.html</filename>
    <member kind="function">
      <type></type>
      <name>HierarchyTree</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a05f1379717ccd63d2b18ce9dadc75cc0</anchor>
      <arglist>(int bu_threshold_=16, int topdown_level_=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HierarchyTree</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>ac44eca02fdb953f62834e06a8e296639</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a7dc3134cfcd29e32e18cbe97060b8cdb</anchor>
      <arglist>(std::vector&lt; NodeType * &gt; &amp;leaves, int level=0)</arglist>
    </member>
    <member kind="function">
      <type>NodeType *</type>
      <name>insert</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a6ea0ed35cb474ffe30b9767e070ac336</anchor>
      <arglist>(const fcl::AABB &amp;bv, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>adf4eb1ae8e9d40bed5af0e045f87951a</anchor>
      <arglist>(NodeType *leaf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a7a5f1cb66f7a7b058671af6ddc071eee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a318bb2b3dcd4f8ebdb5c7c1ba30ef9d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a16e2df823ee9ca812cce8aa90006345a</anchor>
      <arglist>(NodeType *leaf, int lookahead_level=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a5bdac27a85166c076c9c0a5a1b33e66e</anchor>
      <arglist>(NodeType *leaf, const fcl::AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a2e8c1efe68fb7f1489f2666a7ccbcd63</anchor>
      <arglist>(NodeType *leaf, const fcl::AABB &amp;bv, const Vec3f &amp;vel, FCL_REAL margin)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a0264806efe1b5d25b05cad06a9306df7</anchor>
      <arglist>(NodeType *leaf, const fcl::AABB &amp;bv, const Vec3f &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMaxHeight</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a6a30bec3882d923e9be2a913cfa51d9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMaxDepth</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a672546b9d83f6d377c8b3917f0867dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>balanceBottomup</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a5c93afb602115b806c3028d1b02413e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>balanceTopdown</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a62272f89e6f8c94638dad4dafd51a102</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>balanceIncremental</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a387307aaab7a715a30f60bf6e9c59306</anchor>
      <arglist>(int iterations)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refit</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>acd1b21fd16f31f6bea0cf2df0bcfe414</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractLeaves</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>adea88d9a2a3f09e8d6ef37d44329868f</anchor>
      <arglist>(const NodeType *root, std::vector&lt; NodeType * &gt; &amp;leaves) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a699672e5b74e5262a1acd9defb1ef2f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeType *</type>
      <name>getRoot</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a693b651b8f6d7cb796d21cfeb8983726</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeType *&amp;</type>
      <name>getRoot</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a988384bb7b0ac5c7a569fd0c372bd564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a81939f82f4f5275c7f3a3a11625bbbad</anchor>
      <arglist>(NodeType *root, int depth)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>topdown_level</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a35dd65eeacffbb3fb110b1fe41ad9e73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bu_threshold</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a68e0054c778f7ffea536a7b72d721cd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeType *</type>
      <name>root_node</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a8a7b72f14b91ff0ae3ae956bddf8d2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>n_leaves</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a0f741aa25fa77e82a3288509b893629c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>opath</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>aa5f629a3b009efe278a14fc289f22142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeType *</type>
      <name>free_node</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a63c4458ae617976da91071cc48d7696f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>max_lookahead_level</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a8772525377f5c7c0ca58262af00b8f6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HierarchyTree&lt; fcl::AABB &gt;</name>
    <filename>a00087.html</filename>
    <member kind="function">
      <type></type>
      <name>HierarchyTree</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>aa625ae83b3bde44a83ebdc3fb1ecebdc</anchor>
      <arglist>(int bu_threshold_=16, int topdown_level_=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HierarchyTree</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a53d72f39d171876286b7a984fb1308cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a22a08ce92973909aa1e1301b52543f5f</anchor>
      <arglist>(NodeType *leaves, int n_leaves_, int level=0)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>insert</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a9f7399fdde323d995b98332a6a19ad07</anchor>
      <arglist>(const fcl::AABB &amp;bv, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a21dc1115a59c94124d9ce469b08e0835</anchor>
      <arglist>(size_t leaf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>af177226521fb7cf6df53ded427b8fa36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a2442d63214a666b954e23811217d92da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a9d6090e68ce1db325eb122ff55056ab4</anchor>
      <arglist>(size_t leaf, int lookahead_level=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>aa1c6b13f45fce50cefacba2aba17c13b</anchor>
      <arglist>(size_t leaf, const fcl::AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a6d11d4236213d796b2d225ccaaccc2b7</anchor>
      <arglist>(size_t leaf, const fcl::AABB &amp;bv, const Vec3f &amp;vel, FCL_REAL margin)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>af6a9cf640fe47910b9fe5692c59b70b4</anchor>
      <arglist>(size_t leaf, const fcl::AABB &amp;bv, const Vec3f &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMaxHeight</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>aa22d22d883cec859000114717b695c80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getMaxDepth</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>afc75cfc74d0138073f8323179d26467a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>balanceBottomup</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a246d740843f82159f86f32959d3b04f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>balanceTopdown</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a56e026e6e744bf8df0df0123507c8fb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>balanceIncremental</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>af078e2ab1577f9b378e1ed3391fd03f2</anchor>
      <arglist>(int iterations)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refit</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>aba975feb358f5cc092ade1e2eb51234c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractLeaves</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a14d040393cd31068661d56915560aec0</anchor>
      <arglist>(size_t root, NodeType *&amp;leaves) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a2c41efe169e20ef161a1a0894864cead</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getRoot</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a5b4acdf2eef0c686d1fc6d68b428e176</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NodeType *</type>
      <name>getNodes</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a862a1e4742583a10f744b4bd1c47b80c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a57a995e2469a0474675d32e5ddeef1b9</anchor>
      <arglist>(size_t root, int depth)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>topdown_level</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a01f846b9ca84254d9cd8d425a756d81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>bu_threshold</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a2a6cc4aa7fb38800c7adb321c36b4d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>NULL_NODE</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a1e89d126950185960803552df8cb701e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>root_node</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a9407442bf498a34fd898c70f02475451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NodeType *</type>
      <name>nodes</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>af6593beb9fe331002788dbffd70f3cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>n_nodes</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a6493743470b2cf3f7e9f7016ab03055b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>n_nodes_alloc</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>afb17431bfcacc47a11ec6a57e8a43082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>n_leaves</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ad6d03efc2b6016d1fc32562e756eece3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>freelist</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a2fe60266cd3f0ebae3824c9b91745b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>opath</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>a8f50e60ad2e9e8b07e471cd61019be8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>max_lookahead_level</name>
      <anchorfile>a00087.html</anchorfile>
      <anchor>ae0cee40e82db5ee7b11a43ef0bf3da1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::IMatrix3</name>
    <filename>a00088.html</filename>
    <member kind="function">
      <type></type>
      <name>IMatrix3</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a67665d0665510765b75ceeeb0cb89e9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMatrix3</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a8203b23c3c44435b161c132b2fc59429</anchor>
      <arglist>(FCL_REAL v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMatrix3</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ac48346ce70f14950b50abde6e2e2f11b</anchor>
      <arglist>(const Matrix3f &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMatrix3</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a8d41ca703ebaaa8832f68c44bc7b7ec9</anchor>
      <arglist>(FCL_REAL m[3][3][2])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMatrix3</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a6b1e9ec72135ac31829ecc39ec5bca52</anchor>
      <arglist>(FCL_REAL m[3][3])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMatrix3</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a8a2767b3e5152004e15939057a682eff</anchor>
      <arglist>(Interval m[3][3])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMatrix3</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ac6fa370506cd3ac22c47b382bc5362c2</anchor>
      <arglist>(const IVector3 &amp;v1, const IVector3 &amp;v2, const IVector3 &amp;v3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ae7f162b2b4a5eb37a3b710cc359c5d22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IVector3</type>
      <name>getColumn</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ace6a5db4db0cdeaf201dc062d100d145</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>const IVector3 &amp;</type>
      <name>getRow</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a808d483228e833155a638aa446dcef63</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getColumnLow</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a490d94b5cf86f3472c52fc826a80487a</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getRowLow</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a27ced52559e3ed4854d96d8302465264</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getColumnHigh</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a08712373100f76177e9ce2539143c819</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getRowHigh</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a953c031bfd0078e849b48f25e84f3ecc</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>getLow</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a0692becc314a689398e2a83f41018b7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>getHigh</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a2da6712c86bfc7527a8d5e76a4c7279e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Interval &amp;</type>
      <name>operator()</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a3a48908ccab8df46827b6d7520650908</anchor>
      <arglist>(size_t i, size_t j) const </arglist>
    </member>
    <member kind="function">
      <type>Interval &amp;</type>
      <name>operator()</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>adcb8495f2b500063aa29c40608494b78</anchor>
      <arglist>(size_t i, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>IMatrix3</type>
      <name>operator+</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a9c6126ba22da2e42bb28eb4c670cb80e</anchor>
      <arglist>(const IMatrix3 &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>IMatrix3 &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>af3af58b4542ba136d05d1ded077e7033</anchor>
      <arglist>(const IMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>IMatrix3</type>
      <name>operator-</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a334758846c6b37348db637abf14cae7a</anchor>
      <arglist>(const IMatrix3 &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>IMatrix3 &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a043af3a400acefcbf7836c0ff127c398</anchor>
      <arglist>(const IMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>IVector3</type>
      <name>operator*</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ae1be506eab55e69a9af1909f0f5f74c9</anchor>
      <arglist>(const Vec3f &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>IVector3</type>
      <name>operator*</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a3fe9a143bb14ee23dc0279aa2b2fa516</anchor>
      <arglist>(const IVector3 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>IMatrix3</type>
      <name>operator*</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a208198344c4e55685825ebc0a905c6cd</anchor>
      <arglist>(const IMatrix3 &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>IMatrix3</type>
      <name>operator*</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ad5e4100ce2db9a4e4056e97e8466854b</anchor>
      <arglist>(const Matrix3f &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>IMatrix3 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a946116c736337ad471e528d3ca21edbf</anchor>
      <arglist>(const IMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>IMatrix3 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>ad94436b95dfb0a46b41a4ef347283a25</anchor>
      <arglist>(const Matrix3f &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>IMatrix3 &amp;</type>
      <name>rotationConstrain</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>af3ce70d4b35dfb1f7da2e05d0f514701</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a32f0f3e93c1fa0ab149d636c76c5d44c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>IVector3</type>
      <name>v_</name>
      <anchorfile>a00088.html</anchorfile>
      <anchor>a0bf059e48be86ca2ae066bf834c1565a</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::InterpMotion</name>
    <filename>a00089.html</filename>
    <base>fcl::MotionBase</base>
    <member kind="function">
      <type></type>
      <name>InterpMotion</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>aa275322b41efe821f49e1feadd50bd05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpMotion</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a68768e680ae9aac9bbeb881830c4bf38</anchor>
      <arglist>(const Matrix3f &amp;R1, const Vec3f &amp;T1, const Matrix3f &amp;R2, const Vec3f &amp;T2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpMotion</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a9430861cde466489182b73dc412a8af8</anchor>
      <arglist>(const Transform3f &amp;tf1_, const Transform3f &amp;tf2_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpMotion</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>af31ecdd93d1d8602b5c8856ffa8bf017</anchor>
      <arglist>(const Matrix3f &amp;R1, const Vec3f &amp;T1, const Matrix3f &amp;R2, const Vec3f &amp;T2, const Vec3f &amp;O)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpMotion</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a2237ea625a41b1176e821588a90e2b69</anchor>
      <arglist>(const Transform3f &amp;tf1_, const Transform3f &amp;tf2_, const Vec3f &amp;O)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>integrate</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a14f01c7fa987c45e622b7eac22a8ef00</anchor>
      <arglist>(double dt) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeMotionBound</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a920befcfa3734d5f02ef8b65af7d0bcd</anchor>
      <arglist>(const BVMotionBoundVisitor &amp;mb_visitor) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeMotionBound</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>aa4be933d410da36ba2dfdd5eb4ef847b</anchor>
      <arglist>(const TriangleMotionBoundVisitor &amp;mb_visitor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCurrentTransform</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a6f7b87b9c4d2dfa853ba9bde1f60985f</anchor>
      <arglist>(Transform3f &amp;tf_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTaylorModel</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a22c26477f393881af58b58a818a67eb0</anchor>
      <arglist>(TMatrix3 &amp;tm, TVector3 &amp;tv) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getReferencePoint</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a351b8f39fe9911fefca5a837100bbd32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getAngularAxis</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a8ff171649a39b9b308834b92c1996bdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getAngularVelocity</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a5c81f02d1c9a8aa1746c395e9a3eae2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getLinearVelocity</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>ac4b1b19a05327bb2c3b75a5a206bc033</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeVelocity</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a0e789b732b80ebcad3c2c207280dc1ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Quaternion3f</type>
      <name>deltaRotation</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a2514e75702358af5f06b4bbcc944b9b9</anchor>
      <arglist>(FCL_REAL dt) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Quaternion3f</type>
      <name>absoluteRotation</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a578b7c2b42d106017197a31568d78177</anchor>
      <arglist>(FCL_REAL dt) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Transform3f</type>
      <name>tf1</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a3f1726b0c75e4e3f0dfa9e870df7b1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Transform3f</type>
      <name>tf2</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>aef78b9164d87ff2bd4fa7ff47c9e1307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Transform3f</type>
      <name>tf</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>aa4c7ca916d9b85bbe23f82fb4b8ba900</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>linear_vel</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>aea08ab0c996d697cfd52e35cdaf07c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>angular_vel</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a6106647eb0b39e1e3ecb7f197eba0509</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>angular_axis</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a55003b7fb40d6c0a19c73c20db35b55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>reference_p</name>
      <anchorfile>a00089.html</anchorfile>
      <anchor>a9e26deb4aba5e6149ddc8a11fe9144b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Interpolation</name>
    <filename>a00090.html</filename>
    <member kind="function">
      <type></type>
      <name>Interpolation</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a69000fa0f72aca34960b7d9231f1b1a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Interpolation</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>ab37daedab2b40accb67b812996f02735</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interpolation</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a329b5e4c9636db80f111850a6f483452</anchor>
      <arglist>(FCL_REAL start_value, FCL_REAL end_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartValue</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a7f2346442900528272a57dceac8474c7</anchor>
      <arglist>(FCL_REAL start_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEndValue</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a983b39b9ee2d48589ea8fe374b8792fa</anchor>
      <arglist>(FCL_REAL end_value)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FCL_REAL</type>
      <name>getValue</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>aa29c196750f71102bef586e9dae9950e</anchor>
      <arglist>(FCL_REAL time) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FCL_REAL</type>
      <name>getValueLowerBound</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a4857b3d290438d7795496e5660e8b474</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FCL_REAL</type>
      <name>getValueUpperBound</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a7d3c4529689db3bd7adb70af0257a5bc</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual InterpolationType</type>
      <name>getType</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>af53a624cbd167d538ed15269113cfbed</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>ad3ad691eab230a16c546963a17e7368e</anchor>
      <arglist>(const Interpolation &amp;interpolation) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a2fcc6c987ea83ed87ddf37c35d7722ce</anchor>
      <arglist>(const Interpolation &amp;interpolation) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FCL_REAL</type>
      <name>getMovementLengthBound</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a24c164a8faee38d7c878738e9b09692c</anchor>
      <arglist>(FCL_REAL time) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FCL_REAL</type>
      <name>getVelocityBound</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a92515caad870ed3311a39c3b8070c0e7</anchor>
      <arglist>(FCL_REAL time) const  =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>value_0_</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a1473d7b4033683d275f7fda0f397d796</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>value_1_</name>
      <anchorfile>a00090.html</anchorfile>
      <anchor>a11ca71952ec22cf40df0a1d2b25cf3ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::InterpolationFactory</name>
    <filename>a00091.html</filename>
    <member kind="typedef">
      <type>boost::function&lt; boost::shared_ptr&lt; Interpolation &gt;FCL_REAL, FCL_REAL)&gt;</type>
      <name>CreateFunction</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>af1d15fc8ec04df0ca9dd1347afc0998b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerClass</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a4600d93dc410020bbbda15d8cd37ef4e</anchor>
      <arglist>(const InterpolationType type, const CreateFunction create_function)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Interpolation &gt;</type>
      <name>create</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a711fb130dac996bf94ae665a20a47f90</anchor>
      <arglist>(const InterpolationType type, FCL_REAL start_value, FCL_REAL end_value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterpolationFactory &amp;</type>
      <name>instance</name>
      <anchorfile>a00091.html</anchorfile>
      <anchor>a2c315a839198a4a9882b2f679755192d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::InterpolationLinear</name>
    <filename>a00092.html</filename>
    <base>fcl::Interpolation</base>
    <member kind="function">
      <type></type>
      <name>InterpolationLinear</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>aa25b4d97c6af3c224aab1d0490119ff0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterpolationLinear</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a51747c5211b5cf404bd68c58d50b10f0</anchor>
      <arglist>(FCL_REAL start_value, FCL_REAL end_value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>getValue</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a2b8c597d9a301fa1e01893ee52758ba4</anchor>
      <arglist>(FCL_REAL time) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>getValueLowerBound</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a1f88df766e2584fd722cb4f62109f10d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>getValueUpperBound</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a5ec852eec9f7065ce033fea44a4ad7c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual InterpolationType</type>
      <name>getType</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a63911b603e8a0324fd6b0a87aa3d8f6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>getMovementLengthBound</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a2220558dc1170f9ece45997ec0dc4769</anchor>
      <arglist>(FCL_REAL time) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>getVelocityBound</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>ac0c5166d79c9ec443aeb57872e1ad041</anchor>
      <arglist>(FCL_REAL time) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static boost::shared_ptr&lt; Interpolation &gt;</type>
      <name>create</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>a239aeb92bf198e3020baf82e24a7b18c</anchor>
      <arglist>(FCL_REAL start_value, FCL_REAL end_value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerToFactory</name>
      <anchorfile>a00092.html</anchorfile>
      <anchor>adeffdf38ddc3b8d729c3f464ecca75bc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Intersect</name>
    <filename>a00093.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>intersect_VF</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>aa579ccaeb8aaae1a4d1dd3e47be03797</anchor>
      <arglist>(const Vec3f &amp;a0, const Vec3f &amp;b0, const Vec3f &amp;c0, const Vec3f &amp;p0, const Vec3f &amp;a1, const Vec3f &amp;b1, const Vec3f &amp;c1, const Vec3f &amp;p1, FCL_REAL *collision_time, Vec3f *p_i, bool useNewton=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>intersect_EE</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a7ffdef46833b7b9267e0901fd57f1f75</anchor>
      <arglist>(const Vec3f &amp;a0, const Vec3f &amp;b0, const Vec3f &amp;c0, const Vec3f &amp;d0, const Vec3f &amp;a1, const Vec3f &amp;b1, const Vec3f &amp;c1, const Vec3f &amp;d1, FCL_REAL *collision_time, Vec3f *p_i, bool useNewton=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>intersect_VF_filtered</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a6974d4a8c7369ea9098652d1a4bad94f</anchor>
      <arglist>(const Vec3f &amp;a0, const Vec3f &amp;b0, const Vec3f &amp;c0, const Vec3f &amp;p0, const Vec3f &amp;a1, const Vec3f &amp;b1, const Vec3f &amp;c1, const Vec3f &amp;p1, FCL_REAL *collision_time, Vec3f *p_i, bool useNewton=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>intersect_EE_filtered</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a75b955d92d0bb8a27c782180a12f057a</anchor>
      <arglist>(const Vec3f &amp;a0, const Vec3f &amp;b0, const Vec3f &amp;c0, const Vec3f &amp;d0, const Vec3f &amp;a1, const Vec3f &amp;b1, const Vec3f &amp;c1, const Vec3f &amp;d1, FCL_REAL *collision_time, Vec3f *p_i, bool useNewton=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>intersect_VE</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>aa69a57838c5a50943d7ffc4b9347c778</anchor>
      <arglist>(const Vec3f &amp;a0, const Vec3f &amp;b0, const Vec3f &amp;p0, const Vec3f &amp;a1, const Vec3f &amp;b1, const Vec3f &amp;p1, const Vec3f &amp;L)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>intersect_Triangle</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a3f1e3e7d64522525c8a0870c51c6a457</anchor>
      <arglist>(const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Vec3f &amp;Q1, const Vec3f &amp;Q2, const Vec3f &amp;Q3, Vec3f *contact_points=NULL, unsigned int *num_contact_points=NULL, FCL_REAL *penetration_depth=NULL, Vec3f *normal=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>intersect_Triangle</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a122dcdb955fbc30231afb4db361e9e90</anchor>
      <arglist>(const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Vec3f &amp;Q1, const Vec3f &amp;Q2, const Vec3f &amp;Q3, const Matrix3f &amp;R, const Vec3f &amp;T, Vec3f *contact_points=NULL, unsigned int *num_contact_points=NULL, FCL_REAL *penetration_depth=NULL, Vec3f *normal=NULL)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>intersect_Triangle</name>
      <anchorfile>a00093.html</anchorfile>
      <anchor>a3c44214fd928889117d03f0eb090603a</anchor>
      <arglist>(const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Vec3f &amp;Q1, const Vec3f &amp;Q2, const Vec3f &amp;Q3, const Transform3f &amp;tf, Vec3f *contact_points=NULL, unsigned int *num_contact_points=NULL, FCL_REAL *penetration_depth=NULL, Vec3f *normal=NULL)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::Interval</name>
    <filename>a00094.html</filename>
    <member kind="function">
      <type></type>
      <name>Interval</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a65536c8320064569506d4cc4b620399c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interval</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>afaae2e158230a97ee03fdf6ade9784e6</anchor>
      <arglist>(FCL_REAL v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interval</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a9f78c22bbc71a8259e0854599132ca51</anchor>
      <arglist>(FCL_REAL left, FCL_REAL right)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a5fe9e0c3b435eb95e5c48a23a36d037f</anchor>
      <arglist>(FCL_REAL a, FCL_REAL b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a367c5f52ff92a3ada1016cead4952ee7</anchor>
      <arglist>(FCL_REAL x)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>operator[]</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>aa51d02c2204d5e7d4b36a153c2badbf0</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>acc10e08860abacbb516a2b28539e927a</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a3420012f6316d616e62058dfc0aa0045</anchor>
      <arglist>(const Interval &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Interval</type>
      <name>operator+</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a00e33cb33c16d2e2b33305dfd14ac1fd</anchor>
      <arglist>(const Interval &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Interval</type>
      <name>operator-</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a570d4933c9a692c13636a032e06684ae</anchor>
      <arglist>(const Interval &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Interval &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a919c8f2652f9e6c16db37b60bfbe85e8</anchor>
      <arglist>(const Interval &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Interval &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a2012e4b122a347347d51e4c9fda66d94</anchor>
      <arglist>(const Interval &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Interval</type>
      <name>operator*</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>aa024b12f5757dc4ed11901ff8f540905</anchor>
      <arglist>(const Interval &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Interval &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a90e46501e96871ab22e7808e3dac7cc2</anchor>
      <arglist>(const Interval &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Interval</type>
      <name>operator*</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a3ef42ddaf2b65ea1a9f36aa94156e534</anchor>
      <arglist>(FCL_REAL d) const </arglist>
    </member>
    <member kind="function">
      <type>Interval &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a623f18a02e1b034188b1ea52c179cbd8</anchor>
      <arglist>(FCL_REAL d)</arglist>
    </member>
    <member kind="function">
      <type>Interval</type>
      <name>operator/</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>aea54dddf5beb04d294adbd8b954b4f64</anchor>
      <arglist>(const Interval &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Interval &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a419d4cbbade1e1f0afc8d005738bac2d</anchor>
      <arglist>(const Interval &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a3260224f61cc6a184b6fb89a021c8ee4</anchor>
      <arglist>(const Interval &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersect</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>ad5687082bdae6445c47fef3fca529279</anchor>
      <arglist>(const Interval &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Interval</type>
      <name>operator-</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>adb5491b9b0a3e6a6287648dd98d4b379</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getAbsLower</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a0f117a557bf1ffaf34cecd69e1cbbaae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getAbsUpper</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a3587b6186d79d25f5fbd65b56202bf94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a7de11b3eb1efd0d797e3707107dce9a0</anchor>
      <arglist>(FCL_REAL v) const </arglist>
    </member>
    <member kind="function">
      <type>Interval &amp;</type>
      <name>bound</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a0c7e71083af07c29fcc29c268746292f</anchor>
      <arglist>(FCL_REAL v)</arglist>
    </member>
    <member kind="function">
      <type>Interval &amp;</type>
      <name>bound</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a5efb511c2e659b41454be10184604cab</anchor>
      <arglist>(const Interval &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a53e877ebc3280302ddd3a7696649d47a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>center</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>aa0a2d521f1da4312b4cbba26571a3426</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>diameter</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>affa7e6e307ba4e7327079b9546abc492</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>i_</name>
      <anchorfile>a00094.html</anchorfile>
      <anchor>a7b535e0b3d90cbba4c5e4a87534eb8ee</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::IntervalTree</name>
    <filename>a00095.html</filename>
    <member kind="function">
      <type></type>
      <name>IntervalTree</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a9e2a221429006e9dba7094d98bc76659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntervalTree</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a7a5c243379e84b2d22858e0905dbce80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a4944e8d8c824058507fb5852e539b8f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SimpleInterval *</type>
      <name>deleteNode</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a52b7556e0e4c485107d794f56824488f</anchor>
      <arglist>(IntervalTreeNode *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteNode</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ac9b9a0d64ee82223ce910f73408cdf00</anchor>
      <arglist>(SimpleInterval *ivl)</arglist>
    </member>
    <member kind="function">
      <type>IntervalTreeNode *</type>
      <name>insert</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a4cc941658c2a6d8990603434fc186a27</anchor>
      <arglist>(SimpleInterval *new_interval)</arglist>
    </member>
    <member kind="function">
      <type>IntervalTreeNode *</type>
      <name>getPredecessor</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>acb5af1e9f0def0969c57d7959327ccc9</anchor>
      <arglist>(IntervalTreeNode *node) const </arglist>
    </member>
    <member kind="function">
      <type>IntervalTreeNode *</type>
      <name>getSuccessor</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a8ab9c9bc0a180c38f013f48374ed5849</anchor>
      <arglist>(IntervalTreeNode *node) const </arglist>
    </member>
    <member kind="function">
      <type>std::deque&lt; SimpleInterval * &gt;</type>
      <name>query</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ac15a7f02443ca774cccf762e07aeba9c</anchor>
      <arglist>(double low, double high)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>leftRotate</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a45c39846ff4d2d7482ea74f2d6cbbd86</anchor>
      <arglist>(IntervalTreeNode *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>rightRotate</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a1c8cb3a3a8266c39b05406bb74937d0e</anchor>
      <arglist>(IntervalTreeNode *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recursiveInsert</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a09b78f765bcc6db3d8d68a2f8cff3a33</anchor>
      <arglist>(IntervalTreeNode *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recursivePrint</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>acd075ae195cfb7496422a849dda618b0</anchor>
      <arglist>(IntervalTreeNode *node) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IntervalTreeNode *</type>
      <name>recursiveSearch</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a625b5cbf516079bc396c081cda5a0b06</anchor>
      <arglist>(IntervalTreeNode *node, SimpleInterval *ivl) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fixupMaxHigh</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>ae386f2ffd0a4254b5af2c6e0db47b10d</anchor>
      <arglist>(IntervalTreeNode *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteFixup</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a2a0275b00ad0ea819ff0041e251d56f2</anchor>
      <arglist>(IntervalTreeNode *node)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntervalTreeNode *</type>
      <name>root</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a869272cf44e7faf30d6481acd6c07533</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntervalTreeNode *</type>
      <name>nil</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a72f49ad86aff1684064bf02a105a42ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::IntervalTreeCollisionManager</name>
    <filename>a00096.html</filename>
    <base>fcl::BroadPhaseCollisionManager</base>
    <class kind="struct">fcl::IntervalTreeCollisionManager::EndPoint</class>
    <class kind="struct">fcl::IntervalTreeCollisionManager::SAPInterval</class>
    <member kind="function">
      <type></type>
      <name>IntervalTreeCollisionManager</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ad2884c53c362ecb4106eb2e625e29a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntervalTreeCollisionManager</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a0823878d30943f40d34c2ee270590241</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObject</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>acb03c9a917b2de229c08a6301c81431a</anchor>
      <arglist>(CollisionObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterObject</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a37a86646c64f488bdb62955e34e801fa</anchor>
      <arglist>(CollisionObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ab50d961af2a9d69c56a2b6ddaaf6907f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>af33dc1330dce80e98ba7152e74089166</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>abe53101d943ca814237b253294bbcdf4</anchor>
      <arglist>(CollisionObject *updated_obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a29b01326a8d424fa7ae85a1607ef746e</anchor>
      <arglist>(const std::vector&lt; CollisionObject * &gt; &amp;updated_objs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a236ad16820cf8652a305de213593b518</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getObjects</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a01bb310f688461db4e065e554dc38022</anchor>
      <arglist>(std::vector&lt; CollisionObject * &gt; &amp;objs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>af7560e2d68a9752aaccba6227309758e</anchor>
      <arglist>(CollisionObject *obj, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a85b35d02aefdf923a664d35cce941068</anchor>
      <arglist>(CollisionObject *obj, void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a164c36c95bda19169b6e830fc0cf70ad</anchor>
      <arglist>(void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a349cfde1d534fa9dd41507fb4ec71e50</anchor>
      <arglist>(void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>aa7b446d5941679d38904948e1cb462b3</anchor>
      <arglist>(BroadPhaseCollisionManager *other_manager, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ac3a612e10256791a9e243cf8ab1a3913</anchor>
      <arglist>(BroadPhaseCollisionManager *other_manager, void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ab537aa1d68141a5829f7d54d5d130930</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a43a99b45ab6e23359a20571ad86a61d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkColl</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a58dd4a0c91714576f5daaae85da75947</anchor>
      <arglist>(std::deque&lt; SimpleInterval * &gt;::const_iterator pos_start, std::deque&lt; SimpleInterval * &gt;::const_iterator pos_end, CollisionObject *obj, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkDist</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a182366f4ed36448719340157b5334349</anchor>
      <arglist>(std::deque&lt; SimpleInterval * &gt;::const_iterator pos_start, std::deque&lt; SimpleInterval * &gt;::const_iterator pos_end, CollisionObject *obj, void *cdata, DistanceCallBack callback, FCL_REAL &amp;min_dist) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>collide_</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>aa4f8073307e393ec0986c7461c1928a7</anchor>
      <arglist>(CollisionObject *obj, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>distance_</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a146e7c18e9be2a896859d8f15598b23b</anchor>
      <arglist>(CollisionObject *obj, void *cdata, DistanceCallBack callback, FCL_REAL &amp;min_dist) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; EndPoint &gt;</type>
      <name>endpoints</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a8ea27167a3edb351381bc81d6b14c6de</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntervalTree *</type>
      <name>interval_trees</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a9224b381a6ddd4fa781ac25a1b2c70a2</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; CollisionObject *, SAPInterval * &gt;</type>
      <name>obj_interval_maps</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>ab31e908c332076252157f35368547abe</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>setup_</name>
      <anchorfile>a00096.html</anchorfile>
      <anchor>a90fbce325dd11490a27540f9302069aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::IntervalTreeNode</name>
    <filename>a00097.html</filename>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>aa6e17e475a8358623b4852a7ecfb267b</anchor>
      <arglist>(IntervalTreeNode *left, IntervalTreeNode *right) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntervalTreeNode</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a223fde7d7a14b2ddd7959063d819b18d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntervalTreeNode</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>ade6f04bf59f9eeddcdac6d93cb35ecf3</anchor>
      <arglist>(SimpleInterval *new_interval)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntervalTreeNode</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a9266932a75c7a55fd38e79b8a1531702</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SimpleInterval *</type>
      <name>stored_interval</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a4d38fbe761929780d6166ebf1c19446b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>key</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a300b6ade257f011ecaf70c5484728504</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>high</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a6b6d1a94372197bfa4acee562b369e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>max_high</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>aac572734e88ce183a43c46ab6f87a97c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>red</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a7b1257a6e05cf8ee5f29348afec22e7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntervalTreeNode *</type>
      <name>left</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>af21bb952bd3f58fe826463ae5518c01b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntervalTreeNode *</type>
      <name>right</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>af05b042c1fe73f2d4fe40378103d0833</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IntervalTreeNode *</type>
      <name>parent</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a894e365aebc05cf7adbb41c4938f7e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IntervalTree</name>
      <anchorfile>a00097.html</anchorfile>
      <anchor>a6efd4144fdd562f3f6d51bf3f4814eb5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::SaPCollisionManager::isNotValidPair</name>
    <filename>a00098.html</filename>
    <member kind="function">
      <type></type>
      <name>isNotValidPair</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>a1a45c08866543bcaadadb5956d9e5e30</anchor>
      <arglist>(CollisionObject *obj1_, CollisionObject *obj2_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>aab9dec51c6bd72f5277b9dd980c3e8fa</anchor>
      <arglist>(const SaPPair &amp;pair)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::SaPCollisionManager::isUnregistered</name>
    <filename>a00099.html</filename>
    <member kind="function">
      <type></type>
      <name>isUnregistered</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>aa03f545a5355064650a3e2d229c52365</anchor>
      <arglist>(CollisionObject *obj_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00099.html</anchorfile>
      <anchor>a8c14dd73110905f5121da2bb098bd5c2</anchor>
      <arglist>(const SaPPair &amp;pair) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::Item</name>
    <filename>a00100.html</filename>
    <templarg>N</templarg>
    <member kind="function">
      <type></type>
      <name>Item</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>ad4e12337efbf0bd18c3fb36fd8f7a38c</anchor>
      <arglist>(const Vecnf&lt; N &gt; &amp;q_, bool label_, FCL_REAL w_=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Item</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a93df9d082852f78f8a1abb9c43a68f38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Vecnf&lt; N &gt;</type>
      <name>q</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>a869835f55fa641480c4afd6318c0207b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>label</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>aed9542601ab78fa7df54ce81942e6da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>w</name>
      <anchorfile>a00100.html</anchorfile>
      <anchor>aa0843a4065424a562f4d11b5900e7403</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::IVector3</name>
    <filename>a00101.html</filename>
    <member kind="function">
      <type></type>
      <name>IVector3</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a79ae07a81deaec834287fd949f83ed81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IVector3</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ab08b4895e5a5b8a228bcc68b991cfac7</anchor>
      <arglist>(FCL_REAL v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IVector3</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a6a731bd1c9bdb739b4cee809a2e66eb3</anchor>
      <arglist>(FCL_REAL x, FCL_REAL y, FCL_REAL z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IVector3</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a1431f5578f95c09ea5505a7a4514db51</anchor>
      <arglist>(FCL_REAL xl, FCL_REAL xu, FCL_REAL yl, FCL_REAL yu, FCL_REAL zl, FCL_REAL zu)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IVector3</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ad1ab194c451c0877d465bf3b1f6d3810</anchor>
      <arglist>(Interval v[3])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IVector3</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ad1f62dc12c3c281124326e3d45ec5a30</anchor>
      <arglist>(FCL_REAL v[3][2])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IVector3</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a56942a8ac6ffd7b8dfd4e4139fa03fcf</anchor>
      <arglist>(const Interval &amp;v1, const Interval &amp;v2, const Interval &amp;v3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IVector3</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a26926a509f3d072eca58d94850720c4b</anchor>
      <arglist>(const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a3106b67502dc7e34c84edf76b57c5d69</anchor>
      <arglist>(FCL_REAL v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a50bd032ededb9fcb881a036c2940d7dc</anchor>
      <arglist>(FCL_REAL x, FCL_REAL y, FCL_REAL z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aa1fdd485d2caeff320bcde9c2fc82672</anchor>
      <arglist>(FCL_REAL xl, FCL_REAL xu, FCL_REAL yl, FCL_REAL yu, FCL_REAL zl, FCL_REAL zu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aa75b7c0a7d339cf8768111b1b33b5b7f</anchor>
      <arglist>(FCL_REAL v[3][2])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a890d87adc9c3e6145b4a13fcdc08d7b2</anchor>
      <arglist>(Interval v[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a7360417681ad66738a809dfddc377770</anchor>
      <arglist>(const Interval &amp;v1, const Interval &amp;v2, const Interval &amp;v3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a45ce01cf34876980e5bbf632d86d7501</anchor>
      <arglist>(const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ae76c5921a36ed86572da2664d509c036</anchor>
      <arglist>(FCL_REAL v[3])</arglist>
    </member>
    <member kind="function">
      <type>IVector3</type>
      <name>operator+</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a940c32db3d884755e9c2e8badfaea011</anchor>
      <arglist>(const IVector3 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>IVector3 &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aa338cb4719b8dbe4eefcf20df823fb42</anchor>
      <arglist>(const IVector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>IVector3</type>
      <name>operator-</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>abac194a29a39c14143fbb1ff29e2cd23</anchor>
      <arglist>(const IVector3 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>IVector3 &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a6dd702e8a0906e12d1e1a0d8a79446b7</anchor>
      <arglist>(const IVector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Interval</type>
      <name>dot</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a4efd9e24ed73dc5ebbd377ee69613383</anchor>
      <arglist>(const IVector3 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>IVector3</type>
      <name>cross</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a0b4b17ce85fd790c2016f84717e82034</anchor>
      <arglist>(const IVector3 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Interval</type>
      <name>dot</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a9ad54f182c925bb181c8b14f1df459da</anchor>
      <arglist>(const Vec3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>IVector3</type>
      <name>cross</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ae36621b2f733583a2ef6a3de63247564</anchor>
      <arglist>(const Vec3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const Interval &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>abea46ce7d7ac7c7dbfe066e8677caf49</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>Interval &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a31c91fe12b52aea391d5b10bae70b2dd</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getLow</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a2472b7d9e978d8d2215bd0fdd7370049</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getHigh</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a6222e93e2e98f8009fc889ba5d390468</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a3adc6e750fb92793b4a7516bf6af84f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>center</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a2cf5e6c4ed10e108949a6d3faa02bdd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volumn</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a9ad00688dc96d2217ea82f76d5f9d567</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ad002dfb1dfb9c626f12ce65caaf83070</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bound</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a53acfa07ffe5c80661ec928eaa93b897</anchor>
      <arglist>(const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bound</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>aa0a793242f52fcc1ced8abaa0fbce775</anchor>
      <arglist>(const IVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a5758cf3a64f9bc54247e074f789eb90e</anchor>
      <arglist>(const IVector3 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>ae2964723910b83514bc8d2abf3c800d4</anchor>
      <arglist>(const IVector3 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>IVector3 &amp;</type>
      <name>operator=</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>a83fcbdc78e90496a8f945150e9a00e12</anchor>
      <arglist>(const FclType&lt; Derived &gt; &amp;other)</arglist>
    </member>
    <member kind="variable">
      <type>Interval</type>
      <name>i_</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>af194b595f1d5f3b7a833e950c832b420</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Joint</name>
    <filename>a00102.html</filename>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a087b5451b61ea7898d7a2693d2b67ede</anchor>
      <arglist>(const boost::shared_ptr&lt; Link &gt; &amp;link_parent, const boost::shared_ptr&lt; Link &gt; &amp;link_child, const Transform3f &amp;transform_to_parent, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Joint</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a4a7ecb73e954c1ab102d1a6aaa32e639</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Joint</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>aec9feb940f31693e6446567ca116267b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a75478b5ef0d5a6f86da7f137757b9f78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a03d188ed642b0ac051af95bbe68778f9</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Transform3f</type>
      <name>getLocalTransform</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>ac424e1d606a225db84995d565b14e258</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>getNumDofs</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>ae064b01019f9e8a160d5c12090a07f07</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JointConfig &gt;</type>
      <name>getJointConfig</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a587cd19a1e8e63d6ff707d95a3d34c8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setJointConfig</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a62f40e53fbb2606ce93c2476494fcdd7</anchor>
      <arglist>(const boost::shared_ptr&lt; JointConfig &gt; &amp;joint_cfg)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Link &gt;</type>
      <name>getParentLink</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>acdde2bfe8caf397618389650eefe1fe5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Link &gt;</type>
      <name>getChildLink</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a530e8444a243e14be729d3f8f48ba73e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParentLink</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a0e1a41fc5aa5db04519c6ab24b693628</anchor>
      <arglist>(const boost::shared_ptr&lt; Link &gt; &amp;link)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChildLink</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>acbb4c12c239cd6fc0e7a9bb95c6debd4</anchor>
      <arglist>(const boost::shared_ptr&lt; Link &gt; &amp;link)</arglist>
    </member>
    <member kind="function">
      <type>JointType</type>
      <name>getJointType</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>ad8a5d2539b4149cbb349831f0e9ff304</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>getTransformToParent</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>af7b9ca059da43cb611d3cb30098109eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransformToParent</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>ab6b5d8c26058908a46731f6475afb1a8</anchor>
      <arglist>(const Transform3f &amp;t)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::weak_ptr&lt; Link &gt;</type>
      <name>link_parent_</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a3a8b8ec246c04db474fa19eb64ce331e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::weak_ptr&lt; Link &gt;</type>
      <name>link_child_</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a437bdce490259f8718fdc7b88229fa26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>JointType</type>
      <name>type_</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a89f8c9ef42bc5eb7387d1849abf78c69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a1d13b90a2fd2e9e5aa9e0fd184fc454b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; JointConfig &gt;</type>
      <name>joint_cfg_</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a30fde762dc663927c8a7ba4f9ca9a6e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Transform3f</type>
      <name>transform_to_parent_</name>
      <anchorfile>a00102.html</anchorfile>
      <anchor>a2972a9d19c5ead1bed2fe9837ab44375</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::JointConfig</name>
    <filename>a00103.html</filename>
    <member kind="function">
      <type></type>
      <name>JointConfig</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ae4675ddb518f8406e42fda90a46edfdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointConfig</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a81f0bc82194f7e88969deed8c7e20e19</anchor>
      <arglist>(const JointConfig &amp;joint_cfg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JointConfig</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a24896e1a2fefd46e06f69e772b0e6541</anchor>
      <arglist>(const boost::shared_ptr&lt; Joint &gt; &amp;joint, FCL_REAL default_value=0, FCL_REAL default_value_min=0, FCL_REAL default_value_max=0)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getDim</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a59c61d675256c6524650672b36bb6298</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>operator[]</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>abf95f3ca4d89d9f14e07016463dee6b5</anchor>
      <arglist>(std::size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a7946325328334f0964dba7f7a169e5f9</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getValue</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a70449fcd702a5fc573da8187468fec44</anchor>
      <arglist>(std::size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>getValue</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a85f8c5e16c51f6b2d569e4a961a41302</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getLimitMin</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>abc5b39966a58695d29b44e575ce616ae</anchor>
      <arglist>(std::size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>getLimitMin</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a8d300d26f6bbbfee0c0a85517056b12c</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getLimitMax</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a7b1951294f58a983221eb7075c68b4c1</anchor>
      <arglist>(std::size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>getLimitMax</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>ab9150792f9d534de1d2039162095b911</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Joint &gt;</type>
      <name>getJoint</name>
      <anchorfile>a00103.html</anchorfile>
      <anchor>a746f170ba1a5892dff62db60091fd970</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::KDOP</name>
    <filename>a00104.html</filename>
    <templarg>N</templarg>
    <member kind="function">
      <type></type>
      <name>KDOP</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a6d5893bc76af3c62c79b37a2d4ede487</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KDOP</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a227a903e8f5868776a8513a35a5870f0</anchor>
      <arglist>(const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KDOP</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a0c6e7553efd0d6dd71e2129eed7ed098</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a7a7486201ebf15593468da0cb3dbb8fe</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a8a8d7c924bae32611e01a419a3afb325</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inside</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ab7411e646b065df4cfc9006353d8f1b8</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>KDOP&lt; N &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a70e8b6656381b0bad83816d148271b19</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>KDOP&lt; N &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ac4ae30cc4769f62c0611d02bffbb2c35</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>KDOP&lt; N &gt;</type>
      <name>operator+</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a02ce0c4ae4e8c0685d6340a9c5cbeb7b</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>aeb9c143666d2a199fbdfe402bca9bdb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a31ca713ab654174d52087460e32ec9b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>af057565cff8b3b0a43c852b97be7d248</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ac1ad2948954938a2b677833137e18edb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ae578f39f3c81be62ff8b76c58c69061c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>center</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>ad3fd5bcee6308c93ca5ad8888b91bb54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a668a32db145ad6c6b52745841279e648</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>dist</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a69f6de703d548565241033ead1eea616</anchor>
      <arglist>(std::size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>dist</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>aa8cfb479a35577318a3e29ce322704a5</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::kIOS</name>
    <filename>a00105.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a208dee32f6bab3f6d952d268a7f53981</anchor>
      <arglist>(const kIOS &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a28092fc2cfd9626a3593339d5b9610fa</anchor>
      <arglist>(const kIOS &amp;other, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>aa7b73e90b124023f5bbd3912e829074e</anchor>
      <arglist>(const kIOS &amp;other, kIOS &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a35a67b8a34f440ce12c1be7f773fd598</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>kIOS &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a4091a201a7a4812e701f129de762d5bf</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>kIOS &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a8eb610ea99b6d39d499d3562ab89da98</anchor>
      <arglist>(const kIOS &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>kIOS</type>
      <name>operator+</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>abc6718e88183f4089f4071113f9de06f</anchor>
      <arglist>(const kIOS &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>center</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a53ddbfded2840a1661a4c2762f1e2205</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a1c0670fa3201862fab50a78e2135d19c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a8f0b34670bfb240697d0d4c69a974102</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>aec0a92cc657bfebaa3f26785f3654184</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a6f366dfdd2d1e252e3fb3143b0766326</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a0b1977c177caabdece25b0e5fbcde6b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a9c6b345cd179cf5b5cc5fcd3a1000c06</anchor>
      <arglist>(const kIOS &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const </arglist>
    </member>
    <member kind="variable">
      <type>kIOS_Sphere</type>
      <name>spheres</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>acf4ac8adf5b8b2bcf7f58a5f62ea24c6</anchor>
      <arglist>[5]</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>num_spheres</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a3a10a8c57f364d1a77498917db21695a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBB</type>
      <name>obb</name>
      <anchorfile>a00105.html</anchorfile>
      <anchor>a484b6d7c1d10e81ef399cf0a3b28ffa5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Link</name>
    <filename>a00106.html</filename>
    <member kind="function">
      <type></type>
      <name>Link</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a61e2125e0b076a2e71de8c1df1819cda</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a6fcef97cf23f17b77265cda7a490c7ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a7cfa48c1ae24b05c5755b967f3dc2a12</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChildJoint</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a1423308a9b4e5138670f2d05b5cc13e9</anchor>
      <arglist>(const boost::shared_ptr&lt; Joint &gt; &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParentJoint</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>ac3dcc2460e78ce7891aa161642bd92f3</anchor>
      <arglist>(const boost::shared_ptr&lt; Joint &gt; &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addObject</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a72b8885f8dd9e9ea54a6d4963e544c1a</anchor>
      <arglist>(const boost::shared_ptr&lt; CollisionObject &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumChildJoints</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>ab2df8b8f881752ed79d2fa2f1267805c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumObjects</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>af1f7b068fdb807f82ae4284eb645f90f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a9ccba474b9f511257505cef0ca98c739</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; boost::shared_ptr&lt; CollisionObject &gt; &gt;</type>
      <name>objects_</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>af67a3c642fbc16757553827d2beafa52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; boost::shared_ptr&lt; Joint &gt; &gt;</type>
      <name>children_joints_</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a09b233595a59904a859d5763774b5781</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; Joint &gt;</type>
      <name>parent_joint_</name>
      <anchorfile>a00106.html</anchorfile>
      <anchor>a7c5621d11450984abb3d1a16093594b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::Matrix3Data</name>
    <filename>a00107.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>meta_type</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a0405e608c00cc4ed9cdda0355d4a4d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec3Data&lt; T &gt;</type>
      <name>vector_type</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a4d44d6a96d1de6ed53b5860fb08f974e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3Data</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>add36e59259e1c9a8c98480e1c1b9a5e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3Data</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>aa3c6b2007b555de6e40306c6979bf197</anchor>
      <arglist>(T xx, T xy, T xz, T yx, T yy, T yz, T zx, T zy, T zz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3Data</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a0e660837986d3489403505883868c140</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;v1, const Vec3Data&lt; T &gt; &amp;v2, const Vec3Data&lt; T &gt; &amp;v3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3Data</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a7e37a3c8d0b987d2113d8c51e08bef4c</anchor>
      <arglist>(const Matrix3Data&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt;</type>
      <name>getColumn</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ac61e46ce1549e1202973b675d4d4ed0e</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3Data&lt; T &gt; &amp;</type>
      <name>getRow</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a813cbc851e0c02d7559539f5c3a6a349</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a833b93fbe6d801016f03d0d02271c8b7</anchor>
      <arglist>(size_t i, size_t j) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ae8660e506b3949e4251618bb2a95f941</anchor>
      <arglist>(size_t i, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a6988b30a282d2c16bcfc13143644ff1e</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a7d0461105ad78b42ae27d10b030fca65</anchor>
      <arglist>(const Matrix3Data&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a80f930f04730c179611cf096899524de</anchor>
      <arglist>(const Matrix3Data&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a941ba9e10cd98a31978fce7470957c95</anchor>
      <arglist>(const Matrix3Data&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a043ed0933af9833a4831d65df5ab543d</anchor>
      <arglist>(T c) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ad2bfeb13bb74b62760f0c57a8ecf6d55</anchor>
      <arglist>(T c) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a39c8b20efc7dea1f633b4847923e7d60</anchor>
      <arglist>(T c) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a86cc408565595887e4f569296eb31f94</anchor>
      <arglist>(T c) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>aeae657efb77ae9707b1f26ddf542ddb4</anchor>
      <arglist>(const Matrix3Data&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ad7dbc9d53b6f5f4f07d70822d062b3d7</anchor>
      <arglist>(const Matrix3Data&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a6e47bf0f468cfaf690b7824da6f16b09</anchor>
      <arglist>(const Matrix3Data&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a0945c098c102632594a1f3cd58953239</anchor>
      <arglist>(T c)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt; &amp;</type>
      <name>operator-</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a806d6fcbd350bc67daca3e82a711035e</anchor>
      <arglist>(T c)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a65f19e4a569ac87f87ed86b640a3b22c</anchor>
      <arglist>(T c)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt; &amp;</type>
      <name>operator/</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a3f261d0be6cd2303f86d59b1724ed6a9</anchor>
      <arglist>(T c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a20daf55c767b60451894d553b67204d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a748d70410040ddf21e338677b6283e2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>determinant</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>acca51970c0e8319dc22c17028fedc8d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt; &amp;</type>
      <name>transpose</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a9da19c3b261778c51117b6cb41264492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt; &amp;</type>
      <name>inverse</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a08838472d74abbf644d29f6fc77c6d76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt;</type>
      <name>transposeTimes</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a7ebbb091caf9ab83048effa409b4416c</anchor>
      <arglist>(const Matrix3Data&lt; T &gt; &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt;</type>
      <name>timesTranspose</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ad44e298024b1cfac31de4430cfdd93be</anchor>
      <arglist>(const Matrix3Data&lt; T &gt; &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt;</type>
      <name>transposeTimes</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ad0ccd3fbeb560fc2841e012f9646b223</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transposeDotX</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a22b83d38a590fac6f87ae8715d53abe4</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transposeDotY</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a8300a7734e4c3b1e55e0071a13bd87e5</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transposeDotZ</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>aac323fe873b5bfcacdfbace3e069a1b4</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>transposeDot</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>ad79f962f405e18ed437103b3086c1632</anchor>
      <arglist>(size_t i, const Vec3Data&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dotX</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>affe9cff97b3737ea455436a0449fcb7d</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dotY</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a64efa66eee2fd6a04ee345c829f84812</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dotZ</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a5324427d30087296aba42233ae393697</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a806efe909b6e39a2a029b62422679dfe</anchor>
      <arglist>(size_t i, const Vec3Data&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a9ef5b38c3b0e8cb85626ad341bd7afad</anchor>
      <arglist>(T xx, T xy, T xz, T yx, T yy, T yz, T zx, T zy, T zz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a34f1268aa214068e469934273cc146b2</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Matrix3Data&lt; T &gt; &amp;</type>
      <name>getIdentity</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>acc9e821e6393c9f385fbabec505058d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Vec3Data&lt; T &gt;</type>
      <name>rs</name>
      <anchorfile>a00107.html</anchorfile>
      <anchor>a2f2e632868f8c511aef4397453e02a85</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Matrix3fX</name>
    <filename>a00108.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T::meta_type</type>
      <name>U</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a0acdda73228ea44c06aaaf0f4d3357ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::vector_type</type>
      <name>S</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a366a63f34bba51f8e7177bc58b9fe1c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3fX</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a5e1dce5884ec28d9e8e34a127db41ce5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3fX</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a4e0778692fe3059b13919f39b12b2868</anchor>
      <arglist>(U xx, U xy, U xz, U yx, U yy, U yz, U zx, U zy, U zz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3fX</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ab88fd9ec5ab32badebba811621d55ab4</anchor>
      <arglist>(const Vec3fX&lt; S &gt; &amp;v1, const Vec3fX&lt; S &gt; &amp;v2, const Vec3fX&lt; S &gt; &amp;v3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3fX</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>aca5db1349ec0049c99a20ac44f5444ee</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3fX</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a511be43efc48dc9a596cfb9b8ccdabae</anchor>
      <arglist>(const T &amp;data_)</arglist>
    </member>
    <member kind="function">
      <type>Vec3fX&lt; S &gt;</type>
      <name>getColumn</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a2d0cbc989f9da0cdab159a60c07fa07e</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3fX&lt; S &gt;</type>
      <name>getRow</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a42f184b7a56bbdebeee57ab962666df5</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>operator()</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a26fba202e7aa298da86a75e3992eab4a</anchor>
      <arglist>(size_t i, size_t j) const </arglist>
    </member>
    <member kind="function">
      <type>U &amp;</type>
      <name>operator()</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a1a1891652b1f0694e481a5f4a6808ecb</anchor>
      <arglist>(size_t i, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>Vec3fX&lt; S &gt;</type>
      <name>operator*</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a78f51008d225dafb7221d0e292d2f1b2</anchor>
      <arglist>(const Vec3fX&lt; S &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a42142bb6bb168e9f1c5019899cec5bac</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a94e46412e769fb7021fe5889a82084c4</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a60d00e7e80dd1e872bae9d21f0ebfbc8</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ab8630ba55ffc22034ac1e4206be917b5</anchor>
      <arglist>(U c) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a164bb8267d763a70779557033919e25c</anchor>
      <arglist>(U c) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>aa06650d5098ef3113ee3480801036b31</anchor>
      <arglist>(U c) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a8b28a8d9438add01edba6f19527c9325</anchor>
      <arglist>(U c) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>aaf6c9e4ae6534020afba3a90e1a8569f</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>acd3949122cf56ec2753327fb3507ab6e</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ab9b2c8cd7d70d3ff5a54fdb16e00a6f0</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a9c54745a72733e43f5c53a4bcc86ce5f</anchor>
      <arglist>(U c)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a7557c88215ef806a332e54222f57d7d2</anchor>
      <arglist>(U c)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ad0f8a26ac42538acb42e4bd28f2b6c84</anchor>
      <arglist>(U c)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a5f884d5db188242d8d94ad58012ae3c0</anchor>
      <arglist>(U c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a1e749a19a73c612c823667c4649d2320</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a95a0a459b8ae4b2a38ccb180a4f86ca0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a1c83060c52ed8a4c1952a3fc872a070d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEulerZYX</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a867604bea9fc96528c72702b7daedcba</anchor>
      <arglist>(FCL_REAL eulerX, FCL_REAL eulerY, FCL_REAL eulerZ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEulerYPR</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a0e1589b8ec3e3148d122c2e4c3b2da68</anchor>
      <arglist>(FCL_REAL yaw, FCL_REAL pitch, FCL_REAL roll)</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>determinant</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a07c3729e23b80746ec2393a206aa9428</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt; &amp;</type>
      <name>transpose</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ac7e96c6c2d1000806eb8e5ee8c0a3f5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt; &amp;</type>
      <name>inverse</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a4368107b60804aa4b6804e1af0e54d9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt; &amp;</type>
      <name>abs</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a32191af78adff34db90548cf7cc1beb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt;</type>
      <name>transposeTimes</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a59874021371439fa1bcdf6b93a23fbc1</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt;</type>
      <name>timesTranspose</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a3f30f0e0eba778c23c93651cc1bf2543</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3fX&lt; S &gt;</type>
      <name>transposeTimes</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a1df96997c9a6d14da3be3bb057cfa743</anchor>
      <arglist>(const Vec3fX&lt; S &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt;</type>
      <name>tensorTransform</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a93baeab945f238f461f006b1626dc97d</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>transposeDotX</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ab3a6a572b5d28f86265a1f3c262255f3</anchor>
      <arglist>(const Vec3fX&lt; S &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>transposeDotY</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a413ad58e95e096434238b925bec7a39d</anchor>
      <arglist>(const Vec3fX&lt; S &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>transposeDotZ</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a451c575e6ea48a3a4fa54e4f975d9c71</anchor>
      <arglist>(const Vec3fX&lt; S &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>transposeDot</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ad89ce55a4c454ae10739ec1b5cfb114a</anchor>
      <arglist>(size_t i, const Vec3fX&lt; S &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>dotX</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a24b57df2050e02940154ff153eaa66d4</anchor>
      <arglist>(const Vec3fX&lt; S &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>dotY</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ae0d339e3a56159eead10fb7a186aba2b</anchor>
      <arglist>(const Vec3fX&lt; S &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>dotZ</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a78ac1fc08c82274aeb3d13b0c88eed67</anchor>
      <arglist>(const Vec3fX&lt; S &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>dot</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a30b07c3e595483c4d9665f55994a3747</anchor>
      <arglist>(size_t i, const Vec3fX&lt; S &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a222bd5f99063bf96adf736123770168b</anchor>
      <arglist>(U xx, U xy, U xz, U yx, U yy, U yz, U zx, U zy, U zz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>a9683c7def9db8736ca022ae6c9a8205d</anchor>
      <arglist>(U x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Matrix3fX&lt; T &gt; &amp;</type>
      <name>getIdentity</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>aa845f4475d2e235735a335dbeea2d500</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>data</name>
      <anchorfile>a00108.html</anchorfile>
      <anchor>ac33c4ec734f9f187ee7825a52d447689</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshCollisionTraversalNode</name>
    <filename>a00109.html</filename>
    <templarg>BV</templarg>
    <base>fcl::BVHCollisionTraversalNode</base>
    <member kind="function">
      <type></type>
      <name>MeshCollisionTraversalNode</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>aa4446f34493b9d8d9d1fcc386c60bf9c</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>af1c20e1bf678404c58f862e882c87117</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a3987c89e0b4fc77f210d5fbd5632d997</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices1</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>aae8df95191e8e6e9031f06e5ae429a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices2</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ae2ba4a22a1610a56fd36b3c5cbc4bc22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices1</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ac43fc116c610b408c03d6cf3cda2e8f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices2</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ac1cb02bb194733da56c69da0e30a961c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a4accdc7931349a312ec77c8d31a4fdf9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshCollisionTraversalNode&lt; kIOS &gt;</name>
    <filename>a00109.html</filename>
    <base>BVHCollisionTraversalNode&lt; kIOS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshCollisionTraversalNode</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>aa4446f34493b9d8d9d1fcc386c60bf9c</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>af1c20e1bf678404c58f862e882c87117</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a3987c89e0b4fc77f210d5fbd5632d997</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices1</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>aae8df95191e8e6e9031f06e5ae429a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices2</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ae2ba4a22a1610a56fd36b3c5cbc4bc22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices1</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ac43fc116c610b408c03d6cf3cda2e8f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices2</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ac1cb02bb194733da56c69da0e30a961c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a4accdc7931349a312ec77c8d31a4fdf9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshCollisionTraversalNode&lt; OBB &gt;</name>
    <filename>a00109.html</filename>
    <base>BVHCollisionTraversalNode&lt; OBB &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshCollisionTraversalNode</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>aa4446f34493b9d8d9d1fcc386c60bf9c</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>af1c20e1bf678404c58f862e882c87117</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a3987c89e0b4fc77f210d5fbd5632d997</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices1</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>aae8df95191e8e6e9031f06e5ae429a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices2</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ae2ba4a22a1610a56fd36b3c5cbc4bc22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices1</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ac43fc116c610b408c03d6cf3cda2e8f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices2</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ac1cb02bb194733da56c69da0e30a961c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a4accdc7931349a312ec77c8d31a4fdf9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshCollisionTraversalNode&lt; OBBRSS &gt;</name>
    <filename>a00109.html</filename>
    <base>BVHCollisionTraversalNode&lt; OBBRSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshCollisionTraversalNode</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>aa4446f34493b9d8d9d1fcc386c60bf9c</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>af1c20e1bf678404c58f862e882c87117</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a3987c89e0b4fc77f210d5fbd5632d997</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices1</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>aae8df95191e8e6e9031f06e5ae429a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices2</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ae2ba4a22a1610a56fd36b3c5cbc4bc22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices1</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ac43fc116c610b408c03d6cf3cda2e8f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices2</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ac1cb02bb194733da56c69da0e30a961c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a4accdc7931349a312ec77c8d31a4fdf9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshCollisionTraversalNode&lt; RSS &gt;</name>
    <filename>a00109.html</filename>
    <base>BVHCollisionTraversalNode&lt; RSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshCollisionTraversalNode</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>aa4446f34493b9d8d9d1fcc386c60bf9c</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>af1c20e1bf678404c58f862e882c87117</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a3987c89e0b4fc77f210d5fbd5632d997</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices1</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>aae8df95191e8e6e9031f06e5ae429a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices2</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ae2ba4a22a1610a56fd36b3c5cbc4bc22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices1</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ac43fc116c610b408c03d6cf3cda2e8f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices2</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>ac1cb02bb194733da56c69da0e30a961c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00109.html</anchorfile>
      <anchor>a4accdc7931349a312ec77c8d31a4fdf9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshCollisionTraversalNodekIOS</name>
    <filename>a00110.html</filename>
    <base>MeshCollisionTraversalNode&lt; kIOS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshCollisionTraversalNodekIOS</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>aeb4dc1fb537f641790270cca9750a7d0</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a1f84f6623921067f16c8a16c2a75cc7f</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a98753c8add91b6c6aff01df9a584ea86</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>R</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>af2e8c6b8dcacb054afabca82aa23f9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>T</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a3af25e2838807e26447f0044586e7f06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshCollisionTraversalNodeOBB</name>
    <filename>a00111.html</filename>
    <base>MeshCollisionTraversalNode&lt; OBB &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshCollisionTraversalNodeOBB</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>ae2e27bdec65449e0bd99b2601a43fc0a</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>acf67ce7baaa1e51d73a79f61b4deafe3</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a7bcd967b2b96a44c3247e9d58363f122</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>af57d4b3e31ae1c42e84f1a5862db8f61</anchor>
      <arglist>(int b1, int b2, const Matrix3f &amp;Rc, const Vec3f &amp;Tc) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a6b1a69bde5a4840ab1fdf5bdbc139504</anchor>
      <arglist>(int b1, int b2, const Matrix3f &amp;Rc, const Vec3f &amp;Tc, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>R</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a0301357cc73fcf7b6e014215025cdaa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>T</name>
      <anchorfile>a00111.html</anchorfile>
      <anchor>a11f5b81f52772e78284a2a7e3a80a86e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshCollisionTraversalNodeOBBRSS</name>
    <filename>a00112.html</filename>
    <base>MeshCollisionTraversalNode&lt; OBBRSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshCollisionTraversalNodeOBBRSS</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac85244c2aa76a96132d6d31ba075a4f0</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a9b372f5066da4852bf3a2793697c414e</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ae6ba046a1d9558293bbc56207d432a0a</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>ac153bf8116b124a41f3b8160163a4d53</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>R</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>aae9f266a78bd71182a7a1c80a820cc1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>T</name>
      <anchorfile>a00112.html</anchorfile>
      <anchor>a8460e1d4a09cc375e38d185887cd1f66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshCollisionTraversalNodeRSS</name>
    <filename>a00113.html</filename>
    <base>MeshCollisionTraversalNode&lt; RSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshCollisionTraversalNodeRSS</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ac705803b225535d7b9e4c6f179629d8a</anchor>
      <arglist>(bool enable_distance_lower_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a4f898a76977c8545f6a4b0f877bf2733</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ae2a5831d4d81a3f485c5d09a7a5160d1</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ad3812a4dae70c99e815b86fc88bedb69</anchor>
      <arglist>(int b1, int b2, const Matrix3f &amp;Rc, const Vec3f &amp;Tc) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ae3bef6425ad9fa3af412f92a7de6b7c2</anchor>
      <arglist>(int b1, int b2, const Matrix3f &amp;Rc, const Vec3f &amp;Tc, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>R</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>ab84f982d7198a6a1ff74682da218e780</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>T</name>
      <anchorfile>a00113.html</anchorfile>
      <anchor>a1a0f5aa8ce0130207827b2dc43d2b677</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshConservativeAdvancementTraversalNode</name>
    <filename>a00114.html</filename>
    <templarg>BV</templarg>
    <base>fcl::MeshDistanceTraversalNode</base>
    <member kind="function">
      <type></type>
      <name>MeshConservativeAdvancementTraversalNode</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a5d2ec676ed601de475941e8c336dce3f</anchor>
      <arglist>(FCL_REAL w_=1)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>aae0a80c876730def7632fb22878e64c5</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a87d8ae3e37e04fd940481ec47e63d700</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a170411556950416ccee59d2d8740a38a</anchor>
      <arglist>(FCL_REAL c) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a3c648d5968eb1ebd2c73b5b2ebe95ee6</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>aee28f3f83c6c37096c242decdd245408</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>aa7110a7f83a8d458635f7375aabd0389</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>min_distance</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>aa477f640fc983e64caec5c0efdcb3520</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>closest_p1</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a11b701a5b0fab68010a5c6a2e46a441f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>closest_p2</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a33adc70441ae13eb77066f70465b46ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_tri_id1</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a9bcf618651790468851c3d1eb4ebbcc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_tri_id2</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a2c76bf2de6f090db37af168dc5b0a11e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>w</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>acaf49eb3efa4a6ec6b63e10b29fe0ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>toc</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>ab7471c4d814a7a9d82aac8f15ff59b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>t_err</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>ab8cd381427d9cbbaafa6987a4ac51ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>delta_t</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a51b426f33e5181f1c2d818aaa30e1941</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion1</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>afebe59945c9eb5736576187cd0f8e5ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion2</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a9410df7d437fe9bcefc0eaf3674d61d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ConservativeAdvancementStackData &gt;</type>
      <name>stack</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>acbbc3b4441e1443ac2c21d4a4ef8a2c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshConservativeAdvancementTraversalNode&lt; OBBRSS &gt;</name>
    <filename>a00114.html</filename>
    <base>MeshDistanceTraversalNode&lt; OBBRSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshConservativeAdvancementTraversalNode</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a5d2ec676ed601de475941e8c336dce3f</anchor>
      <arglist>(FCL_REAL w_=1)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>aae0a80c876730def7632fb22878e64c5</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a87d8ae3e37e04fd940481ec47e63d700</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a170411556950416ccee59d2d8740a38a</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>min_distance</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>aa477f640fc983e64caec5c0efdcb3520</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>closest_p1</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a11b701a5b0fab68010a5c6a2e46a441f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>closest_p2</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a33adc70441ae13eb77066f70465b46ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_tri_id1</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a9bcf618651790468851c3d1eb4ebbcc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_tri_id2</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a2c76bf2de6f090db37af168dc5b0a11e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>w</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>acaf49eb3efa4a6ec6b63e10b29fe0ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>toc</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>ab7471c4d814a7a9d82aac8f15ff59b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>t_err</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>ab8cd381427d9cbbaafa6987a4ac51ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>delta_t</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a51b426f33e5181f1c2d818aaa30e1941</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion1</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>afebe59945c9eb5736576187cd0f8e5ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion2</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a9410df7d437fe9bcefc0eaf3674d61d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ConservativeAdvancementStackData &gt;</type>
      <name>stack</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>acbbc3b4441e1443ac2c21d4a4ef8a2c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshConservativeAdvancementTraversalNode&lt; RSS &gt;</name>
    <filename>a00114.html</filename>
    <base>MeshDistanceTraversalNode&lt; RSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshConservativeAdvancementTraversalNode</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a5d2ec676ed601de475941e8c336dce3f</anchor>
      <arglist>(FCL_REAL w_=1)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>aae0a80c876730def7632fb22878e64c5</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a87d8ae3e37e04fd940481ec47e63d700</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a170411556950416ccee59d2d8740a38a</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>min_distance</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>aa477f640fc983e64caec5c0efdcb3520</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>closest_p1</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a11b701a5b0fab68010a5c6a2e46a441f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>closest_p2</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a33adc70441ae13eb77066f70465b46ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_tri_id1</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a9bcf618651790468851c3d1eb4ebbcc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_tri_id2</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a2c76bf2de6f090db37af168dc5b0a11e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>w</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>acaf49eb3efa4a6ec6b63e10b29fe0ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>toc</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>ab7471c4d814a7a9d82aac8f15ff59b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>t_err</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>ab8cd381427d9cbbaafa6987a4ac51ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>delta_t</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a51b426f33e5181f1c2d818aaa30e1941</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion1</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>afebe59945c9eb5736576187cd0f8e5ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion2</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>a9410df7d437fe9bcefc0eaf3674d61d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ConservativeAdvancementStackData &gt;</type>
      <name>stack</name>
      <anchorfile>a00114.html</anchorfile>
      <anchor>acbbc3b4441e1443ac2c21d4a4ef8a2c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshConservativeAdvancementTraversalNodeOBBRSS</name>
    <filename>a00115.html</filename>
    <base>MeshConservativeAdvancementTraversalNode&lt; OBBRSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshConservativeAdvancementTraversalNodeOBBRSS</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a09879c733b8979f54205cbb1104e5cd9</anchor>
      <arglist>(FCL_REAL w_=1)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a448076dfbf4abd32296ec78444440197</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a5f509075fd1977b0c0e0b07d63d41500</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a5b35e7f6c16941df19a6a5684fd078ff</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a5584d88fefe185f1b4dc60407be7620b</anchor>
      <arglist>(FCL_REAL c) const </arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>R</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>ac5157c0cc9d5bfd0f4f2da8d13523857</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>T</name>
      <anchorfile>a00115.html</anchorfile>
      <anchor>a00c2938fe77632c300ab018f3406833f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshConservativeAdvancementTraversalNodeRSS</name>
    <filename>a00116.html</filename>
    <base>MeshConservativeAdvancementTraversalNode&lt; RSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshConservativeAdvancementTraversalNodeRSS</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>ae30a4fe2b4fefdb67db9783e87f1612e</anchor>
      <arglist>(FCL_REAL w_=1)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a0fbc03a1c112c1636688cb50f1a9682d</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a4936bea93ab0c2a302e11f6fb9974a96</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>ad8c05472c757d7c8bbd417a1bf6d78e3</anchor>
      <arglist>(FCL_REAL c) const </arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>R</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a5aff01cd15dc8a9d0112c8500e1e1ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>T</name>
      <anchorfile>a00116.html</anchorfile>
      <anchor>a17a39e6ac824b885b310faebe53af684</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshContinuousCollisionTraversalNode</name>
    <filename>a00117.html</filename>
    <templarg>BV</templarg>
    <base>fcl::BVHCollisionTraversalNode</base>
    <member kind="function">
      <type></type>
      <name>MeshContinuousCollisionTraversalNode</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>acd8c85ffefe07e3e95b9fc9c5ec34f6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a7664352dac5151075a7a6c9c64f0c547</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a4c16acbf477bb399680dde37a7a544d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices1</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>aeaf75361dda0be1f0ee5295ab58aa1e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices2</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ab568834ac9f63b9bfa44ed2c007372d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices1</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ae6f32f19165caaaf9ac86c177cda9b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices2</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>abb9dff7fcaa49396d98f5babe0d0137b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>prev_vertices1</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ab9c976d3f60da65e522a1cb9ec99fc3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>prev_vertices2</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ac51acff087d95a73b75635a7264aef7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_vf_tests</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a8a6dde821e08fab29629139b34c08356</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_ee_tests</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>a0b1750136d44cc659cafccbcbbb16fe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; BVHContinuousCollisionPair &gt;</type>
      <name>pairs</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>afdd16ba0c8059b089b083fcb471f9d0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>time_of_contact</name>
      <anchorfile>a00117.html</anchorfile>
      <anchor>ab8c8588e5428037081079f5e548f687b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshDistanceTraversalNode</name>
    <filename>a00118.html</filename>
    <templarg>BV</templarg>
    <base>fcl::BVHDistanceTraversalNode</base>
    <member kind="function">
      <type></type>
      <name>MeshDistanceTraversalNode</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>abe22c5fbb3ac4bea23236a7a1dcf7e20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a87ad32ae1a4176082bbb51c1d545de26</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a9b7fb94c190ec21763731f7918180833</anchor>
      <arglist>(FCL_REAL c) const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices1</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a252833473809a31d209b99956a2dcf9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices2</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>aeea171223dc62ed48d0da7fd1a0d5c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices1</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a5b16abb10ada5475a8a9a974e3c35fed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices2</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ad4d8c97c6f9ac86463da95ade5ff05ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a8c0a33a85bdd5f4fbd56ad7da3e4792c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a405a7d0d4ae2d617862ee5a16e255a7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshDistanceTraversalNode&lt; kIOS &gt;</name>
    <filename>a00118.html</filename>
    <base>BVHDistanceTraversalNode&lt; kIOS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshDistanceTraversalNode</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>abe22c5fbb3ac4bea23236a7a1dcf7e20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a87ad32ae1a4176082bbb51c1d545de26</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a9b7fb94c190ec21763731f7918180833</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices1</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a252833473809a31d209b99956a2dcf9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices2</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>aeea171223dc62ed48d0da7fd1a0d5c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices1</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a5b16abb10ada5475a8a9a974e3c35fed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices2</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ad4d8c97c6f9ac86463da95ade5ff05ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a8c0a33a85bdd5f4fbd56ad7da3e4792c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a405a7d0d4ae2d617862ee5a16e255a7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshDistanceTraversalNode&lt; OBBRSS &gt;</name>
    <filename>a00118.html</filename>
    <base>BVHDistanceTraversalNode&lt; OBBRSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshDistanceTraversalNode</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>abe22c5fbb3ac4bea23236a7a1dcf7e20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a87ad32ae1a4176082bbb51c1d545de26</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a9b7fb94c190ec21763731f7918180833</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices1</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a252833473809a31d209b99956a2dcf9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices2</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>aeea171223dc62ed48d0da7fd1a0d5c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices1</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a5b16abb10ada5475a8a9a974e3c35fed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices2</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ad4d8c97c6f9ac86463da95ade5ff05ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a8c0a33a85bdd5f4fbd56ad7da3e4792c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a405a7d0d4ae2d617862ee5a16e255a7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshDistanceTraversalNode&lt; RSS &gt;</name>
    <filename>a00118.html</filename>
    <base>BVHDistanceTraversalNode&lt; RSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshDistanceTraversalNode</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>abe22c5fbb3ac4bea23236a7a1dcf7e20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a87ad32ae1a4176082bbb51c1d545de26</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a9b7fb94c190ec21763731f7918180833</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices1</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a252833473809a31d209b99956a2dcf9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices2</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>aeea171223dc62ed48d0da7fd1a0d5c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices1</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a5b16abb10ada5475a8a9a974e3c35fed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices2</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>ad4d8c97c6f9ac86463da95ade5ff05ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a8c0a33a85bdd5f4fbd56ad7da3e4792c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00118.html</anchorfile>
      <anchor>a405a7d0d4ae2d617862ee5a16e255a7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshDistanceTraversalNodekIOS</name>
    <filename>a00119.html</filename>
    <base>MeshDistanceTraversalNode&lt; kIOS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshDistanceTraversalNodekIOS</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aa07cc1f0afab37bc559ef530e7cbebe3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>ac05daf3f6bbe096d12fd0c583adfea59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>aaa38de2142e288aa4fd944df5d67975f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a3d88e0e422e02519ac4841f07bce68b6</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a79dadbaf02c0f75aac07106da24b10d6</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>R</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a3667736fd40d8754b246b85944e4028e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>T</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a873c3e2580c1db7cf1544889020c6a6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshDistanceTraversalNodeOBBRSS</name>
    <filename>a00120.html</filename>
    <base>MeshDistanceTraversalNode&lt; OBBRSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshDistanceTraversalNodeOBBRSS</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a603ea58878835e7113ea69f29c24242d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a98dc91fed84f2aa668e597322ad16871</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a1dbda22226a4366cadf67efb58a29eb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a2d4ff3a59a02f1bda4f3b78d9a596272</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a0307ac86dd6325a792f62039b7337ff9</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a2bd8827c90cd68b315d4b5545fc13fe5</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>R</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a632b9feebf42c456beef99e814a769a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>T</name>
      <anchorfile>a00120.html</anchorfile>
      <anchor>a84856838fe60a4b6e2c3a1abb8550c2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshDistanceTraversalNodeRSS</name>
    <filename>a00121.html</filename>
    <base>MeshDistanceTraversalNode&lt; RSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshDistanceTraversalNodeRSS</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>af05e531c035c16b2139cc7e0f62b86c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a2eda4a57bc2dd9a739abb9801a2df1f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a4330aa519fbb98c3085a29ba934bec3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>aae303aaa05a2f6c7593144f090f25b0b</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a54c5562c0b2e9479d2a9bc9bd1d0c065</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>R</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a36a5f046223423395367c42540b27d62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>T</name>
      <anchorfile>a00121.html</anchorfile>
      <anchor>a0fb9631011bce4127f4b96bfe62ebde5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshOcTreeCollisionTraversalNode</name>
    <filename>a00122.html</filename>
    <templarg>BV</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>MeshOcTreeCollisionTraversalNode</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a0fdffeb4b7ae894c6c98c62ed31c671b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a3d15760279a2f50c14cffe19ccf005c3</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a552b2f4f63a2dc4b4fec478c0c196072</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>aac3342b43617046ddeedc19a53350099</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model1</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>adaedaa4d23f100e68c0549f81a597151</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model2</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>adf3359bb1540ee37a930d83d7948122a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf1</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>ac9c806a5f7fee8ed42b6e9e3fd9a2f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf2</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>a640093b00e5ac947d355f04a8abe5e66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00122.html</anchorfile>
      <anchor>aaa34288528b4c8c4c831821727a12bfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshOcTreeDistanceTraversalNode</name>
    <filename>a00123.html</filename>
    <templarg>BV</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>MeshOcTreeDistanceTraversalNode</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>acaf14ad5f3327a25339ff0da647b9804</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a78a770aaf11974a31a8a31e4c068a644</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a57f053da147307407f738f20ac00516c</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model1</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>af9b855dee22ddfb185e69376e8188cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model2</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a591d410756056c7b643c54481fd0b27a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00123.html</anchorfile>
      <anchor>a3700df446bfccd24bdb12db3d582b53a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshShapeCollisionTraversalNode</name>
    <filename>a00124.html</filename>
    <templarg>BV</templarg>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::BVHShapeCollisionTraversalNode</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeCollisionTraversalNode</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>aaee36626da4b7363b71d4d969751e563</anchor>
      <arglist>(bool enable_distance_lower_bound=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a686ed2e7d2550f8e4fd3558056b5c6a7</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a6d36091d93abb364259f385422ef7138</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a7fda581701d9a9de14aa8268a4a21d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a5608b80b49ead4cca6d4aff2775afd1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ad3bd56533ba98040b9be96dd12f9181d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ad0670c04f2fde0f4a2aa1c2b0ca7f97a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeCollisionTraversalNode&lt; kIOS, S, NarrowPhaseSolver &gt;</name>
    <filename>a00124.html</filename>
    <base>BVHShapeCollisionTraversalNode&lt; kIOS, S &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeCollisionTraversalNode</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>aaee36626da4b7363b71d4d969751e563</anchor>
      <arglist>(bool enable_distance_lower_bound=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a686ed2e7d2550f8e4fd3558056b5c6a7</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a6d36091d93abb364259f385422ef7138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a7fda581701d9a9de14aa8268a4a21d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a5608b80b49ead4cca6d4aff2775afd1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ad3bd56533ba98040b9be96dd12f9181d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ad0670c04f2fde0f4a2aa1c2b0ca7f97a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeCollisionTraversalNode&lt; OBB, S, NarrowPhaseSolver &gt;</name>
    <filename>a00124.html</filename>
    <base>BVHShapeCollisionTraversalNode&lt; OBB, S &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeCollisionTraversalNode</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>aaee36626da4b7363b71d4d969751e563</anchor>
      <arglist>(bool enable_distance_lower_bound=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a686ed2e7d2550f8e4fd3558056b5c6a7</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a6d36091d93abb364259f385422ef7138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a7fda581701d9a9de14aa8268a4a21d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a5608b80b49ead4cca6d4aff2775afd1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ad3bd56533ba98040b9be96dd12f9181d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ad0670c04f2fde0f4a2aa1c2b0ca7f97a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeCollisionTraversalNode&lt; OBBRSS, S, NarrowPhaseSolver &gt;</name>
    <filename>a00124.html</filename>
    <base>BVHShapeCollisionTraversalNode&lt; OBBRSS, S &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeCollisionTraversalNode</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>aaee36626da4b7363b71d4d969751e563</anchor>
      <arglist>(bool enable_distance_lower_bound=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a686ed2e7d2550f8e4fd3558056b5c6a7</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a6d36091d93abb364259f385422ef7138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a7fda581701d9a9de14aa8268a4a21d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a5608b80b49ead4cca6d4aff2775afd1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ad3bd56533ba98040b9be96dd12f9181d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ad0670c04f2fde0f4a2aa1c2b0ca7f97a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeCollisionTraversalNode&lt; RSS, S, NarrowPhaseSolver &gt;</name>
    <filename>a00124.html</filename>
    <base>BVHShapeCollisionTraversalNode&lt; RSS, S &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeCollisionTraversalNode</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>aaee36626da4b7363b71d4d969751e563</anchor>
      <arglist>(bool enable_distance_lower_bound=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a686ed2e7d2550f8e4fd3558056b5c6a7</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a6d36091d93abb364259f385422ef7138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a7fda581701d9a9de14aa8268a4a21d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>a5608b80b49ead4cca6d4aff2775afd1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ad3bd56533ba98040b9be96dd12f9181d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00124.html</anchorfile>
      <anchor>ad0670c04f2fde0f4a2aa1c2b0ca7f97a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshShapeCollisionTraversalNodekIOS</name>
    <filename>a00125.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>MeshShapeCollisionTraversalNode&lt; kIOS, S, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeCollisionTraversalNodekIOS</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a036bc0538f19bdb1b3ae9b337cc68b06</anchor>
      <arglist>(bool enable_distance_lower_bound=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a30e0d1523e597e9a9ba8bb8e1dad1e7a</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a7f088dfc5f4ae83980d46e135d599520</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshShapeCollisionTraversalNodeOBB</name>
    <filename>a00126.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>MeshShapeCollisionTraversalNode&lt; OBB, S, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeCollisionTraversalNodeOBB</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>a100bc1b5446ea4fcf371c84461e15f4e</anchor>
      <arglist>(bool enable_distance_lower_bound=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>ae0469878a843d384058c43ce8186c76a</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00126.html</anchorfile>
      <anchor>aaf329d95608db9086756a2fe15c9f8c9</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshShapeCollisionTraversalNodeOBBRSS</name>
    <filename>a00127.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>MeshShapeCollisionTraversalNode&lt; OBBRSS, S, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeCollisionTraversalNodeOBBRSS</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a41708e91da215236afc841411906de12</anchor>
      <arglist>(bool enable_distance_lower_bound=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a50c7cdd962015cec82d075f8ccddfd11</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>aad5a459f7865b5fd2c05763621260fea</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00127.html</anchorfile>
      <anchor>a56d7192421f6bc2e9467a80385ec1672</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshShapeCollisionTraversalNodeRSS</name>
    <filename>a00128.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>MeshShapeCollisionTraversalNode&lt; RSS, S, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeCollisionTraversalNodeRSS</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a041caefee42dc0b8f356b8b90fa0e64e</anchor>
      <arglist>(bool enable_distance_lower_bound=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>aa2234d3153b22c4f0a57549d72725ab3</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a4d481623e3463b5dd512b64b5f780df6</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshShapeConservativeAdvancementTraversalNode</name>
    <filename>a00129.html</filename>
    <templarg>BV</templarg>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::MeshShapeDistanceTraversalNode</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeConservativeAdvancementTraversalNode</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a8869b9dafa4f9f6f7f5c3eaf9998f486</anchor>
      <arglist>(FCL_REAL w_=1)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ac868edc5c910f0c7cfaebb8191e96616</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a4d6c4a5694e78bf2397878a91ea71ca2</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a18a883f04ba7f5204cd30f08a9601d08</anchor>
      <arglist>(FCL_REAL c) const </arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>min_distance</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a83d627317f6b5ca1b083ec91d8625f43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>closest_p1</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>acb55af5d7b46bdd045a6c645febf5690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>closest_p2</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a495688e5f766cc51b0f8ff2862a14464</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_tri_id</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a5e6dfa493a3f4e5666c66c266c26c4ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>w</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a19d9e1bad6a71090926141fee60eb8c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>toc</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a34770eb0d0e03409887b8be162216cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>t_err</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>abfcf17e39dea2eff7a1457a249388cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>delta_t</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a8b99b00a73fd171e90195ac4a60d2893</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion1</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a3dfbc46b482a2f2840da4e736901f60f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion2</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a970d6fe05303c47b761c2b19c65ebd10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ConservativeAdvancementStackData &gt;</type>
      <name>stack</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ab6f725cb0935265b09ec14d54da5c50d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeConservativeAdvancementTraversalNode&lt; OBBRSS, S, NarrowPhaseSolver &gt;</name>
    <filename>a00129.html</filename>
    <base>MeshShapeDistanceTraversalNode&lt; OBBRSS, S, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeConservativeAdvancementTraversalNode</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a8869b9dafa4f9f6f7f5c3eaf9998f486</anchor>
      <arglist>(FCL_REAL w_=1)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ac868edc5c910f0c7cfaebb8191e96616</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a4d6c4a5694e78bf2397878a91ea71ca2</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a18a883f04ba7f5204cd30f08a9601d08</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>min_distance</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a83d627317f6b5ca1b083ec91d8625f43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>closest_p1</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>acb55af5d7b46bdd045a6c645febf5690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>closest_p2</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a495688e5f766cc51b0f8ff2862a14464</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_tri_id</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a5e6dfa493a3f4e5666c66c266c26c4ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>w</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a19d9e1bad6a71090926141fee60eb8c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>toc</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a34770eb0d0e03409887b8be162216cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>t_err</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>abfcf17e39dea2eff7a1457a249388cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>delta_t</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a8b99b00a73fd171e90195ac4a60d2893</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion1</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a3dfbc46b482a2f2840da4e736901f60f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion2</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a970d6fe05303c47b761c2b19c65ebd10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ConservativeAdvancementStackData &gt;</type>
      <name>stack</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ab6f725cb0935265b09ec14d54da5c50d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeConservativeAdvancementTraversalNode&lt; RSS, S, NarrowPhaseSolver &gt;</name>
    <filename>a00129.html</filename>
    <base>MeshShapeDistanceTraversalNode&lt; RSS, S, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeConservativeAdvancementTraversalNode</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a8869b9dafa4f9f6f7f5c3eaf9998f486</anchor>
      <arglist>(FCL_REAL w_=1)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ac868edc5c910f0c7cfaebb8191e96616</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a4d6c4a5694e78bf2397878a91ea71ca2</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a18a883f04ba7f5204cd30f08a9601d08</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>min_distance</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a83d627317f6b5ca1b083ec91d8625f43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>closest_p1</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>acb55af5d7b46bdd045a6c645febf5690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>closest_p2</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a495688e5f766cc51b0f8ff2862a14464</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_tri_id</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a5e6dfa493a3f4e5666c66c266c26c4ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>w</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a19d9e1bad6a71090926141fee60eb8c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>toc</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a34770eb0d0e03409887b8be162216cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>t_err</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>abfcf17e39dea2eff7a1457a249388cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>delta_t</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a8b99b00a73fd171e90195ac4a60d2893</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion1</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a3dfbc46b482a2f2840da4e736901f60f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion2</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>a970d6fe05303c47b761c2b19c65ebd10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ConservativeAdvancementStackData &gt;</type>
      <name>stack</name>
      <anchorfile>a00129.html</anchorfile>
      <anchor>ab6f725cb0935265b09ec14d54da5c50d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshShapeConservativeAdvancementTraversalNodeOBBRSS</name>
    <filename>a00130.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>MeshShapeConservativeAdvancementTraversalNode&lt; OBBRSS, S, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeConservativeAdvancementTraversalNodeOBBRSS</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>ac92bbc29618977278bb2ec10e3d730fb</anchor>
      <arglist>(FCL_REAL w_=1)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a553ffba45825140b679422e84bea0865</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a77e3ae1c7e84178b25a01a73c5f74f5d</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00130.html</anchorfile>
      <anchor>a8c860866c4f8accca3a81f2a097fba2d</anchor>
      <arglist>(FCL_REAL c) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshShapeConservativeAdvancementTraversalNodeRSS</name>
    <filename>a00131.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>MeshShapeConservativeAdvancementTraversalNode&lt; RSS, S, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeConservativeAdvancementTraversalNodeRSS</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a3a69e7d89b2f613e95f7d2c9771e4bac</anchor>
      <arglist>(FCL_REAL w_=1)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a2038e57f47e83d71f46dd931a0c1c0e4</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>af07addf29bfa1c972339bee2dd53fa65</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>a5b1535eb5edfca5b180c721766968fa9</anchor>
      <arglist>(FCL_REAL c) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshShapeDistanceTraversalNode</name>
    <filename>a00132.html</filename>
    <templarg>BV</templarg>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::BVHShapeDistanceTraversalNode</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeDistanceTraversalNode</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>abca347cc5393bf1f36da4313a17c9478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a608e66b25c360390f82844c883fa4349</anchor>
      <arglist>(int b1, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a6f2638b15dc59acb150c68975c4cf526</anchor>
      <arglist>(FCL_REAL c) const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a6e6b88462c0e9c42e79073c69dc27bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>aa24816ba2215d77f5293dcd9d015bf16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>abd89e7e98d7f6b3baead6e3b64ab0444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>ae5c8681deb4ec2a969a66bb104ebe6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a4a672acec17bf6d4fac93518eb2c8c9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeDistanceTraversalNode&lt; kIOS, S, NarrowPhaseSolver &gt;</name>
    <filename>a00132.html</filename>
    <base>BVHShapeDistanceTraversalNode&lt; kIOS, S &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeDistanceTraversalNode</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>abca347cc5393bf1f36da4313a17c9478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a608e66b25c360390f82844c883fa4349</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a6f2638b15dc59acb150c68975c4cf526</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a6e6b88462c0e9c42e79073c69dc27bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>aa24816ba2215d77f5293dcd9d015bf16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>abd89e7e98d7f6b3baead6e3b64ab0444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>ae5c8681deb4ec2a969a66bb104ebe6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a4a672acec17bf6d4fac93518eb2c8c9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeDistanceTraversalNode&lt; OBBRSS, S, NarrowPhaseSolver &gt;</name>
    <filename>a00132.html</filename>
    <base>BVHShapeDistanceTraversalNode&lt; OBBRSS, S &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeDistanceTraversalNode</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>abca347cc5393bf1f36da4313a17c9478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a608e66b25c360390f82844c883fa4349</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a6f2638b15dc59acb150c68975c4cf526</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a6e6b88462c0e9c42e79073c69dc27bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>aa24816ba2215d77f5293dcd9d015bf16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>abd89e7e98d7f6b3baead6e3b64ab0444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>ae5c8681deb4ec2a969a66bb104ebe6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a4a672acec17bf6d4fac93518eb2c8c9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshShapeDistanceTraversalNode&lt; RSS, S, NarrowPhaseSolver &gt;</name>
    <filename>a00132.html</filename>
    <base>BVHShapeDistanceTraversalNode&lt; RSS, S &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeDistanceTraversalNode</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>abca347cc5393bf1f36da4313a17c9478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a608e66b25c360390f82844c883fa4349</anchor>
      <arglist>(int b1, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a6f2638b15dc59acb150c68975c4cf526</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a6e6b88462c0e9c42e79073c69dc27bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>aa24816ba2215d77f5293dcd9d015bf16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>abd89e7e98d7f6b3baead6e3b64ab0444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>ae5c8681deb4ec2a969a66bb104ebe6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00132.html</anchorfile>
      <anchor>a4a672acec17bf6d4fac93518eb2c8c9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshShapeDistanceTraversalNodekIOS</name>
    <filename>a00133.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>MeshShapeDistanceTraversalNode&lt; kIOS, S, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeDistanceTraversalNodekIOS</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a1a41790849a60f49740fb18dc7b0da0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>ae501c4fccdf2f2bf133612d22db49f7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>aa52d82cf1bbb6d52b28b92fc8093f6d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>a7f8873793a8d19e1f334b7b63eb55027</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00133.html</anchorfile>
      <anchor>add5dcfa19b4664f438e26328f3eaa657</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshShapeDistanceTraversalNodeOBBRSS</name>
    <filename>a00134.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>MeshShapeDistanceTraversalNode&lt; OBBRSS, S, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeDistanceTraversalNodeOBBRSS</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>aa9b2089bd20b07d31b71f54e1ecdf65d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>ac7d06362e95bede7ed6be79a5d19afdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>ad7619358734a384879af78f6a65de7e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>a3d60a702adc55a4ebf7f95dc8b7a16b2</anchor>
      <arglist>(int b1, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00134.html</anchorfile>
      <anchor>aeb98dcadf8f156c1b67588acc4f04919</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MeshShapeDistanceTraversalNodeRSS</name>
    <filename>a00135.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>MeshShapeDistanceTraversalNode&lt; RSS, S, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>MeshShapeDistanceTraversalNodeRSS</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>af615b6757c667b4f645db3d545c884e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ac0ffc842ab46b7780ee6e619d33772d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a1de8270785d469d28ead287d33800594</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>ade7466504395f966d2e66a5dfe8d321b</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00135.html</anchorfile>
      <anchor>a0655684b40b92ecefae2dd7c77be1c94</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::MinkowskiDiff</name>
    <filename>a00136.html</filename>
    <member kind="function">
      <type></type>
      <name>MinkowskiDiff</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a4145742fde4f92cef17e72bf664a7258</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>support0</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a3c359f0253acc4852304daf045b29e1b</anchor>
      <arglist>(const Vec3f &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>support1</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a66e68b53c13aa68776d6d68749b7abb0</anchor>
      <arglist>(const Vec3f &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>support</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>aa6b2e496588b02d21f00941cb7a44f2e</anchor>
      <arglist>(const Vec3f &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>support</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a801eb0f05deb206ad9e7b55029aff03a</anchor>
      <arglist>(const Vec3f &amp;d, size_t index) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>support0</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a6c77296a52570ed73aedab005ac69231</anchor>
      <arglist>(const Vec3f &amp;d, const Vec3f &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>support</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a84cbe9ff89811132621fb7be0780a0a7</anchor>
      <arglist>(const Vec3f &amp;d, const Vec3f &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>support</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a3de5bf0d885bb1e01124e97263f646ad</anchor>
      <arglist>(const Vec3f &amp;d, const Vec3f &amp;v, size_t index) const </arglist>
    </member>
    <member kind="variable">
      <type>const ShapeBase *</type>
      <name>shapes</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>afb441c6a1fb21776bafc9b1ff3dea624</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>toshape1</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a23584b5fa602d8deadc9888423172192</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>toshape0</name>
      <anchorfile>a00136.html</anchorfile>
      <anchor>a5fd809a21f424d90cba73c27366c07fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Model</name>
    <filename>a00137.html</filename>
    <member kind="function">
      <type></type>
      <name>Model</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a268d130bf1ada658fab5dfa737ee89ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Model</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>acccf5a74931a3b961206f32957cec7e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a9f584d592a0cf01559f7d17a211eccbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLink</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a88215d6bee8112506d8b7151b61a4321</anchor>
      <arglist>(const boost::shared_ptr&lt; Link &gt; &amp;link)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addJoint</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a24f609e718996300a4c800e123de99d7</anchor>
      <arglist>(const boost::shared_ptr&lt; Joint &gt; &amp;joint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initRoot</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>acbe5d3eb28ffb9177cdbb959f607d7e7</anchor>
      <arglist>(const std::map&lt; std::string, std::string &gt; &amp;link_parent_tree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initTree</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a879a3d9198b0857c1b9bbd8f87621a48</anchor>
      <arglist>(std::map&lt; std::string, std::string &gt; &amp;link_parent_tree)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDofs</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>af3a43968ec7bb3c8a8e0e50717f182ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumLinks</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a8ee7133cc01025b3c950e69847e21ccd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumJoints</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>af5f442fd109a71ef86881543a7cc70f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Link &gt;</type>
      <name>getRoot</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a9735c1a4c9a9c517c1644e89789f89e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Link &gt;</type>
      <name>getLink</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a36493c26ef51799813cb1dc185a6835e</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Joint &gt;</type>
      <name>getJoint</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a3dc8ad35bb6ad02a81c15529716bdd0d</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; boost::shared_ptr&lt; Link &gt; &gt;</type>
      <name>getLinks</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>aaafd7305745e7fc3fbc973dcc756d8f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; boost::shared_ptr&lt; Joint &gt; &gt;</type>
      <name>getJoints</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>ae1b7e363f416c38f201eb871a9580890</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; Link &gt;</type>
      <name>root_link_</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a38951ba63441d966e8b620f862004eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, boost::shared_ptr&lt; Link &gt; &gt;</type>
      <name>links_</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a4a1a8696878297aeb44e2f0406032a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, boost::shared_ptr&lt; Joint &gt; &gt;</type>
      <name>joints_</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>a42696a3d212e4e32ae064ece34755853</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>a00137.html</anchorfile>
      <anchor>acb61ed2033eb482f3aa94dcdcf7a01c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ModelConfig</name>
    <filename>a00138.html</filename>
    <member kind="function">
      <type></type>
      <name>ModelConfig</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a389dc0a25c489f7c3287b0d5e9a9ca44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelConfig</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ac703cf884a9addb86e3211afdcaf7459</anchor>
      <arglist>(const ModelConfig &amp;model_cfg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModelConfig</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a8863c9bed297511a5eaf8e8d48e94e81</anchor>
      <arglist>(std::map&lt; std::string, boost::shared_ptr&lt; Joint &gt; &gt; joints_map)</arglist>
    </member>
    <member kind="function">
      <type>JointConfig</type>
      <name>getJointConfigByJointName</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a79d2a6861512f606b700b7bba1619368</anchor>
      <arglist>(const std::string &amp;joint_name) const </arglist>
    </member>
    <member kind="function">
      <type>JointConfig &amp;</type>
      <name>getJointConfigByJointName</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a4e945eb6cdabe3203c0ae3ab06a57c88</anchor>
      <arglist>(const std::string &amp;joint_name)</arglist>
    </member>
    <member kind="function">
      <type>JointConfig</type>
      <name>getJointConfigByJoint</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>a9906d3c955dbd9a09961973ae0575ed5</anchor>
      <arglist>(boost::shared_ptr&lt; Joint &gt; joint) const </arglist>
    </member>
    <member kind="function">
      <type>JointConfig &amp;</type>
      <name>getJointConfigByJoint</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>ae2aba78cacaf7b29f07bcfd3466d9d00</anchor>
      <arglist>(boost::shared_ptr&lt; Joint &gt; joint)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, JointConfig &gt;</type>
      <name>getJointCfgsMap</name>
      <anchorfile>a00138.html</anchorfile>
      <anchor>af9e5ac44d02eebd224c1f95659051116</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ModelParseError</name>
    <filename>a00139.html</filename>
    <member kind="function">
      <type></type>
      <name>ModelParseError</name>
      <anchorfile>a00139.html</anchorfile>
      <anchor>a9de252a60155ca15b9f7d7cf1b1045d1</anchor>
      <arglist>(const std::string &amp;error_msg)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::morton_functor</name>
    <filename>a00140.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>fcl::morton_functor&lt; boost::dynamic_bitset&lt;&gt; &gt;</name>
    <filename>a00141.html</filename>
    <member kind="function">
      <type></type>
      <name>morton_functor</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a571a9d5da3dc0d1d39c9013c8ff80c93</anchor>
      <arglist>(const AABB &amp;bbox, size_t bit_num_)</arglist>
    </member>
    <member kind="function">
      <type>boost::dynamic_bitset</type>
      <name>operator()</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>aa443396bfc4665fdc0fa177439014beb</anchor>
      <arglist>(const Vec3f &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>bits</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a62b60d2124d62f3068c27693b315d902</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>const Vec3f</type>
      <name>base</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a10d4ecfd901e61c0f8e2e65e52a4174a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3f</type>
      <name>inv</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a3a428c1c33d6c5fd53b93f4b7042518a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>bit_num</name>
      <anchorfile>a00141.html</anchorfile>
      <anchor>a39cd5e4b9b8cd783078b5dc2993b4cfd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::morton_functor&lt; FCL_UINT32 &gt;</name>
    <filename>a00142.html</filename>
    <member kind="function">
      <type></type>
      <name>morton_functor</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>ae9af717d865d2c37d7b854aff89d6da6</anchor>
      <arglist>(const AABB &amp;bbox)</arglist>
    </member>
    <member kind="function">
      <type>FCL_UINT32</type>
      <name>operator()</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>aece1fd4370b28b4658cb79be8665cb10</anchor>
      <arglist>(const Vec3f &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>bits</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a216ea789b03c88c904a03366333b0943</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>const Vec3f</type>
      <name>base</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>af88cfe7c4bf86ae8018dacec2a67471a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3f</type>
      <name>inv</name>
      <anchorfile>a00142.html</anchorfile>
      <anchor>a831a93e7d4b344cb8ed54d8dde1160c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::morton_functor&lt; FCL_UINT64 &gt;</name>
    <filename>a00143.html</filename>
    <member kind="function">
      <type></type>
      <name>morton_functor</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>ac5907a473ff1b30f157f4554f6000064</anchor>
      <arglist>(const AABB &amp;bbox)</arglist>
    </member>
    <member kind="function">
      <type>FCL_UINT64</type>
      <name>operator()</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aa4fa1aa3b53e8e1a972d37bca2ab6f2f</anchor>
      <arglist>(const Vec3f &amp;point) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>bits</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a1fc3380c835bb85bac0ddaa8bc8c75f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>const Vec3f</type>
      <name>base</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0c8d011886bf5526838d372a02d4b71e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Vec3f</type>
      <name>inv</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a0bf9a0da582d3190abe2353e094f9143</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::MotionBase</name>
    <filename>a00144.html</filename>
    <member kind="function">
      <type></type>
      <name>MotionBase</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a418ae3291f21dc774ed39b44ab3fb794</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MotionBase</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ade55bffb1e7c1b091c5b94b29f025ea9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>integrate</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a4fc88007ffe41eb9f80bb9ade17ee83e</anchor>
      <arglist>(double dt) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FCL_REAL</type>
      <name>computeMotionBound</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a72ad22684eb5d7c29a955a2e775fbaa1</anchor>
      <arglist>(const BVMotionBoundVisitor &amp;mb_visitor) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FCL_REAL</type>
      <name>computeMotionBound</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>af55d2196036832bd9a01bba338618455</anchor>
      <arglist>(const TriangleMotionBoundVisitor &amp;mb_visitor) const  =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCurrentTransform</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>aeabc4ac88c6fa23de5db76add8a071b7</anchor>
      <arglist>(Matrix3f &amp;R, Vec3f &amp;T) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCurrentTransform</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a4647d1ea2a45c07be4c7ea8d70df5d76</anchor>
      <arglist>(Quaternion3f &amp;Q, Vec3f &amp;T) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCurrentRotation</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a458bc324aa37373994a176c4a044beba</anchor>
      <arglist>(Matrix3f &amp;R) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCurrentRotation</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ad4ca164370942cacaa744eb5137d90c9</anchor>
      <arglist>(Quaternion3f &amp;Q) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCurrentTranslation</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>ac5b8351db2cba7a751cbbac7a96a88de</anchor>
      <arglist>(Vec3f &amp;T) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getCurrentTransform</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>addbe78d7ba70bcb4cf171d25ae3324ff</anchor>
      <arglist>(Transform3f &amp;tf) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getTaylorModel</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a3989e56077603c38337494fbcdaf91b9</anchor>
      <arglist>(TMatrix3 &amp;tm, TVector3 &amp;tv) const  =0</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; TimeInterval &gt; &amp;</type>
      <name>getTimeInterval</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a7a04187cb17736d66b0bb4d987396a62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; TimeInterval &gt;</type>
      <name>time_interval_</name>
      <anchorfile>a00144.html</anchorfile>
      <anchor>a5eab1ae6f9cc936fd23454cd166ce5c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::NaiveCollisionManager</name>
    <filename>a00145.html</filename>
    <base>fcl::BroadPhaseCollisionManager</base>
    <member kind="function">
      <type></type>
      <name>NaiveCollisionManager</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a28d55c79cf9e2dded780b280f0179eb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObjects</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a6f0d6597009f5af508ae7b95a6c8d069</anchor>
      <arglist>(const std::vector&lt; CollisionObject * &gt; &amp;other_objs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObject</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ad831e9b5253a67cff6ac0d95384501ac</anchor>
      <arglist>(CollisionObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterObject</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a3502851a299d411b24812f1620d0cbec</anchor>
      <arglist>(CollisionObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>aca8179e0676b53da1a6b445dd57f83a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a1d131fc9ee956ccc9f6ae3f67fa274a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a9f34d0d594570321683eda4561f927e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getObjects</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a058feac28d46e6abd9f34ddeaad71fe0</anchor>
      <arglist>(std::vector&lt; CollisionObject * &gt; &amp;objs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a9d0dfc9f1a21a1918a07723da63c3ceb</anchor>
      <arglist>(CollisionObject *obj, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a3dc263146e7a11b918eb8c2387862d34</anchor>
      <arglist>(CollisionObject *obj, void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a80888894ecc6f7abdca987f6a4b44dcf</anchor>
      <arglist>(void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a52f55b01ae89b95055f7283b704dcda1</anchor>
      <arglist>(void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>adbca2cb01c814ed494f3d0eb662b33c4</anchor>
      <arglist>(BroadPhaseCollisionManager *other_manager, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>abedb761476940ca33262056f75bc12d0</anchor>
      <arglist>(BroadPhaseCollisionManager *other_manager, void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>ab26a26ba78291a07815311446c0e67dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a4ea41c1f8f1721adcc72db2a12ae24a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; CollisionObject * &gt;</type>
      <name>objs</name>
      <anchorfile>a00145.html</anchorfile>
      <anchor>a3931cee56106fca46a25fcd93890b73e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::NearestNeighbors</name>
    <filename>a00146.html</filename>
    <templarg>_T</templarg>
    <member kind="typedef">
      <type>boost::function&lt; double(const _T &amp;, const _T &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a8123b345294e098caa2706343a474119</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NearestNeighbors</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ae66e6d151e02494b92f25f9467f39741</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NearestNeighbors</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>acf29826745d38e4ce23d534168bb2816</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a314472169c7ee1fc1b09af4205406919</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a0061fd4ba42b38658affd7baaa97c935</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a5cf17b085c45cc6a33a599bac562e10d</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>afcf188fd3f313f7198c44668eab5a0a4</anchor>
      <arglist>(const _T &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aa15aa6fc80dc267f1437d9090801c461</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a700c7b8cb7ee9b84aed7361de118c1e9</anchor>
      <arglist>(const _T &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual _T</type>
      <name>nearest</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aa8c263a3ebb552572a51d8f5736f1a37</anchor>
      <arglist>(const _T &amp;data) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a26e01fc17dc0e021e057e32548cc1b1e</anchor>
      <arglist>(const _T &amp;data, std::size_t k, std::vector&lt; _T &gt; &amp;nbh) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a3bea2eae6ee03398f95ce1cedc67ae02</anchor>
      <arglist>(const _T &amp;data, double radius, std::vector&lt; _T &gt; &amp;nbh) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ad115d12a8b8d029cd628d2f7c2fdb2b9</anchor>
      <arglist>(void) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a776f48900adf319b7df339cc642e6c89</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;data) const  =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ad8b1052b7c487cf7a7008f852ed97912</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NearestNeighbors&lt; fcl::Transform3f &gt;</name>
    <filename>a00146.html</filename>
    <member kind="typedef">
      <type>boost::function&lt; double(const fcl::Transform3f &amp;, const fcl::Transform3f &amp;)&gt;</type>
      <name>DistanceFunction</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a8123b345294e098caa2706343a474119</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NearestNeighbors</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ae66e6d151e02494b92f25f9467f39741</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NearestNeighbors</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>acf29826745d38e4ce23d534168bb2816</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a314472169c7ee1fc1b09af4205406919</anchor>
      <arglist>(const DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function">
      <type>const DistanceFunction &amp;</type>
      <name>getDistanceFunction</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a0061fd4ba42b38658affd7baaa97c935</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a5cf17b085c45cc6a33a599bac562e10d</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>afcf188fd3f313f7198c44668eab5a0a4</anchor>
      <arglist>(const fcl::Transform3f &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aa15aa6fc80dc267f1437d9090801c461</anchor>
      <arglist>(const std::vector&lt; fcl::Transform3f &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a700c7b8cb7ee9b84aed7361de118c1e9</anchor>
      <arglist>(const fcl::Transform3f &amp;data)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fcl::Transform3f</type>
      <name>nearest</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>aa8c263a3ebb552572a51d8f5736f1a37</anchor>
      <arglist>(const fcl::Transform3f &amp;data) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a26e01fc17dc0e021e057e32548cc1b1e</anchor>
      <arglist>(const fcl::Transform3f &amp;data, std::size_t k, std::vector&lt; fcl::Transform3f &gt; &amp;nbh) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a3bea2eae6ee03398f95ce1cedc67ae02</anchor>
      <arglist>(const fcl::Transform3f &amp;data, double radius, std::vector&lt; fcl::Transform3f &gt; &amp;nbh) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ad115d12a8b8d029cd628d2f7c2fdb2b9</anchor>
      <arglist>(void) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a776f48900adf319b7df339cc642e6c89</anchor>
      <arglist>(std::vector&lt; fcl::Transform3f &gt; &amp;data) const  =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistanceFunction</type>
      <name>distFun_</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>ad8b1052b7c487cf7a7008f852ed97912</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::NearestNeighborsGNAT</name>
    <filename>a00147.html</filename>
    <templarg></templarg>
    <base>fcl::NearestNeighbors</base>
    <class kind="class">fcl::NearestNeighborsGNAT::Node</class>
    <member kind="function">
      <type></type>
      <name>NearestNeighborsGNAT</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>ae7445832ed4921899613eff452bd17f4</anchor>
      <arglist>(unsigned int degree=4, unsigned int minDegree=2, unsigned int maxDegree=6, unsigned int maxNumPtsPerLeaf=50, unsigned int removedCacheSize=50, bool rebalancing=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NearestNeighborsGNAT</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a5daea96d2966250164f7fb9bbbbe8390</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDistanceFunction</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a691d15dc3027e654d4990445cf90f270</anchor>
      <arglist>(const typename NearestNeighbors&lt; _T &gt;::DistanceFunction &amp;distFun)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a982feb1fd511db3aa5375036563e691c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a2caab82e6d7a05cba6727b1948b45c08</anchor>
      <arglist>(const _T &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>ada682be562983b1c76c681fd0407ba87</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuildDataStructure</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>aa5c49c30dd7f287dc0fe6f0085f468a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a049a61f49f09dc21d45172c66b2f4ffe</anchor>
      <arglist>(const _T &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _T</type>
      <name>nearest</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a4933aaa6ca58de48970e1efebc251cae</anchor>
      <arglist>(const _T &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>ac51992286b97f3339e5e092d96e706f2</anchor>
      <arglist>(const _T &amp;data, std::size_t k, std::vector&lt; _T &gt; &amp;nbh) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a595a66e6a7b8fc0ba79e4afa7525d415</anchor>
      <arglist>(const _T &amp;data, double radius, std::vector&lt; _T &gt; &amp;nbh) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>abe563dda253b5c079f9b2e5b4a56498c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>ab34ac6f40f77d2bfca1b135f8783f28f</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;data) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrityCheck</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>ab8891da9a76a87e7d8443d5035807ee7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>NearestNeighborsGNAT&lt; _T &gt;</type>
      <name>GNAT</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a7bca5012d179d137ef38e0af3eaddaf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isRemoved</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>ab5c784f94ae5b2fd60e4e153ba5b21a8</anchor>
      <arglist>(const _T &amp;data) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>nearestKInternal</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a0714d80ff4043629ab8260fdd55d2bc4</anchor>
      <arglist>(const _T &amp;data, std::size_t k, NearQueue &amp;nbhQueue) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>nearestRInternal</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>ad03d054fe6fdae826482dacc8d162650</anchor>
      <arglist>(const _T &amp;data, double radius, NearQueue &amp;nbhQueue) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>postprocessNearest</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>af612615483b42ef46d775a95feebae15</anchor>
      <arglist>(NearQueue &amp;nbhQueue, std::vector&lt; _T &gt; &amp;nbh) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>tree_</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a941afb79f105455efeb76db1a2bf42c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>degree_</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a584b1b7eece201b1305936a7474709e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>minDegree_</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a56bf675d0376bbb5b16c0f9a99af4c6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxDegree_</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>ab7df71dfe131d9549f92c4669c6ae6cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>maxNumPtsPerLeaf_</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a2da0add38d05d44edc190edc5e3eff9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>size_</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a72a8df0d24d1b2281098ba51b4925f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>rebuildSize_</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a8cb0b6d0d6b6229dae15ab51855ac57b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>removedCacheSize_</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a521c5707e1f022cf694fbd3013f34ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GreedyKCenters&lt; _T &gt;</type>
      <name>pivotSelector_</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a9a6be7cd4c50c72b1b111568d47d4cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::unordered_set&lt; const _T * &gt;</type>
      <name>removed_</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a9a6522528d305efd081b6d90dac01a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00147.html</anchorfile>
      <anchor>a1e1b937c81eb1d184ffa588589bcc07f</anchor>
      <arglist>(std::ostream &amp;out, const NearestNeighborsGNAT&lt; _T &gt; &amp;gnat)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::NearestNeighborsLinear</name>
    <filename>a00148.html</filename>
    <templarg>_T</templarg>
    <base>fcl::NearestNeighbors</base>
    <member kind="function">
      <type></type>
      <name>NearestNeighborsLinear</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a56cb16ae1427b66671dd6654a24ad44b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NearestNeighborsLinear</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a0cd30d30788a3cb3a8aec2fd3bb05b93</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a16446798790377e1f7a2571da19e898a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a76619b0e488a3dd5c06f46f914d3767d</anchor>
      <arglist>(const _T &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>ae21a5511b93128e73c0d7c8155bd1859</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>abc151aaaba8c7bf478d43ece41615af1</anchor>
      <arglist>(const _T &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _T</type>
      <name>nearest</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a9f2688a011a09ad650238f4c95a3968f</anchor>
      <arglist>(const _T &amp;data) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nearestK</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a9ce4a359ba1388c4f4bb0c0ba184fffc</anchor>
      <arglist>(const _T &amp;data, std::size_t k, std::vector&lt; _T &gt; &amp;nbh) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>nearestR</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>ad8cbb5b7eb6bd9aa64082e0b0547f17a</anchor>
      <arglist>(const _T &amp;data, double radius, std::vector&lt; _T &gt; &amp;nbh) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a506908a76be47c9d135ac05e9fc3ddf4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>list</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a46af015aaf3a11f8edf242f7bba01e09</anchor>
      <arglist>(std::vector&lt; _T &gt; &amp;data) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; _T &gt;</type>
      <name>data_</name>
      <anchorfile>a00148.html</anchorfile>
      <anchor>a3f05eacb87ee03e182308dfe3214f32b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::NearestNeighborsSqrtApprox</name>
    <filename>a00149.html</filename>
    <templarg></templarg>
    <base>fcl::NearestNeighborsLinear</base>
    <member kind="function">
      <type></type>
      <name>NearestNeighborsSqrtApprox</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a2657f9f9a78a19175fc6a787559cbd80</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NearestNeighborsSqrtApprox</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a4b41a183c770c092486223a25499ccb1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>aa1ca72fe6264015bc5c395b929e95e33</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a78fe0391fcde0e06785a4061751a9729</anchor>
      <arglist>(const _T &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a9b78950477041f0ae6f4bd7ec03af1c1</anchor>
      <arglist>(const std::vector&lt; _T &gt; &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>remove</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a71442deb2421292da8084f8997ada887</anchor>
      <arglist>(const _T &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _T</type>
      <name>nearest</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a9ee1da031d394230476d9793f591d934</anchor>
      <arglist>(const _T &amp;data) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateCheckCount</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a3eb66b6f5837e9fb7c16d6f09901ee58</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>checks_</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>aeeb12dffa19af490cc646bcbf741cfe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>offset_</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a5ea29ded597679c59f8d59318843d248</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::NearestNeighborsGNAT::Node</name>
    <filename>a00150.html</filename>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>ab6901c5274eb50321d4818ddbee2b0a1</anchor>
      <arglist>(int degree, int capacity, const _T &amp;pivot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Node</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>ab6df10fbf9d3f27e50d7c222595f7cc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRadius</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>ae147c7a3b2951931864b59542427062a</anchor>
      <arglist>(double dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateRange</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a2cfe47114207aa3050eba7674e2627c1</anchor>
      <arglist>(unsigned int i, double dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a49f8301af8896f99dfacca30bf8ea233</anchor>
      <arglist>(GNAT &amp;gnat, const _T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needToSplit</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a80eafd523d8e6e4cdcdd1af1352af7c4</anchor>
      <arglist>(const GNAT &amp;gnat) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a2f36c093d3fdfb1c576ab298692c7a9d</anchor>
      <arglist>(GNAT &amp;gnat)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertNeighborK</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a20d9992223e365ad9f242e5e8b0432ac</anchor>
      <arglist>(NearQueue &amp;nbh, std::size_t k, const _T &amp;data, const _T &amp;key, double dist) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestK</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a99df1ebcb41f9a22cdd79af90bae6453</anchor>
      <arglist>(const GNAT &amp;gnat, const _T &amp;data, std::size_t k, NearQueue &amp;nbh, NodeQueue &amp;nodeQueue, bool &amp;isPivot) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNeighborR</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a5ee17d3cedd7bd4fa0ef137fc52b83e7</anchor>
      <arglist>(NearQueue &amp;nbh, double r, const _T &amp;data, double dist) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nearestR</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a3881242f86c3ea713315e33f2565c909</anchor>
      <arglist>(const GNAT &amp;gnat, const _T &amp;data, double r, NearQueue &amp;nbh, NodeQueue &amp;nodeQueue) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>list</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a6fa3469111e9169baa12691ecb8b5ca3</anchor>
      <arglist>(const GNAT &amp;gnat, std::vector&lt; _T &gt; &amp;data) const </arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>degree_</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a98ab7a36e9262924b5ad2ee8cfed3f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const _T</type>
      <name>pivot_</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a7666ee08b4406b7b2bc6b83284a41435</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minRadius_</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a0a5e615cbf4b1ed706304e9658a855e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxRadius_</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>ab0564c2323c72af99c73208d13a8072d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>minRange_</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>ace8bcc6d93d6e7bdde998b0f25a05784</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>maxRange_</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a13bf42a78c33c42aa433ecf1be5d49f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; _T &gt;</type>
      <name>data_</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>aee54fd7f342f51d4f716aa16b2893174</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Node * &gt;</type>
      <name>children_</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>aca18867ebfdcdb8cda2c92ee359bdf64</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00150.html</anchorfile>
      <anchor>a8f66b39225eb98c6161e1339eb398e5e</anchor>
      <arglist>(std::ostream &amp;out, const Node &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::NodeBase</name>
    <filename>a00151.html</filename>
    <templarg>BV</templarg>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a2064c8771abff961311c988c314ed3a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInternal</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a0df47bcf50f73110ba26584d150db685</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeBase</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>aca9f6f4c69f4d32c31a44dfc2f5830ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>BV</type>
      <name>bv</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ae7f5a463b9cbfd2307fc5272fd383799</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NodeBase&lt; BV &gt; *</type>
      <name>parent</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a481cbcc86e7b2fcb4fd0b8b5b29d7e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NodeBase&lt; BV &gt; *</type>
      <name>children</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>ad6565fc51f04ff38bd59535fc60e71c0</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>data</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a349d371d2a1759bbe2a5f5cd67def8e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_UINT32</type>
      <name>code</name>
      <anchorfile>a00151.html</anchorfile>
      <anchor>a9bfdd4e59c525edd5aaacaddc3ee889b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::implementation_array::NodeBase</name>
    <filename>a00152.html</filename>
    <templarg>BV</templarg>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>af9f5f77c3090ab7983279c24eccd9499</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInternal</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a544ce3fb4971cacbb79b784aef0793ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>BV</type>
      <name>bv</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>acd1cf2f7251f2d77d20933c179f68e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>parent</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>af6fc9b6aebcbedeac553fbd29da1ccb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>next</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a800d35f9bccc0e84a223909b154c5125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>children</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>afc1954e8cfb86652174155c7576a05ba</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>data</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>aef68a467750607f4b957f5d894a6cecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_UINT32</type>
      <name>code</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>aa117181adb242c43ad5f3e3bfe7ba526</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::implementation_array::nodeBaseLess</name>
    <filename>a00153.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>nodeBaseLess</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a9d94e1107c0f5c969e8a665900dc2191</anchor>
      <arglist>(const NodeBase&lt; BV &gt; *nodes_, size_t d_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00153.html</anchorfile>
      <anchor>a237d3ee56dd9b23fb93454f24ac582db</anchor>
      <arglist>(size_t i, size_t j) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::OBB</name>
    <filename>a00154.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a6ef73aa16a20e48df0f0283321f9c4cc</anchor>
      <arglist>(const OBB &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a33e99e1b36ebd595228cacd3d06c0610</anchor>
      <arglist>(const OBB &amp;other, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a6b4c94bc18dd0c28acdb08900fdb97cf</anchor>
      <arglist>(const OBB &amp;other, OBB &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a932d4a6ed1df8b105d0341325a2a079a</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>OBB &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>ab8172f1ca250cc5becc712f8b2368121</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>OBB &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a052ead1cea847fc0d30ec9cf5e3b759c</anchor>
      <arglist>(const OBB &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>OBB</type>
      <name>operator+</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a463ed7ff816ae8ee922d78f7754bb22a</anchor>
      <arglist>(const OBB &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a28ba9b8d2bac5549d0cdd03f1a1a7513</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a33311c9137105e9aab529e56c97b23df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a50aba8fcfae60060c418e1f044539e13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a0c7597ec8c6fbba334244f7ed430f876</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>af1876c9376b2d83dffd86e07daf3a84f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>center</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>aff3b6948612badd0819682ab4e1f2097</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a609aa7955c8e52056e6d723066bdf9ef</anchor>
      <arglist>(const OBB &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>axis</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a4b869c0850a5ed83ceb96e1f356a945a</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>To</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>af2a9f0822d2b8702d97b13fd7e692417</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>extent</name>
      <anchorfile>a00154.html</anchorfile>
      <anchor>a045516c52f4ae0433b1bda1de65958fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::OBBRSS</name>
    <filename>a00155.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a6f6480433a550ccd14de6bec72d99edf</anchor>
      <arglist>(const OBBRSS &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ad60f612cd92a3ab180aaf9e9a559f701</anchor>
      <arglist>(const OBBRSS &amp;other, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>af0159929a5e9dcdb548a5a3d9b493318</anchor>
      <arglist>(const OBBRSS &amp;other, OBBRSS &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>afd173e6323ab8467c6c6fd7a33da7fe1</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>OBBRSS &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aad0adac08c40b9f0a0009ee8f3ff3e6a</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>OBBRSS &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a10a60005e94b9ff5d21efa0287059048</anchor>
      <arglist>(const OBBRSS &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>OBBRSS</type>
      <name>operator+</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a9923261172eccb5657ce9e12430d0b45</anchor>
      <arglist>(const OBBRSS &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>af1708dfdda17bd18f2ef5ee030e7819c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a7ece79503ded6d2b9e70a4bc71e6d11a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a1c80b796981ee59e8b3d01994183360b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aca71fba9fb551a5ac0896001dbacdd64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>aaa4655bae08bb5e937b388a3a505ebe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>center</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a529f04b2be8805be8fad0d3093b58f51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>a3611e16dcc6da52e5be1ce3f2b39a58b</anchor>
      <arglist>(const OBBRSS &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const </arglist>
    </member>
    <member kind="variable">
      <type>OBB</type>
      <name>obb</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>ab171d8f1f35b6bd95e45180ab6b82dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RSS</type>
      <name>rss</name>
      <anchorfile>a00155.html</anchorfile>
      <anchor>afb2c6372aa543b725e261d4ba75d6704</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::OcTree</name>
    <filename>a00156.html</filename>
    <base>fcl::CollisionGeometry</base>
    <member kind="typedef">
      <type>octomap::OcTreeNode</type>
      <name>OcTreeNode</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a1ad476b9985e785c63bac4e5958ea0f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OcTree</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a3823b352783cb66960394de45fa15e90</anchor>
      <arglist>(FCL_REAL resolution)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OcTree</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a6594321e94b100bcdd97c1be33aa5814</anchor>
      <arglist>(const boost::shared_ptr&lt; const octomap::OcTree &gt; &amp;tree_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a2d89925a7c82aa17289fb57ce7c25f14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AABB</type>
      <name>getRootBV</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a5f65230e2c995a303c8feda83c2979fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OcTreeNode *</type>
      <name>getRoot</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a4a6bf0432b4a4ff45c453ec03aa82d74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNodeOccupied</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a9d6d7ffaaffe9dbc182bd1cc6fbd903a</anchor>
      <arglist>(const OcTreeNode *node) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNodeFree</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>adbb318746dbb4ced419553d207335835</anchor>
      <arglist>(const OcTreeNode *node) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNodeUncertain</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a2de200c7c307e09e0a64e2d9e4905dc6</anchor>
      <arglist>(const OcTreeNode *node) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; boost::array&lt; FCL_REAL, 6 &gt; &gt;</type>
      <name>toBoxes</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a66a961bbea30d8d209cc9f345286ce28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getOccupancyThres</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a57abf21a2d7cc2135265e34fd2782f67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getFreeThres</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>ab1c2e710f3d832fe47a4431d34aa4d18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getDefaultOccupancy</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>af3fa91278b5295454d24563e1d61927f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCellDefaultOccupancy</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>ae50f3126f23745f8c842d5f599f43f3b</anchor>
      <arglist>(FCL_REAL d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOccupancyThres</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>ad0768202493d4554f3bd054041d1eebe</anchor>
      <arglist>(FCL_REAL d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFreeThres</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>ad34745b698522674ebef9780bcefa33b</anchor>
      <arglist>(FCL_REAL d)</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>a6de568ff64eb889611207bc1e07b70d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00156.html</anchorfile>
      <anchor>ab2dd34d8ece7cabf30373b1e3d1a1f3f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::OcTreeCollisionTraversalNode</name>
    <filename>a00157.html</filename>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>OcTreeCollisionTraversalNode</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a39146ca97e2bf3bf04262419892f1ff6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>ad4130e389a73bc01ff209b115cebda6e</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>abb977d38cf9bd97b3cab0cd363c192cc</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>aa801e4d345b06d8328b4e65a98876308</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model1</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a92f70665850c37c34b30e42ee44a5538</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model2</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a8ece74bd488a5c9c48d788141c89cd74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf1</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a3b77d2407a2a74c0e8bf514f42300b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf2</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a58cf213ceb62acb561f070f115bb7736</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00157.html</anchorfile>
      <anchor>a42ddb3fe0f893afd32ba1a53b4e5454f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::OcTreeDistanceTraversalNode</name>
    <filename>a00158.html</filename>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>OcTreeDistanceTraversalNode</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a06407953ce8980e17f52de11f06ec7da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a7873a447931025d0a126d885075796f1</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>aa7f9ab200d23136a81782079afb2be7d</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a93fc0d115f914b8203d1ca0ac3b7b213</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model1</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>ad431d9912370d82c38ad1735e09c734e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model2</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>ae208e60065f404f38a65fa2841e062b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00158.html</anchorfile>
      <anchor>a08f828e2ada5b6768b92783271241087</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::OcTreeMeshCollisionTraversalNode</name>
    <filename>a00159.html</filename>
    <templarg>BV</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>OcTreeMeshCollisionTraversalNode</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a408a0c33e07777f48aa130d65d14d0c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>afef7631432b839e1d01a801592e8d49e</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a91ce4575105fe05c2ac588519b67494e</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a61466567ee58bb84d0dbd1f08f217c99</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model1</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aa58562da41d764ea015f1096dd9a0794</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model2</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>ad2ed0c9f1e9af0661db5deb9b54907da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf1</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>a287b1fb91c9b444ba349f1f44a2fbcf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf2</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>afc0f3b40b9bb4cc016fc91bb84868e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00159.html</anchorfile>
      <anchor>aed5a6894dbc3ece3588204848733317c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::OcTreeMeshDistanceTraversalNode</name>
    <filename>a00160.html</filename>
    <templarg>BV</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>OcTreeMeshDistanceTraversalNode</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>ab420931679b575c8a2de2896b4406b86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a3a5df33dba47d96e573ca41cffe0e420</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a1297d61e7d3d5e84c97025d112739483</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model1</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>aef997b943d0c765ad22519e0d563f7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model2</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a7dcf581b84775cade58970fd9f032edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00160.html</anchorfile>
      <anchor>a8b81c88be8248b4cf8f03abbf51c55ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::OcTreeShapeCollisionTraversalNode</name>
    <filename>a00161.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>OcTreeShapeCollisionTraversalNode</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a9bc9e6aa5b87741fa26fb920e6c25049</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>aeb626a7490bfb7362071c4e1a2c9fb17</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a339a9c55c9fa68cc659a750323fcbdaa</anchor>
      <arglist>(int, int, fcl::FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>ac4994470b7803062a4e4f8085cab1c07</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model1</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>addb8f49512d4ebdd67f5971e90a7faef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a792fa90ec01790cca4c6a78569fb6afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf1</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>ade8e8602c7caa856f48c0cd5284880e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf2</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a525b1bbe0151fcc5eefbd46ebda7390a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00161.html</anchorfile>
      <anchor>a8bdc615c8fd845640c4fac1c8f3bad98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::OcTreeShapeDistanceTraversalNode</name>
    <filename>a00162.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>OcTreeShapeDistanceTraversalNode</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>aad745a3c78ebc752c62d33cced5a0916</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a4cc7fb7b1b644fad119067c8761775fc</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>ab5ad4ed44b2cbd464f398cce600f7ad2</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model1</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a1731fb238821efa14967d34b95b204ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model2</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a7e95d44a66e6f93b029c63dffb8a3b36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00162.html</anchorfile>
      <anchor>a88a5ad8ee82ae0321618f8f8533cc790</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::OcTreeSolver</name>
    <filename>a00163.html</filename>
    <templarg>NarrowPhaseSolver</templarg>
    <member kind="function">
      <type></type>
      <name>OcTreeSolver</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>ab18f1ce177fc91bdb4edb8da5e65de71</anchor>
      <arglist>(const NarrowPhaseSolver *solver_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OcTreeIntersect</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a95e5740994e2d22fbdbe52b76562944c</anchor>
      <arglist>(const OcTree *tree1, const OcTree *tree2, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const CollisionRequest &amp;request_, CollisionResult &amp;result_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OcTreeDistance</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a20b6eb4040c08d767d697925aa5f528f</anchor>
      <arglist>(const OcTree *tree1, const OcTree *tree2, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const DistanceRequest &amp;request_, DistanceResult &amp;result_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OcTreeMeshIntersect</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a43877a7fe6e3197e2a40a79ba61d18b0</anchor>
      <arglist>(const OcTree *tree1, const BVHModel&lt; BV &gt; *tree2, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const CollisionRequest &amp;request_, CollisionResult &amp;result_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OcTreeMeshDistance</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a76e1742b523a871645a65e5ea5c1bc0c</anchor>
      <arglist>(const OcTree *tree1, const BVHModel&lt; BV &gt; *tree2, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const DistanceRequest &amp;request_, DistanceResult &amp;result_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MeshOcTreeIntersect</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a72ffa76de62229cf423a5912a9fa3a87</anchor>
      <arglist>(const BVHModel&lt; BV &gt; *tree1, const OcTree *tree2, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const CollisionRequest &amp;request_, CollisionResult &amp;result_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MeshOcTreeDistance</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a43ffe41fcdf98e763f9e3edfa39ec1c4</anchor>
      <arglist>(const BVHModel&lt; BV &gt; *tree1, const OcTree *tree2, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const DistanceRequest &amp;request_, DistanceResult &amp;result_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OcTreeShapeIntersect</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a1a8c155f5b82ab2a66235b5664cb0d1d</anchor>
      <arglist>(const OcTree *tree, const S &amp;s, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const CollisionRequest &amp;request_, CollisionResult &amp;result_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShapeOcTreeIntersect</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a01a4a054c4c930f0ae1fa40eb308cea4</anchor>
      <arglist>(const S &amp;s, const OcTree *tree, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const CollisionRequest &amp;request_, CollisionResult &amp;result_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>OcTreeShapeDistance</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>a02645b7e68e0f5adf1c22e6ad8a156a2</anchor>
      <arglist>(const OcTree *tree, const S &amp;s, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const DistanceRequest &amp;request_, DistanceResult &amp;result_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ShapeOcTreeDistance</name>
      <anchorfile>a00163.html</anchorfile>
      <anchor>ab9657de19cdf1fc72a33e25eea440ff9</anchor>
      <arglist>(const S &amp;s, const OcTree *tree, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const DistanceRequest &amp;request_, DistanceResult &amp;result_) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::PenetrationDepthRequest</name>
    <filename>a00164.html</filename>
    <member kind="function">
      <type></type>
      <name>PenetrationDepthRequest</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>ae30671589077ab0dd2d363d7662957c0</anchor>
      <arglist>(void *classifier_, NearestNeighbors&lt; Transform3f &gt;::DistanceFunction distance_func_, KNNSolverType knn_solver_type_=KNN_LINEAR, PenetrationDepthType pd_type_=PDT_TRANSLATIONAL, GJKSolverType gjk_solver_type_=GST_LIBCCD)</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>classifier</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a6e4fcd450f3a25b14bffeff5bc2edba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>NearestNeighbors&lt; Transform3f &gt;::DistanceFunction</type>
      <name>distance_func</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a4653a19d26aca0d00e0e91999af6fd65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KNNSolverType</type>
      <name>knn_solver_type</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a7f800d85fffed894fde8f4bf269de1cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PenetrationDepthType</type>
      <name>pd_type</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a627f9d9badfa93c6c182bbdc357500a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GJKSolverType</type>
      <name>gjk_solver_type</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a053bfb763ec77e8c3bd9b21eced08955</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Transform3f &gt;</type>
      <name>contact_vectors</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>aa9b057a4c8790194183ec2f4f5c0b3ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::PenetrationDepthResult</name>
    <filename>a00165.html</filename>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>pd_value</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>ac529e6224b8ed0380689af8f429324eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>resolved_tf</name>
      <anchorfile>a00165.html</anchorfile>
      <anchor>afe554870575e8cfa0e3b1007b956f1d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Plane</name>
    <filename>a00166.html</filename>
    <base>fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a70b9364348daf3a0f020a6c74bc840fc</anchor>
      <arglist>(const Vec3f &amp;n_, FCL_REAL d_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a28fbe422ddee56bc7ce4b97caa6437a2</anchor>
      <arglist>(FCL_REAL a, FCL_REAL b, FCL_REAL c, FCL_REAL d_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>ad38ed6524ae24f4669abd8024a9b1dec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>signedDistance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a9503595117256fd7ee3726c93b04cdff</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a034b76de5e9ec6173f3df1ccc4c7ec59</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a91f4adfe3d43861e65f2ac386fa29a9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a9e2fbf303d8d383c8c2f055084b0c6ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>n</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a1f9c3730b66eb52b18e6f4119b892093</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>d</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>afb6f78d730971c3accd53a7f05340a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unitNormalTest</name>
      <anchorfile>a00166.html</anchorfile>
      <anchor>a5966adff695db6797871ac5a1f1e687e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::PolySolver</name>
    <filename>a00167.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>solveLinear</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a61595dd1d73efe0c7c3fdc4e5410cb44</anchor>
      <arglist>(FCL_REAL c[2], FCL_REAL s[1])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>solveQuadric</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>a585a00ddf1c24bfa82b2d9a1a6aa7fe5</anchor>
      <arglist>(FCL_REAL c[3], FCL_REAL s[2])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>solveCubic</name>
      <anchorfile>a00167.html</anchorfile>
      <anchor>adc9209a7af523f2ee488017e6e2101c3</anchor>
      <arglist>(FCL_REAL c[4], FCL_REAL s[3])</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::PredictResult</name>
    <filename>a00168.html</filename>
    <member kind="function">
      <type></type>
      <name>PredictResult</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a9a4a00aac55bfb983a3695bedc63b5d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PredictResult</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>ad5910d4a1afa7ce1f667a1a7fbcba9ac</anchor>
      <arglist>(bool label_, FCL_REAL prob_=1)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>label</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>af2f788d6c39d8d216658e6559c979e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>prob</name>
      <anchorfile>a00168.html</anchorfile>
      <anchor>a9a70be0c261b2087c7f4ec74e9736ebb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::PrismaticJoint</name>
    <filename>a00169.html</filename>
    <base>fcl::Joint</base>
    <member kind="function">
      <type></type>
      <name>PrismaticJoint</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a13cdd60271ccda91cde0e03c16fa7c87</anchor>
      <arglist>(const boost::shared_ptr&lt; Link &gt; &amp;link_parent, const boost::shared_ptr&lt; Link &gt; &amp;link_child, const Transform3f &amp;transform_to_parent, const std::string &amp;name, const Vec3f &amp;axis)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PrismaticJoint</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a290ac5bdbd3e5666d52a7684f72cc976</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>getLocalTransform</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a3e550f5790b10dee5a140ac31db74086</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDofs</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a20fb392a7db0c50cb104badda53d1529</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getAxis</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a7e03a2198142323ebaa008ca86259d47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>axis_</name>
      <anchorfile>a00169.html</anchorfile>
      <anchor>a97c3634a43d7fe8470d9cf21347c3cd7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::tools::Profiler</name>
    <filename>a00170.html</filename>
    <class kind="class">fcl::tools::Profiler::ScopedBlock</class>
    <class kind="class">fcl::tools::Profiler::ScopedStart</class>
    <member kind="function">
      <type></type>
      <name>Profiler</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>aa8f97a307fa7b837f319532234b3e219</anchor>
      <arglist>(bool printOnDestroy=false, bool autoStart=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Profiler</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ab0c4d2dcc57723e2f3a8ae4a62c541ba</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a0f75b5e479e98f0c637247bdd5b54b1d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a4e478b202af243f575543b447dcbf98a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a00ed87b69ecac22876abc9b034a538eb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>event</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a1763ee8b1c3b4e9cc304faeed7dcdcc0</anchor>
      <arglist>(const std::string &amp;name, const unsigned int times=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>average</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a9b72ce944f9ace6d247a1f26c60032dc</anchor>
      <arglist>(const std::string &amp;name, const double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>begin</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a50e5d41ddcfd581aad011efdcbf64573</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a04717ca5fa1332ad655dd38c09c9bd91</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>status</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a48d9e94cf1f2bc1967734b939857ecb5</anchor>
      <arglist>(std::ostream &amp;out=std::cout, bool merge=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>running</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a8fed68b49cc7be477f781402c382ce02</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Profiler &amp;</type>
      <name>Instance</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>af553e1c72a31c6e5ac4330904898073b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Start</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a8185f1644766f9c34ad055f4404d15d5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Stop</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a11516ad3a31547a2ccef35ab4fb52650</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Clear</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a54d6564b75c97b51f0a78e42938e3116</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Event</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>ae5afdb9693c173859aaad8b658b519bf</anchor>
      <arglist>(const std::string &amp;name, const unsigned int times=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Average</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a0c9be2d216198f2c123bcab125a20c43</anchor>
      <arglist>(const std::string &amp;name, const double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Begin</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a8e084a473832307b947131939dcea1cd</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>End</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>aacb2c7e3c1424b172a8edbe2c81b8f35</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Status</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a23242f5bd6695ee5b938a8c49ca1b900</anchor>
      <arglist>(std::ostream &amp;out=std::cout, bool merge=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>Running</name>
      <anchorfile>a00170.html</anchorfile>
      <anchor>a18d96ce3a18dc028dba1ec1fafc0028f</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Project</name>
    <filename>a00171.html</filename>
    <class kind="struct">fcl::Project::ProjectResult</class>
    <member kind="function" static="yes">
      <type>static ProjectResult</type>
      <name>projectLine</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a30b894aa2c07984ded4bbb5bb83f2d07</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProjectResult</type>
      <name>projectTriangle</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>ac4362dd06a8a4ed96d0d3dc5a590bff2</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c, const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProjectResult</type>
      <name>projectTetrahedra</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>ad3e03af2b5a933e6ccf7d11aeec18bd6</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c, const Vec3f &amp;d, const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProjectResult</type>
      <name>projectLineOrigin</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a2bed52659f1af75b2fa50e015d7ada38</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProjectResult</type>
      <name>projectTriangleOrigin</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>a4c5310249ff043260d5543158b4ace7a</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProjectResult</type>
      <name>projectTetrahedraOrigin</name>
      <anchorfile>a00171.html</anchorfile>
      <anchor>afb473f04d54b625a37af699ad9d0462e</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c, const Vec3f &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::Project::ProjectResult</name>
    <filename>a00172.html</filename>
    <member kind="function">
      <type></type>
      <name>ProjectResult</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a58b698bc4c412d1ad27f02a502b7bf20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>parameterization</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a3981bc83b20667312fada09b2a5760b0</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>sqr_distance</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a0b1b88be425cec0ecfde49c096307c91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>encode</name>
      <anchorfile>a00172.html</anchorfile>
      <anchor>a50d377577c4826077d98b9fe13e15236</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Quaternion3f</name>
    <filename>a00173.html</filename>
    <member kind="function">
      <type></type>
      <name>Quaternion3f</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>afe2becc37c83bfb57703e1a95f6ac357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion3f</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a8784aba5e5c4bcdb0bbd675faae4fd1f</anchor>
      <arglist>(FCL_REAL a, FCL_REAL b, FCL_REAL c, FCL_REAL d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>aa0588748c969052e88b1be13d7325f68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromRotation</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a75e2eacdb9997f1111a65b7dbab784a0</anchor>
      <arglist>(const Matrix3f &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toRotation</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a5149ad9299c23ee72f5a24269715cdaa</anchor>
      <arglist>(Matrix3f &amp;R) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromEuler</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ab6e24753d13306e2927230e7fe5d8ddd</anchor>
      <arglist>(FCL_REAL a, FCL_REAL b, FCL_REAL c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toEuler</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a471d29cda76c1d0fb691ae663f1ed62f</anchor>
      <arglist>(FCL_REAL &amp;a, FCL_REAL &amp;b, FCL_REAL &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromAxes</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>aef88e5310c6064fbf035a15cdb65e9bd</anchor>
      <arglist>(const Vec3f axis[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toAxes</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a5d9db79af5a8a5cef2ce886a0420bb78</anchor>
      <arglist>(Vec3f axis[3]) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromAxisAngle</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a42202678336a95a1e029d613e464a15b</anchor>
      <arglist>(const Vec3f &amp;axis, FCL_REAL angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toAxisAngle</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a25d79fe179f991d32ff2cb22ac42bf3c</anchor>
      <arglist>(Vec3f &amp;axis, FCL_REAL &amp;angle) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>dot</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a486b7f963688c8f01e68d5a7d525c35d</anchor>
      <arglist>(const Quaternion3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>operator+</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a192967b27a78b2cd550781af6955ecc8</anchor>
      <arglist>(const Quaternion3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion3f &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>aa74092d1a8ad37c543481024579c433f</anchor>
      <arglist>(const Quaternion3f &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>operator-</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ade73a7d4f70434c2a1d62ee5779ce029</anchor>
      <arglist>(const Quaternion3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion3f &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ab7d13e023966d117f86a4bdf10539e12</anchor>
      <arglist>(const Quaternion3f &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>operator*</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a87b2de42eb776fe0d026598718390e3f</anchor>
      <arglist>(const Quaternion3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion3f &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a16deafd4bd7f110800cb0ef3445fe4fc</anchor>
      <arglist>(const Quaternion3f &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>operator-</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a2606a4d81a2951ffec838fb41b044189</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>operator*</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a972e958b25fa26e32b9a0b24654a5e7f</anchor>
      <arglist>(FCL_REAL t) const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion3f &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a2b1e40aaae61d94dbcd1823ca85499af</anchor>
      <arglist>(FCL_REAL t)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f &amp;</type>
      <name>conj</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a3851ac342e15a54ab3276f8d056080dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f &amp;</type>
      <name>inverse</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>abf34e44102d162f6ef6b456f896ce07c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>transform</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a080eb1edfc4abbc7b4346226d44bd33f</anchor>
      <arglist>(const Vec3f &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>const FCL_REAL &amp;</type>
      <name>getW</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>acc272cf7d0afddcb7ac891eeaae9e635</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FCL_REAL &amp;</type>
      <name>getX</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a99302315fbff8fc0475c5a1e1f41f106</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FCL_REAL &amp;</type>
      <name>getY</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a259467ee6d3ee8c37bfa93f2866a8fae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FCL_REAL &amp;</type>
      <name>getZ</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a04b2e9d1899b95695d527d28b6b25051</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>getW</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a9a5553667a361a9bffcbe83826a439c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>getX</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ad6f39e498229dd3e8bcbd51879e16a43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>getY</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a1227f1eab2f1b421aea5e6b740f0d281</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>getZ</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a4c244e83148c599b0bfcdfd72550deb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getColumn</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a383541f828a932deb077a28653b934f9</anchor>
      <arglist>(std::size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getRow</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a19a77c31bf93219d08ad3af176188477</anchor>
      <arglist>(std::size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>afe06a7f1979683194870a622b9b6a5e6</anchor>
      <arglist>(const Quaternion3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a1d92ed5fcd43f968abbb50d115834b2c</anchor>
      <arglist>(const Quaternion3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>operator[]</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>afa5b8f653485f816558797dbb991a700</anchor>
      <arglist>(std::size_t i) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion3f</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>afe2becc37c83bfb57703e1a95f6ac357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion3f</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a8784aba5e5c4bcdb0bbd675faae4fd1f</anchor>
      <arglist>(FCL_REAL a, FCL_REAL b, FCL_REAL c, FCL_REAL d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>aa0588748c969052e88b1be13d7325f68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromRotation</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a75e2eacdb9997f1111a65b7dbab784a0</anchor>
      <arglist>(const Matrix3f &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toRotation</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a5149ad9299c23ee72f5a24269715cdaa</anchor>
      <arglist>(Matrix3f &amp;R) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromEuler</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ab6e24753d13306e2927230e7fe5d8ddd</anchor>
      <arglist>(FCL_REAL a, FCL_REAL b, FCL_REAL c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toEuler</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a471d29cda76c1d0fb691ae663f1ed62f</anchor>
      <arglist>(FCL_REAL &amp;a, FCL_REAL &amp;b, FCL_REAL &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromAxes</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>aef88e5310c6064fbf035a15cdb65e9bd</anchor>
      <arglist>(const Vec3f axis[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toAxes</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a5d9db79af5a8a5cef2ce886a0420bb78</anchor>
      <arglist>(Vec3f axis[3]) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fromAxisAngle</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a42202678336a95a1e029d613e464a15b</anchor>
      <arglist>(const Vec3f &amp;axis, FCL_REAL angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toAxisAngle</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a25d79fe179f991d32ff2cb22ac42bf3c</anchor>
      <arglist>(Vec3f &amp;axis, FCL_REAL &amp;angle) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>dot</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a486b7f963688c8f01e68d5a7d525c35d</anchor>
      <arglist>(const Quaternion3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>operator+</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a192967b27a78b2cd550781af6955ecc8</anchor>
      <arglist>(const Quaternion3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion3f &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>aa74092d1a8ad37c543481024579c433f</anchor>
      <arglist>(const Quaternion3f &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>operator-</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ade73a7d4f70434c2a1d62ee5779ce029</anchor>
      <arglist>(const Quaternion3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion3f &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ab7d13e023966d117f86a4bdf10539e12</anchor>
      <arglist>(const Quaternion3f &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>operator*</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a87b2de42eb776fe0d026598718390e3f</anchor>
      <arglist>(const Quaternion3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion3f &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a16deafd4bd7f110800cb0ef3445fe4fc</anchor>
      <arglist>(const Quaternion3f &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>operator-</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a2606a4d81a2951ffec838fb41b044189</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>operator*</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a972e958b25fa26e32b9a0b24654a5e7f</anchor>
      <arglist>(FCL_REAL t) const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion3f &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a2b1e40aaae61d94dbcd1823ca85499af</anchor>
      <arglist>(FCL_REAL t)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f &amp;</type>
      <name>conj</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a3851ac342e15a54ab3276f8d056080dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f &amp;</type>
      <name>inverse</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>abf34e44102d162f6ef6b456f896ce07c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>transform</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a080eb1edfc4abbc7b4346226d44bd33f</anchor>
      <arglist>(const Vec3f &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>const FCL_REAL &amp;</type>
      <name>getW</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>acc272cf7d0afddcb7ac891eeaae9e635</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FCL_REAL &amp;</type>
      <name>getX</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a99302315fbff8fc0475c5a1e1f41f106</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FCL_REAL &amp;</type>
      <name>getY</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a259467ee6d3ee8c37bfa93f2866a8fae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FCL_REAL &amp;</type>
      <name>getZ</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a04b2e9d1899b95695d527d28b6b25051</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>getW</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a9a5553667a361a9bffcbe83826a439c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>getX</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ad6f39e498229dd3e8bcbd51879e16a43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>getY</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a1227f1eab2f1b421aea5e6b740f0d281</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>getZ</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a4c244e83148c599b0bfcdfd72550deb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getColumn</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a383541f828a932deb077a28653b934f9</anchor>
      <arglist>(std::size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getRow</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a19a77c31bf93219d08ad3af176188477</anchor>
      <arglist>(std::size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>afe06a7f1979683194870a622b9b6a5e6</anchor>
      <arglist>(const Quaternion3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a1d92ed5fcd43f968abbb50d115834b2c</anchor>
      <arglist>(const Quaternion3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>operator[]</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>afa5b8f653485f816558797dbb991a700</anchor>
      <arglist>(std::size_t i) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::remove_fcl</name>
    <filename>a00174.html</filename>
    <templarg>Derived</templarg>
    <member kind="typedef">
      <type>Derived</type>
      <name>type</name>
      <anchorfile>a00174.html</anchorfile>
      <anchor>a1a7f73e959cecbd8673ad6580958f96c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::remove_fcl&lt; const FclMatrix&lt; T, Col, Options &gt; &gt;</name>
    <filename>a00175.html</filename>
    <member kind="typedef">
      <type>FclMatrix&lt; T, Col, Options &gt;::Base</type>
      <name>type</name>
      <anchorfile>a00175.html</anchorfile>
      <anchor>a1cb3667e54c02e0b06f13419512f0618</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::remove_fcl&lt; const FclOp&lt; Derived &gt; &gt;</name>
    <filename>a00176.html</filename>
    <member kind="typedef">
      <type>Derived</type>
      <name>type</name>
      <anchorfile>a00176.html</anchorfile>
      <anchor>a29e177f762d9c7a880584e7fd7e8623d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::remove_fcl&lt; FclMatrix&lt; T, Col, Options &gt; &gt;</name>
    <filename>a00177.html</filename>
    <member kind="typedef">
      <type>FclMatrix&lt; T, Col, Options &gt;::Base</type>
      <name>type</name>
      <anchorfile>a00177.html</anchorfile>
      <anchor>a13c29c4aa86fa11813d5471429bcd5e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::remove_fcl&lt; FclOp&lt; Derived &gt; &gt;</name>
    <filename>a00178.html</filename>
    <member kind="typedef">
      <type>Derived</type>
      <name>type</name>
      <anchorfile>a00178.html</anchorfile>
      <anchor>a4ca786c28a47b808ba2cafd73b162409</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::RevoluteJoint</name>
    <filename>a00179.html</filename>
    <base>fcl::Joint</base>
    <member kind="function">
      <type></type>
      <name>RevoluteJoint</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a3ee6fdb87cfbc09ff3cb6200c73ebb82</anchor>
      <arglist>(const boost::shared_ptr&lt; Link &gt; &amp;link_parent, const boost::shared_ptr&lt; Link &gt; &amp;link_child, const Transform3f &amp;transform_to_parent, const std::string &amp;name, const Vec3f &amp;axis)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RevoluteJoint</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a8686674022da4f68d827e3b72f214d13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>getLocalTransform</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a7597736450f9352180c67ceab6e8e6a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNumDofs</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>aa4978afb0429bd3e74292e3f9b56674f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getAxis</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a17980de06e1822911718758b33ada850</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>axis_</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a8545ca352458712926b64552976a4462</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::RNG</name>
    <filename>a00180.html</filename>
    <member kind="function">
      <type></type>
      <name>RNG</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a073acea754b6b086f9851d0859adf6a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uniform01</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a6b2c50e5e98bfb0ff63901cad7b61b35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uniformReal</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>ab3bd3a35a9069cf5bd1e331a3aa33d1e</anchor>
      <arglist>(double lower_bound, double upper_bound)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>uniformInt</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a08a27c774bf0943436973f14a9311de7</anchor>
      <arglist>(int lower_bound, int upper_bound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uniformBool</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>abb3cab4f74db063f78021a892d0bbac3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gaussian01</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>ae877c0bce9315d53fc2814ad34c82954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gaussian</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>ad86ad089b207fcd798f8a08c52eae07c</anchor>
      <arglist>(double mean, double stddev)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>halfNormalReal</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a5ca3c79306c2a1ce39cbfe994b2e0d32</anchor>
      <arglist>(double r_min, double r_max, double focus=3.0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>halfNormalInt</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>af99ed0f582d8082362f4f241134f0e98</anchor>
      <arglist>(int r_min, int r_max, double focus=3.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quaternion</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a135635d7e11b38eca4dac39043f5279f</anchor>
      <arglist>(double value[4])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eulerRPY</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>ad5744c083fb08665248564014b1f834f</anchor>
      <arglist>(double value[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disk</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>abc7759cf6da91d2d81e061177362eb6c</anchor>
      <arglist>(double r_min, double r_max, double &amp;x, double &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ball</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a265cfde20829ce2e87f85499301f5d7b</anchor>
      <arglist>(double r_min, double r_max, double &amp;x, double &amp;y, double &amp;z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setSeed</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>ad06e452280e818f832d5272acc3320ef</anchor>
      <arglist>(boost::uint32_t seed)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static boost::uint32_t</type>
      <name>getSeed</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>af1769a2183abb7627cf0adc6f3723772</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::RSS</name>
    <filename>a00181.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a7b3b62bca646e428d74ed8a649ecbfd1</anchor>
      <arglist>(const RSS &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a12c6a0a39e35496d0408990ceb470fdc</anchor>
      <arglist>(const RSS &amp;, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a4c49ea1cdc2a22b71e329cd36d89ada4</anchor>
      <arglist>(const RSS &amp;other, RSS &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contain</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a1fa55487108cdcf6be91012069b8903a</anchor>
      <arglist>(const Vec3f &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RSS &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>ad67bbe5f1d3ca98e1790573a82a79010</anchor>
      <arglist>(const Vec3f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>RSS &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a9855d417af8113754d7827cd84efdbe1</anchor>
      <arglist>(const RSS &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RSS</type>
      <name>operator+</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>ab22936a90e98a6fb34390a6ae1f88c75</anchor>
      <arglist>(const RSS &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>width</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a9d09f4c97703ecf2a2e98ed5b8a71a29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>height</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a4d3c02836f0582cef4e511064ac8a692</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>depth</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a8eab1b80466b2eafd4b3750bda1bd88c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volume</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a613d9333f9b51686eda06dcb0f0fcddd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>size</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a0aa2b14ca9f5b7f59f9cb690378ead24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>center</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>aa5922767cb7a95978972d9f487b9d40f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>ad9d26e8dfb4f87920f328c1c4f63f4ab</anchor>
      <arglist>(const RSS &amp;other, Vec3f *P=NULL, Vec3f *Q=NULL) const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>axis</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a37a14f287548ea46457708b8afc20064</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>Tr</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a43da3aa02bd1727253e8bc045bbebdc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>l</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>abe12d0bb2ef3442b46d69f3d01a911b2</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>r</name>
      <anchorfile>a00181.html</anchorfile>
      <anchor>a1ff2b6b49523e0989020e1c8a88b9428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::SamplerBase</name>
    <filename>a00182.html</filename>
    <member kind="variable">
      <type>RNG</type>
      <name>rng</name>
      <anchorfile>a00182.html</anchorfile>
      <anchor>a973a252a11e649bbc0755a1f7d37ed76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::SamplerR</name>
    <filename>a00183.html</filename>
    <templarg>N</templarg>
    <base>fcl::SamplerBase</base>
    <member kind="function">
      <type></type>
      <name>SamplerR</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>af72b1fa2fdd8fc9fd36d407b72e54b4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SamplerR</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a0d7bbb436e6ff67952dc7e27bb843578</anchor>
      <arglist>(const Vecnf&lt; N &gt; &amp;lower_bound_, const Vecnf&lt; N &gt; &amp;upper_bound_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBound</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a7050030387cc034de4ffd4d7a7cfca79</anchor>
      <arglist>(const Vecnf&lt; N &gt; &amp;lower_bound_, const Vecnf&lt; N &gt; &amp;upper_bound_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBound</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a42aeceb7a782d2c932c5ced5815ca220</anchor>
      <arglist>(Vecnf&lt; N &gt; &amp;lower_bound_, Vecnf&lt; N &gt; &amp;upper_bound_) const </arglist>
    </member>
    <member kind="function">
      <type>Vecnf&lt; N &gt;</type>
      <name>sample</name>
      <anchorfile>a00183.html</anchorfile>
      <anchor>a03717ad57d24f92f0de99b74f9016e9c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::SamplerSE2</name>
    <filename>a00184.html</filename>
    <base>fcl::SamplerBase</base>
    <member kind="function">
      <type></type>
      <name>SamplerSE2</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a7da0a7ed1e5d021f04c6b98b51c26379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SamplerSE2</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a39b89fb337b6bb11c85279f98ab5cf91</anchor>
      <arglist>(const Vecnf&lt; 2 &gt; &amp;lower_bound_, const Vecnf&lt; 2 &gt; &amp;upper_bound_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SamplerSE2</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>afc1bfda2278659fda68ce2691843fd72</anchor>
      <arglist>(FCL_REAL x_min, FCL_REAL x_max, FCL_REAL y_min, FCL_REAL y_max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBound</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>ac5b4c993c313ade2e1dbe5a82f3e65fa</anchor>
      <arglist>(const Vecnf&lt; 2 &gt; &amp;lower_bound_, const Vecnf&lt; 2 &gt; &amp;upper_bound_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBound</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a27cb7a0390550eaa1582d06fb5ed291f</anchor>
      <arglist>(Vecnf&lt; 2 &gt; &amp;lower_bound_, Vecnf&lt; 2 &gt; &amp;upper_bound_) const </arglist>
    </member>
    <member kind="function">
      <type>Vecnf&lt; 3 &gt;</type>
      <name>sample</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a0bdb907780596f27ba3edc72a34122c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vecnf&lt; 2 &gt;</type>
      <name>lower_bound</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a93e56e4babbf759cab0257f63c3dc0a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vecnf&lt; 2 &gt;</type>
      <name>upper_bound</name>
      <anchorfile>a00184.html</anchorfile>
      <anchor>a596fcc872a926c4fc620f33a7826942c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::SamplerSE2_disk</name>
    <filename>a00185.html</filename>
    <base>fcl::SamplerBase</base>
    <member kind="function">
      <type></type>
      <name>SamplerSE2_disk</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a1ae61d4a232f340457c40a3a740ee6d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SamplerSE2_disk</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a1030cdd639914ecbaf21f9b11f271168</anchor>
      <arglist>(FCL_REAL cx, FCL_REAL cy, FCL_REAL r1, FCL_REAL r2, FCL_REAL crefx, FCL_REAL crefy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBound</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a247e115299e601f7547b6cf101275d3b</anchor>
      <arglist>(FCL_REAL cx, FCL_REAL cy, FCL_REAL r1, FCL_REAL r2, FCL_REAL crefx, FCL_REAL crefy)</arglist>
    </member>
    <member kind="function">
      <type>Vecnf&lt; 3 &gt;</type>
      <name>sample</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a87ce47a670c65a54719025e370dd29c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>c</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>af01bc3bbdb9d49196ab2e77089fcd343</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>cref</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>acc187840436cde315d55f61e743840d0</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>r_min</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ae8c8ade5957c0e6256389ae3f11f1735</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>r_max</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>a1656e56e7a4e619eae3fd4c266ad67d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::SamplerSE3Euler</name>
    <filename>a00186.html</filename>
    <base>fcl::SamplerBase</base>
    <member kind="function">
      <type></type>
      <name>SamplerSE3Euler</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a0d2965ffef2bd73434a2d078d6349d7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SamplerSE3Euler</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>ac3fc750179e51dac475c923af261509c</anchor>
      <arglist>(const Vecnf&lt; 3 &gt; &amp;lower_bound_, const Vecnf&lt; 3 &gt; &amp;upper_bound_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SamplerSE3Euler</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a04dd6e2ea91094ec8a4f10a5bf85dcc4</anchor>
      <arglist>(const Vec3f &amp;lower_bound_, const Vec3f &amp;upper_bound_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBound</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a615031ed759dffc52477968c288463f7</anchor>
      <arglist>(const Vecnf&lt; 3 &gt; &amp;lower_bound_, const Vecnf&lt; 3 &gt; &amp;upper_bound_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBound</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a43faab9e2f7120f2801fdc23eb042af5</anchor>
      <arglist>(const Vec3f &amp;lower_bound_, const Vec3f &amp;upper_bound_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBound</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>afb6f3c4255eac506d3859a8fa9dbef2d</anchor>
      <arglist>(Vecnf&lt; 3 &gt; &amp;lower_bound_, Vecnf&lt; 3 &gt; &amp;upper_bound_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBound</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a7b428c3be3fe90061e156964e3faaba6</anchor>
      <arglist>(Vec3f &amp;lower_bound_, Vec3f &amp;upper_bound_) const </arglist>
    </member>
    <member kind="function">
      <type>Vecnf&lt; 6 &gt;</type>
      <name>sample</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>aad214f9bc5b3669d51395458ebfbbbd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vecnf&lt; 3 &gt;</type>
      <name>lower_bound</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>a5846018a175db35bbb5044ca3a31c85b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vecnf&lt; 3 &gt;</type>
      <name>upper_bound</name>
      <anchorfile>a00186.html</anchorfile>
      <anchor>afee5fe300d24ce1dae11fae997353f06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::SamplerSE3Euler_ball</name>
    <filename>a00187.html</filename>
    <base>fcl::SamplerBase</base>
    <member kind="function">
      <type></type>
      <name>SamplerSE3Euler_ball</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>adfaca1517bdd12f19a95172249c2d574</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SamplerSE3Euler_ball</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a67e19059c719df01da594962e03e4cfa</anchor>
      <arglist>(FCL_REAL r_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBound</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>aa2dca78c162b70aa5e2cfc9ff84c3567</anchor>
      <arglist>(const FCL_REAL &amp;r_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBound</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a787962e8846ca804eae76d0473be8749</anchor>
      <arglist>(FCL_REAL &amp;r_) const </arglist>
    </member>
    <member kind="function">
      <type>Vecnf&lt; 6 &gt;</type>
      <name>sample</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a631ba566009fb2915bdb6392490ca2fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>r</name>
      <anchorfile>a00187.html</anchorfile>
      <anchor>a73a15d6b00c29956c279878c989c7a5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::SamplerSE3Quat</name>
    <filename>a00188.html</filename>
    <base>fcl::SamplerBase</base>
    <member kind="function">
      <type></type>
      <name>SamplerSE3Quat</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a69b143ff9b5e95356abce6f02c68c2a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SamplerSE3Quat</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a76bea29bb5a33079a6fd188555838ba5</anchor>
      <arglist>(const Vecnf&lt; 3 &gt; &amp;lower_bound_, const Vecnf&lt; 3 &gt; &amp;upper_bound_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SamplerSE3Quat</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>ab10e729dd315a1a7575537a19b7c8bbe</anchor>
      <arglist>(const Vec3f &amp;lower_bound_, const Vec3f &amp;upper_bound_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBound</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a11cd69048e98242dbaec55342cdfbeec</anchor>
      <arglist>(const Vecnf&lt; 3 &gt; &amp;lower_bound_, const Vecnf&lt; 3 &gt; &amp;upper_bound_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBound</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a8ddc350691c9ea0abfa928241ae8d994</anchor>
      <arglist>(const Vec3f &amp;lower_bound_, const Vec3f &amp;upper_bound_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBound</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a4d2506f1ae8f5d3a9ea831897ab1db4f</anchor>
      <arglist>(Vecnf&lt; 3 &gt; &amp;lower_bound_, Vecnf&lt; 3 &gt; &amp;upper_bound_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBound</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a1b355ef3d7af8d669e6e72318bc1a1ab</anchor>
      <arglist>(Vec3f &amp;lower_bound_, Vec3f &amp;upper_bound_) const </arglist>
    </member>
    <member kind="function">
      <type>Vecnf&lt; 7 &gt;</type>
      <name>sample</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a90fe8c52ada8ec6751c2cbc50da0f047</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vecnf&lt; 3 &gt;</type>
      <name>lower_bound</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a679446c419dfbf6e0e4304f3240099cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vecnf&lt; 3 &gt;</type>
      <name>upper_bound</name>
      <anchorfile>a00188.html</anchorfile>
      <anchor>a67ed256b8f3e9e394cdf8a59445331c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::SamplerSE3Quat_ball</name>
    <filename>a00189.html</filename>
    <base>fcl::SamplerBase</base>
    <member kind="function">
      <type></type>
      <name>SamplerSE3Quat_ball</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>afa2fe7afb04c0b35929cab789cfb54cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SamplerSE3Quat_ball</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a7add25d035d361ba43ebe0cd5577ddb6</anchor>
      <arglist>(FCL_REAL r_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBound</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a198a3c2c25b3758dc50b7a3395a13a58</anchor>
      <arglist>(const FCL_REAL &amp;r_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBound</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a545d1aa73a9b40c55db6b91586868b31</anchor>
      <arglist>(FCL_REAL &amp;r_) const </arglist>
    </member>
    <member kind="function">
      <type>Vecnf&lt; 7 &gt;</type>
      <name>sample</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>a32c0592879be1201444b9458788ad7d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>r</name>
      <anchorfile>a00189.html</anchorfile>
      <anchor>ad36fc53b03ddafea20aaeb0074c362ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::SaPCollisionManager::SaPAABB</name>
    <filename>a00190.html</filename>
    <member kind="variable">
      <type>CollisionObject *</type>
      <name>obj</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a084622166450113feb1be0ec20d6c4ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EndPoint *</type>
      <name>lo</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a36280b95dc7700dc49030cd842561d9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EndPoint *</type>
      <name>hi</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>ab470a2c7db1996b87276265dd6683207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AABB</type>
      <name>cached</name>
      <anchorfile>a00190.html</anchorfile>
      <anchor>a329b0311d354118afa2c77f504932350</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::SaPCollisionManager</name>
    <filename>a00191.html</filename>
    <base>fcl::BroadPhaseCollisionManager</base>
    <class kind="struct">fcl::SaPCollisionManager::EndPoint</class>
    <class kind="class">fcl::SaPCollisionManager::isNotValidPair</class>
    <class kind="class">fcl::SaPCollisionManager::isUnregistered</class>
    <class kind="struct">fcl::SaPCollisionManager::SaPAABB</class>
    <class kind="struct">fcl::SaPCollisionManager::SaPPair</class>
    <member kind="function">
      <type></type>
      <name>SaPCollisionManager</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ac702888b2c7eeddb01aa0a43e84b2aad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SaPCollisionManager</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>af01835c99d4b68f0a5de163ed10455ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObjects</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ab5d701781ed09c0ba4c36449e0512762</anchor>
      <arglist>(const std::vector&lt; CollisionObject * &gt; &amp;other_objs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObject</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>aa8448938edb5a64be6f0e89e7fec51ea</anchor>
      <arglist>(CollisionObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterObject</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a43ef9e6d4618e0a01ee90d4b86aa71c5</anchor>
      <arglist>(CollisionObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a22d24e02b3be94c4c9c93ef70d4b5eba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a64ae7f2adf32b1f83b935b021a26d60c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>af19e7040808ac30c9bd45ddc40c8393e</anchor>
      <arglist>(CollisionObject *updated_obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ae7eef65c6f3e3c14432facebd22eec4c</anchor>
      <arglist>(const std::vector&lt; CollisionObject * &gt; &amp;updated_objs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a93f124556e82b372e0dbd918f71bf391</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getObjects</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a4729ab1eb4e349b833256d8bfdc5c838</anchor>
      <arglist>(std::vector&lt; CollisionObject * &gt; &amp;objs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a9bed4e1d071277c84215e0e820b1f51e</anchor>
      <arglist>(CollisionObject *obj, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a5c8f3d75f1aea3a4448398b3efe2bc60</anchor>
      <arglist>(CollisionObject *obj, void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>aeebcb635ebdea60f9b448f7554bb2a27</anchor>
      <arglist>(void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ac164df95ff8c2b7e484977a50e600980</anchor>
      <arglist>(void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a2f4f5231e01aca26828a328fa465ad50</anchor>
      <arglist>(BroadPhaseCollisionManager *other_manager, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a33949925286d56a7b6a6cb72d2e2a314</anchor>
      <arglist>(BroadPhaseCollisionManager *other_manager, void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ab45c3eea9fbd4692ff80e1604122cc10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ac9c3cefe0e6337ac2af41862a4aa8014</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update_</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>ada8e6cabb31edc33e98f5ce01c31d203</anchor>
      <arglist>(SaPAABB *updated_aabb)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVelist</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a8c5ee36807a7bf9ecc46d18a854f8011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>distance_</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a0b10a9238708bed610830e35371c0095</anchor>
      <arglist>(CollisionObject *obj, void *cdata, DistanceCallBack callback, FCL_REAL &amp;min_dist) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>collide_</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a5cf600d4c8087621553a7caf223b8bfe</anchor>
      <arglist>(CollisionObject *obj, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addToOverlapPairs</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>adad73669a65be34d98a2b94f3f548115</anchor>
      <arglist>(const SaPPair &amp;p)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFromOverlapPairs</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>afee4a7daf1651fc445938d7d3dac85ff</anchor>
      <arglist>(const SaPPair &amp;p)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EndPoint *</type>
      <name>elist</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>aa964607e4d708795bd3156d8a0d02ae6</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; EndPoint * &gt;</type>
      <name>velist</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a77a80c607c4c207062ecfe475eb47ac3</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; SaPAABB * &gt;</type>
      <name>AABB_arr</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a180e19db4201115faa54213e127545a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; SaPPair &gt;</type>
      <name>overlap_pairs</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a0b9d6c250292f2f01b086d9e7deafb44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>optimal_axis</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>afbf184325de9c3487c1805d644babcb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; CollisionObject *, SaPAABB * &gt;</type>
      <name>obj_aabb_map</name>
      <anchorfile>a00191.html</anchorfile>
      <anchor>a262ba86ba77358ba923b6bd25f2b7ad7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::IntervalTreeCollisionManager::SAPInterval</name>
    <filename>a00192.html</filename>
    <base>fcl::SimpleInterval</base>
    <member kind="function">
      <type></type>
      <name>SAPInterval</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>aacf91303b91ba7cba575660fd42dc5a9</anchor>
      <arglist>(double low_, double high_, CollisionObject *obj_)</arglist>
    </member>
    <member kind="variable">
      <type>CollisionObject *</type>
      <name>obj</name>
      <anchorfile>a00192.html</anchorfile>
      <anchor>a62810df2406e78197222dbe58b0733cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::SaPCollisionManager::SaPPair</name>
    <filename>a00193.html</filename>
    <member kind="function">
      <type></type>
      <name>SaPPair</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a193a5c2e19896a22683c9794b10404cd</anchor>
      <arglist>(CollisionObject *a, CollisionObject *b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>af24197b012ec45c71bbe615812040583</anchor>
      <arglist>(const SaPPair &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>CollisionObject *</type>
      <name>obj1</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a9477f7e133f420ac4f9849462e4027d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CollisionObject *</type>
      <name>obj2</name>
      <anchorfile>a00193.html</anchorfile>
      <anchor>a942435089fd67a89e5c3eb5d0b68372b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::Scaler</name>
    <filename>a00194.html</filename>
    <templarg>N</templarg>
    <member kind="function">
      <type></type>
      <name>Scaler</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a07fa6adea0ddf13ca187e26c20ac77e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Scaler</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>acd2f5d0319f154b33dbd49c6d8dba03b</anchor>
      <arglist>(const Vecnf&lt; N &gt; &amp;v_min_, const Vecnf&lt; N &gt; &amp;v_max_)</arglist>
    </member>
    <member kind="function">
      <type>Vecnf&lt; N &gt;</type>
      <name>scale</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>ae1cd2f7c9e2fafc8fba3db06b49889ff</anchor>
      <arglist>(const Vecnf&lt; N &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vecnf&lt; N &gt;</type>
      <name>unscale</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>aa89bc1a1d622cbe16175a491700cbad8</anchor>
      <arglist>(const Vecnf&lt; N &gt; &amp;v) const </arglist>
    </member>
    <member kind="variable">
      <type>Vecnf&lt; N &gt;</type>
      <name>v_min</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>a8f6f5d491a464ec61c4fbcd82f036551</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vecnf&lt; N &gt;</type>
      <name>v_max</name>
      <anchorfile>a00194.html</anchorfile>
      <anchor>af8440756c66d18b5c637714dea813156</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::tools::Profiler::ScopedBlock</name>
    <filename>a00195.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedBlock</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>a3cd0ebdc1de9772a275cc07dfcbc812f</anchor>
      <arglist>(const std::string &amp;name, Profiler &amp;prof=Profiler::Instance())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedBlock</name>
      <anchorfile>a00195.html</anchorfile>
      <anchor>abd5185b0fcdd392313e47d1a429be71c</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::tools::Profiler::ScopedStart</name>
    <filename>a00196.html</filename>
    <member kind="function">
      <type></type>
      <name>ScopedStart</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a4f2bb333e36b2deea14dfeb7822dad48</anchor>
      <arglist>(Profiler &amp;prof=Profiler::Instance())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScopedStart</name>
      <anchorfile>a00196.html</anchorfile>
      <anchor>a4e048bee94028710e71d732557bb8af1</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ScrewMotion</name>
    <filename>a00197.html</filename>
    <base>fcl::MotionBase</base>
    <member kind="function">
      <type></type>
      <name>ScrewMotion</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a8beb71f8637f7a584bd8290c95edc85c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScrewMotion</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>aa79e3e018374a88d827019b739098b98</anchor>
      <arglist>(const Matrix3f &amp;R1, const Vec3f &amp;T1, const Matrix3f &amp;R2, const Vec3f &amp;T2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScrewMotion</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a02aaa1c960e4bee5bbca1eaa142185d8</anchor>
      <arglist>(const Transform3f &amp;tf1_, const Transform3f &amp;tf2_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>integrate</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>aa3ca0add5fd066a5239b883170391424</anchor>
      <arglist>(double dt) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeMotionBound</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a27b5508be6985a59e08f63f57e115854</anchor>
      <arglist>(const BVMotionBoundVisitor &amp;mb_visitor) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeMotionBound</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a255f1fcd0f58cc8bf474eba7f8302b3a</anchor>
      <arglist>(const TriangleMotionBoundVisitor &amp;mb_visitor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCurrentTransform</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a4fbce486696f5d969ae43f7771cc2779</anchor>
      <arglist>(Transform3f &amp;tf_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTaylorModel</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a8a015c09ae6e6f9c7943e3637a788642</anchor>
      <arglist>(TMatrix3 &amp;tm, TVector3 &amp;tv) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getLinearVelocity</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a12a0f67261ef2aae3f025e8415cdf2fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getAngularVelocity</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a95fe45474d770ee56b58ea0cda787fed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getAxis</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>ae75df156eddb3885f306bfca4fdca00e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getAxisOrigin</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>aa1937985627a2455249063d7f5320b85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeScrewParameter</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>aae3470ce5c5679f6b60d36116a91f70a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Quaternion3f</type>
      <name>deltaRotation</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>ac4f1b05056186e96ba921976ab164869</anchor>
      <arglist>(FCL_REAL dt) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Quaternion3f</type>
      <name>absoluteRotation</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>aaa29de53b8b7a43d67fdf9c9ada2e318</anchor>
      <arglist>(FCL_REAL dt) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Transform3f</type>
      <name>tf1</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a7c2d81b2b0738bb8484d0b881df45ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Transform3f</type>
      <name>tf2</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a46eaadf8d7252e399ceb8e90ff250b6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Transform3f</type>
      <name>tf</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a5520e712d47202b8ef15ff92558562c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>axis</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a18632a3066f555475e856b3ba7059ae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>p</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>ad8206865d561db1889d7f0e916493448</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>linear_vel</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>a2bec815e89d6d0a7dd2509e7150d43d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>angular_vel</name>
      <anchorfile>a00197.html</anchorfile>
      <anchor>afb49f075e994c37c9f23da6619509f9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeBase</name>
    <filename>a00198.html</filename>
    <base>fcl::CollisionGeometry</base>
    <member kind="function">
      <type></type>
      <name>ShapeBase</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>aa009170d24f92c2318aa8461776151b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OBJECT_TYPE</type>
      <name>getObjectType</name>
      <anchorfile>a00198.html</anchorfile>
      <anchor>acd11ebef3fd301e7d0a5cebd7fdde341</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeBVHCollisionTraversalNode</name>
    <filename>a00199.html</filename>
    <templarg>S</templarg>
    <templarg>BV</templarg>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeBVHCollisionTraversalNode</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a6d8459d5885944f867a6171df6a6da9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a047928816062b92b3d70fd5a5b1e39b2</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a50bb90059dd24c85f458801393b09bee</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a4b24fe525d7707f8088ea89a568d4b39</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>aa12bee3db3f30da0d8ee3a45cac3bdc9</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a6025df50846fda0e7635d97369543c01</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a4ae9d4be2d92c9b848ee86df3f8de9ff</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>af77f06078f0b8f4a3ff37e92eb0e831e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model2</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ad170db5b4dd0363b3f5074ac32b5b875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BV</type>
      <name>model1_bv</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>aa4aa4d82027f2a72ec8e73920ead66d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a9cb9a59e46cac2f19d90a31251d5e877</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ad125657ece0fb37e8ce01eecd014b163</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>af2c6c45308926567cebbe1d206895d1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBVHCollisionTraversalNode&lt; S, kIOS &gt;</name>
    <filename>a00199.html</filename>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeBVHCollisionTraversalNode</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a6d8459d5885944f867a6171df6a6da9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a047928816062b92b3d70fd5a5b1e39b2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a50bb90059dd24c85f458801393b09bee</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a4b24fe525d7707f8088ea89a568d4b39</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>aa12bee3db3f30da0d8ee3a45cac3bdc9</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a6025df50846fda0e7635d97369543c01</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a4ae9d4be2d92c9b848ee86df3f8de9ff</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>af77f06078f0b8f4a3ff37e92eb0e831e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; kIOS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ad170db5b4dd0363b3f5074ac32b5b875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>kIOS</type>
      <name>model1_bv</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>aa4aa4d82027f2a72ec8e73920ead66d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a9cb9a59e46cac2f19d90a31251d5e877</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ad125657ece0fb37e8ce01eecd014b163</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>af2c6c45308926567cebbe1d206895d1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBVHCollisionTraversalNode&lt; S, OBB &gt;</name>
    <filename>a00199.html</filename>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeBVHCollisionTraversalNode</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a6d8459d5885944f867a6171df6a6da9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a047928816062b92b3d70fd5a5b1e39b2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a50bb90059dd24c85f458801393b09bee</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a4b24fe525d7707f8088ea89a568d4b39</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>aa12bee3db3f30da0d8ee3a45cac3bdc9</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a6025df50846fda0e7635d97369543c01</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a4ae9d4be2d92c9b848ee86df3f8de9ff</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>af77f06078f0b8f4a3ff37e92eb0e831e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBB &gt; *</type>
      <name>model2</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ad170db5b4dd0363b3f5074ac32b5b875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBB</type>
      <name>model1_bv</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>aa4aa4d82027f2a72ec8e73920ead66d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a9cb9a59e46cac2f19d90a31251d5e877</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ad125657ece0fb37e8ce01eecd014b163</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>af2c6c45308926567cebbe1d206895d1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBVHCollisionTraversalNode&lt; S, OBBRSS &gt;</name>
    <filename>a00199.html</filename>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeBVHCollisionTraversalNode</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a6d8459d5885944f867a6171df6a6da9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a047928816062b92b3d70fd5a5b1e39b2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a50bb90059dd24c85f458801393b09bee</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a4b24fe525d7707f8088ea89a568d4b39</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>aa12bee3db3f30da0d8ee3a45cac3bdc9</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a6025df50846fda0e7635d97369543c01</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a4ae9d4be2d92c9b848ee86df3f8de9ff</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>af77f06078f0b8f4a3ff37e92eb0e831e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBBRSS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ad170db5b4dd0363b3f5074ac32b5b875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBBRSS</type>
      <name>model1_bv</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>aa4aa4d82027f2a72ec8e73920ead66d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a9cb9a59e46cac2f19d90a31251d5e877</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ad125657ece0fb37e8ce01eecd014b163</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>af2c6c45308926567cebbe1d206895d1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBVHCollisionTraversalNode&lt; S, RSS &gt;</name>
    <filename>a00199.html</filename>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeBVHCollisionTraversalNode</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a6d8459d5885944f867a6171df6a6da9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a047928816062b92b3d70fd5a5b1e39b2</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a50bb90059dd24c85f458801393b09bee</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a4b24fe525d7707f8088ea89a568d4b39</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>aa12bee3db3f30da0d8ee3a45cac3bdc9</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a6025df50846fda0e7635d97369543c01</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a4ae9d4be2d92c9b848ee86df3f8de9ff</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const</arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>af77f06078f0b8f4a3ff37e92eb0e831e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; RSS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ad170db5b4dd0363b3f5074ac32b5b875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RSS</type>
      <name>model1_bv</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>aa4aa4d82027f2a72ec8e73920ead66d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>a9cb9a59e46cac2f19d90a31251d5e877</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>ad125657ece0fb37e8ce01eecd014b163</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00199.html</anchorfile>
      <anchor>af2c6c45308926567cebbe1d206895d1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeBVHDistanceTraversalNode</name>
    <filename>a00200.html</filename>
    <templarg>S</templarg>
    <templarg>BV</templarg>
    <base>fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeBVHDistanceTraversalNode</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a24dd987849f07d6e4622b6343218ccd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a596edfc1e8ca7b8185ed1061b38ca270</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aa4524394c868057ac28e46ba748a425c</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a44314cafb40425d452e20ce691c15d5e</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a91b4b32c8fc269b1794a2e9285ba59df</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aa8c22d7a09d5adea74f927e6b2d0a0e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; BV &gt; *</type>
      <name>model2</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a52dfc02d56d333373b800bc1c7214f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BV</type>
      <name>model1_bv</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a9637b507e09e3f9cc00ab4b84de80ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a535b6340640821844b28b2178cbc19cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aee6a536fe77cb35ff1ef161326af4229</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aaead1f9c8b61738f0836d3a93230aca6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBVHDistanceTraversalNode&lt; S, kIOS &gt;</name>
    <filename>a00200.html</filename>
    <base>fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeBVHDistanceTraversalNode</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a24dd987849f07d6e4622b6343218ccd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a596edfc1e8ca7b8185ed1061b38ca270</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aa4524394c868057ac28e46ba748a425c</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a44314cafb40425d452e20ce691c15d5e</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a91b4b32c8fc269b1794a2e9285ba59df</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aa8c22d7a09d5adea74f927e6b2d0a0e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; kIOS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a52dfc02d56d333373b800bc1c7214f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>kIOS</type>
      <name>model1_bv</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a9637b507e09e3f9cc00ab4b84de80ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a535b6340640821844b28b2178cbc19cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aee6a536fe77cb35ff1ef161326af4229</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aaead1f9c8b61738f0836d3a93230aca6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBVHDistanceTraversalNode&lt; S, OBBRSS &gt;</name>
    <filename>a00200.html</filename>
    <base>fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeBVHDistanceTraversalNode</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a24dd987849f07d6e4622b6343218ccd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a596edfc1e8ca7b8185ed1061b38ca270</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aa4524394c868057ac28e46ba748a425c</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a44314cafb40425d452e20ce691c15d5e</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a91b4b32c8fc269b1794a2e9285ba59df</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aa8c22d7a09d5adea74f927e6b2d0a0e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; OBBRSS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a52dfc02d56d333373b800bc1c7214f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OBBRSS</type>
      <name>model1_bv</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a9637b507e09e3f9cc00ab4b84de80ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a535b6340640821844b28b2178cbc19cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aee6a536fe77cb35ff1ef161326af4229</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aaead1f9c8b61738f0836d3a93230aca6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeBVHDistanceTraversalNode&lt; S, RSS &gt;</name>
    <filename>a00200.html</filename>
    <base>fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeBVHDistanceTraversalNode</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a24dd987849f07d6e4622b6343218ccd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a596edfc1e8ca7b8185ed1061b38ca270</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aa4524394c868057ac28e46ba748a425c</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a44314cafb40425d452e20ce691c15d5e</anchor>
      <arglist>(int b) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a91b4b32c8fc269b1794a2e9285ba59df</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aa8c22d7a09d5adea74f927e6b2d0a0e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const BVHModel&lt; RSS &gt; *</type>
      <name>model2</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a52dfc02d56d333373b800bc1c7214f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RSS</type>
      <name>model1_bv</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a9637b507e09e3f9cc00ab4b84de80ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_bv_tests</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>a535b6340640821844b28b2178cbc19cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>num_leaf_tests</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aee6a536fe77cb35ff1ef161326af4229</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>query_time_seconds</name>
      <anchorfile>a00200.html</anchorfile>
      <anchor>aaead1f9c8b61738f0836d3a93230aca6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeCollisionTraversalNode</name>
    <filename>a00201.html</filename>
    <templarg>S1</templarg>
    <templarg>S2</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeCollisionTraversalNode</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a28136f43deefb3c36fdc41a19afa473a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a36d6cbee34932665767a9e5cbec5adfc</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>ab88b23e1a1420acd9e0935d78ff832c0</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>ae965e64d49993221c9bfa255460c1d6f</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="variable">
      <type>const S1 *</type>
      <name>model1</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a8c00b004af65cea45f600a7fe47de708</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S2 *</type>
      <name>model2</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a4acd53daf81c7e50699ec6bf2ed0112f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a84f3355dbe152097f875b7cb0d93250d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00201.html</anchorfile>
      <anchor>a798b68b65931a69f5eec38c057ab6d4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeConservativeAdvancementTraversalNode</name>
    <filename>a00202.html</filename>
    <templarg>S1</templarg>
    <templarg>S2</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::ShapeDistanceTraversalNode</base>
    <member kind="function">
      <type></type>
      <name>ShapeConservativeAdvancementTraversalNode</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>afcf7b9af7555781f89c68a154e1ec53b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a2b6a4d480b5dae93d8a0a2e0d1775c77</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>min_distance</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a77004ef064e0d490767e147a6a5ae925</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>toc</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a281ebb8601554e7d6873d9a320907143</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>t_err</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a431c0bca7155b961f4375561e60c5e16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>delta_t</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a90e8ce6435c82e3aa32861d6cea1bf9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion1</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a7ebd221b3a47d94f2e89053878b3ffc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion2</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a0d0fe5e972867c4d89826d6d0704501a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RSS</type>
      <name>model1_bv</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a08e8dae3c0fa839364b0cd04356666d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RSS</type>
      <name>model2_bv</name>
      <anchorfile>a00202.html</anchorfile>
      <anchor>a9e83bf333f68506b9e594c5e33fb234e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeDistanceTraversalNode</name>
    <filename>a00203.html</filename>
    <templarg>S1</templarg>
    <templarg>S2</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeDistanceTraversalNode</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>aa90af05ac9b8b306de244b3a6f8c6541</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a3dc0eaa4e174ef9e108aaa9be0098cfb</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ac55b44ede78e61b7e2504fc78cc4b168</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="variable">
      <type>const S1 *</type>
      <name>model1</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>ace7c0562b999cb3b43121c39d5b98f6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const S2 *</type>
      <name>model2</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a3607ecc5743706009e4d4498e4f7c31a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>a341125db13773aa42656058d9646aec6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeMeshCollisionTraversalNode</name>
    <filename>a00204.html</filename>
    <templarg>S</templarg>
    <templarg>BV</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::ShapeBVHCollisionTraversalNode</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshCollisionTraversalNode</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a37847843bb2bbdeb665ee4abde96d042</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a6a35e774375c8741d70827e94ed9c0fc</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a3c33e84ba6b0e8ac740cd84fa207ad12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a42282ecd9dda44e1f3bc50669f713730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ace6f594e5d8ced75c608e20b46033026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a18e18c0f74902fddd9f35617761dcb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a585f5c4626d40a9114baa17fffa85c2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshCollisionTraversalNode&lt; S, kIOS, NarrowPhaseSolver &gt;</name>
    <filename>a00204.html</filename>
    <base>ShapeBVHCollisionTraversalNode&lt; S, kIOS &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshCollisionTraversalNode</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a37847843bb2bbdeb665ee4abde96d042</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a6a35e774375c8741d70827e94ed9c0fc</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a3c33e84ba6b0e8ac740cd84fa207ad12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a42282ecd9dda44e1f3bc50669f713730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ace6f594e5d8ced75c608e20b46033026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a18e18c0f74902fddd9f35617761dcb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a585f5c4626d40a9114baa17fffa85c2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshCollisionTraversalNode&lt; S, OBB, NarrowPhaseSolver &gt;</name>
    <filename>a00204.html</filename>
    <base>ShapeBVHCollisionTraversalNode&lt; S, OBB &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshCollisionTraversalNode</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a37847843bb2bbdeb665ee4abde96d042</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a6a35e774375c8741d70827e94ed9c0fc</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a3c33e84ba6b0e8ac740cd84fa207ad12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a42282ecd9dda44e1f3bc50669f713730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ace6f594e5d8ced75c608e20b46033026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a18e18c0f74902fddd9f35617761dcb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a585f5c4626d40a9114baa17fffa85c2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshCollisionTraversalNode&lt; S, OBBRSS, NarrowPhaseSolver &gt;</name>
    <filename>a00204.html</filename>
    <base>ShapeBVHCollisionTraversalNode&lt; S, OBBRSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshCollisionTraversalNode</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a37847843bb2bbdeb665ee4abde96d042</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a6a35e774375c8741d70827e94ed9c0fc</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a3c33e84ba6b0e8ac740cd84fa207ad12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a42282ecd9dda44e1f3bc50669f713730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ace6f594e5d8ced75c608e20b46033026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a18e18c0f74902fddd9f35617761dcb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a585f5c4626d40a9114baa17fffa85c2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshCollisionTraversalNode&lt; S, RSS, NarrowPhaseSolver &gt;</name>
    <filename>a00204.html</filename>
    <base>ShapeBVHCollisionTraversalNode&lt; S, RSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshCollisionTraversalNode</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a37847843bb2bbdeb665ee4abde96d042</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a6a35e774375c8741d70827e94ed9c0fc</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a3c33e84ba6b0e8ac740cd84fa207ad12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a42282ecd9dda44e1f3bc50669f713730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>ace6f594e5d8ced75c608e20b46033026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>cost_density</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a18e18c0f74902fddd9f35617761dcb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00204.html</anchorfile>
      <anchor>a585f5c4626d40a9114baa17fffa85c2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeMeshCollisionTraversalNodekIOS</name>
    <filename>a00205.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>ShapeMeshCollisionTraversalNode&lt; S, kIOS, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshCollisionTraversalNodekIOS</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a1c6d61836d62046889002848905caf80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>af3d6dfcdabd3eca7a7b33ce069a37a01</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00205.html</anchorfile>
      <anchor>a3f9e052e08fc133bd1c740aafefe425e</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeMeshCollisionTraversalNodeOBB</name>
    <filename>a00206.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>ShapeMeshCollisionTraversalNode&lt; S, OBB, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshCollisionTraversalNodeOBB</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>adc3a88481efe68907bdf764aa88d31fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a8a5be557ff01402e61048321f4452413</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>ab13789c7de9917cdf00b99217c0ad1dc</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeMeshCollisionTraversalNodeOBBRSS</name>
    <filename>a00207.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>ShapeMeshCollisionTraversalNode&lt; S, OBBRSS, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshCollisionTraversalNodeOBBRSS</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a3f6fc7a6fe8f3d9b036402f52255a35b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>ac55e5315d2c61117feee6d8dfa76b566</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>a89b035f94f443704f1915eb48bff5e85</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00207.html</anchorfile>
      <anchor>ab3b2474997c99fd0d9c043f360ea66a9</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeMeshCollisionTraversalNodeRSS</name>
    <filename>a00208.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>ShapeMeshCollisionTraversalNode&lt; S, RSS, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshCollisionTraversalNodeRSS</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>ad5aec2c66ec54ae11801e8b188e88fe3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>a0443ee130ecd57944d25e093d2fe3ca6</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00208.html</anchorfile>
      <anchor>ae3ded376e665baa27ca26d8dcde50e45</anchor>
      <arglist>(int b1, int b2, FCL_REAL &amp;sqrDistLowerBound) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeMeshConservativeAdvancementTraversalNode</name>
    <filename>a00209.html</filename>
    <templarg>S</templarg>
    <templarg>BV</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::ShapeMeshDistanceTraversalNode</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshConservativeAdvancementTraversalNode</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a3bb988900fa531200080858190fffecd</anchor>
      <arglist>(FCL_REAL w_=1)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a9289b4e607211954a0b95ed8937c50dd</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>aa22d4e4ca6b0635d4370b4bc626758ea</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>aa11514d0f89b944e60d969dac63a2123</anchor>
      <arglist>(FCL_REAL c) const </arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>min_distance</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a92edbf2dc654cca5c270c2ae32e36127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>closest_p1</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>aa6e9d92554087dfa0e4b1ea9aea5ff68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>closest_p2</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ac12567584e9ec20bd9382ce129104213</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_tri_id</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ad168318f94b23a917c78ccfee04ec001</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>w</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ae2c7b43b77ca4f63d27537c14ef2bad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>toc</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a0aeaaca61b2a8c65957372cd579ff3de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>t_err</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a15150423ad09d6781e1b28d63bb1430e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>delta_t</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a5c8a14ab52da3866a1300fb1d0b95cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion1</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a67f7e0cae3fc5bf8467e0832be9b297c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion2</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ab6992ad6eb9dc03a014126a3eba90612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ConservativeAdvancementStackData &gt;</type>
      <name>stack</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>adcca691e07bb10e57d5cde3cd293d98b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshConservativeAdvancementTraversalNode&lt; S, OBBRSS, NarrowPhaseSolver &gt;</name>
    <filename>a00209.html</filename>
    <base>ShapeMeshDistanceTraversalNode&lt; S, OBBRSS, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshConservativeAdvancementTraversalNode</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a3bb988900fa531200080858190fffecd</anchor>
      <arglist>(FCL_REAL w_=1)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a9289b4e607211954a0b95ed8937c50dd</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>aa22d4e4ca6b0635d4370b4bc626758ea</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>aa11514d0f89b944e60d969dac63a2123</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>min_distance</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a92edbf2dc654cca5c270c2ae32e36127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>closest_p1</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>aa6e9d92554087dfa0e4b1ea9aea5ff68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>closest_p2</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ac12567584e9ec20bd9382ce129104213</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_tri_id</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ad168318f94b23a917c78ccfee04ec001</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>w</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ae2c7b43b77ca4f63d27537c14ef2bad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>toc</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a0aeaaca61b2a8c65957372cd579ff3de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>t_err</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a15150423ad09d6781e1b28d63bb1430e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>delta_t</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a5c8a14ab52da3866a1300fb1d0b95cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion1</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a67f7e0cae3fc5bf8467e0832be9b297c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion2</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ab6992ad6eb9dc03a014126a3eba90612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ConservativeAdvancementStackData &gt;</type>
      <name>stack</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>adcca691e07bb10e57d5cde3cd293d98b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshConservativeAdvancementTraversalNode&lt; S, RSS, NarrowPhaseSolver &gt;</name>
    <filename>a00209.html</filename>
    <base>ShapeMeshDistanceTraversalNode&lt; S, RSS, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshConservativeAdvancementTraversalNode</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a3bb988900fa531200080858190fffecd</anchor>
      <arglist>(FCL_REAL w_=1)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a9289b4e607211954a0b95ed8937c50dd</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>aa22d4e4ca6b0635d4370b4bc626758ea</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>aa11514d0f89b944e60d969dac63a2123</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>min_distance</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a92edbf2dc654cca5c270c2ae32e36127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>closest_p1</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>aa6e9d92554087dfa0e4b1ea9aea5ff68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>closest_p2</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ac12567584e9ec20bd9382ce129104213</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>last_tri_id</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ad168318f94b23a917c78ccfee04ec001</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>w</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ae2c7b43b77ca4f63d27537c14ef2bad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>toc</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a0aeaaca61b2a8c65957372cd579ff3de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>t_err</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a15150423ad09d6781e1b28d63bb1430e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>delta_t</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a5c8a14ab52da3866a1300fb1d0b95cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion1</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>a67f7e0cae3fc5bf8467e0832be9b297c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const MotionBase *</type>
      <name>motion2</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>ab6992ad6eb9dc03a014126a3eba90612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; ConservativeAdvancementStackData &gt;</type>
      <name>stack</name>
      <anchorfile>a00209.html</anchorfile>
      <anchor>adcca691e07bb10e57d5cde3cd293d98b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeMeshConservativeAdvancementTraversalNodeOBBRSS</name>
    <filename>a00210.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>ShapeMeshConservativeAdvancementTraversalNode&lt; S, OBBRSS, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshConservativeAdvancementTraversalNodeOBBRSS</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>ab9fbb9d76a75df9b2d8325017046f9ca</anchor>
      <arglist>(FCL_REAL w_=1)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>af5107bda8de0282dac52af250e1dcc91</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a014f9f59b5ade96f31e067c8bc7375d1</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00210.html</anchorfile>
      <anchor>a2ce88eccb2ee4c238d9f820ed57383cd</anchor>
      <arglist>(FCL_REAL c) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeMeshConservativeAdvancementTraversalNodeRSS</name>
    <filename>a00211.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>ShapeMeshConservativeAdvancementTraversalNode&lt; S, RSS, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshConservativeAdvancementTraversalNodeRSS</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a0800739057947b83c3f926d6e726bb0f</anchor>
      <arglist>(FCL_REAL w_=1)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a56597761b14857b64d723815ecdffa0a</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a56dfc097b8150245b077b180ce3e90b5</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00211.html</anchorfile>
      <anchor>a87406d213afdb4e3d9a4844eb65426a4</anchor>
      <arglist>(FCL_REAL c) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeMeshDistanceTraversalNode</name>
    <filename>a00212.html</filename>
    <templarg>S</templarg>
    <templarg>BV</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::ShapeBVHDistanceTraversalNode</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNode</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a1678f6a9d97ef1e337f90c95b795993b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ad09116e8dae37cc3c9507d20d4fd0bcd</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ac017aa30177e8cda855223d1cc381165</anchor>
      <arglist>(FCL_REAL c) const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a3487e85d3c96278e837fcc325fd4bbdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a4cfa3fd865581f56bdb4ef3c7c5e656d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a3873461ab631fcde28146455ae63153b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ac0d7e5a3d6e6f6843809b139e8766563</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a0bc487f92570cb06a2516fdbd14890ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshDistanceTraversalNode&lt; S, kIOS, NarrowPhaseSolver &gt;</name>
    <filename>a00212.html</filename>
    <base>ShapeBVHDistanceTraversalNode&lt; S, kIOS &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNode</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a1678f6a9d97ef1e337f90c95b795993b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ad09116e8dae37cc3c9507d20d4fd0bcd</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ac017aa30177e8cda855223d1cc381165</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a3487e85d3c96278e837fcc325fd4bbdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a4cfa3fd865581f56bdb4ef3c7c5e656d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a3873461ab631fcde28146455ae63153b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ac0d7e5a3d6e6f6843809b139e8766563</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a0bc487f92570cb06a2516fdbd14890ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshDistanceTraversalNode&lt; S, OBBRSS, NarrowPhaseSolver &gt;</name>
    <filename>a00212.html</filename>
    <base>ShapeBVHDistanceTraversalNode&lt; S, OBBRSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNode</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a1678f6a9d97ef1e337f90c95b795993b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ad09116e8dae37cc3c9507d20d4fd0bcd</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ac017aa30177e8cda855223d1cc381165</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a3487e85d3c96278e837fcc325fd4bbdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a4cfa3fd865581f56bdb4ef3c7c5e656d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a3873461ab631fcde28146455ae63153b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ac0d7e5a3d6e6f6843809b139e8766563</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a0bc487f92570cb06a2516fdbd14890ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ShapeMeshDistanceTraversalNode&lt; S, RSS, NarrowPhaseSolver &gt;</name>
    <filename>a00212.html</filename>
    <base>ShapeBVHDistanceTraversalNode&lt; S, RSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNode</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a1678f6a9d97ef1e337f90c95b795993b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ad09116e8dae37cc3c9507d20d4fd0bcd</anchor>
      <arglist>(int b1, int b2) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canStop</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ac017aa30177e8cda855223d1cc381165</anchor>
      <arglist>(FCL_REAL c) const</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f *</type>
      <name>vertices</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a3487e85d3c96278e837fcc325fd4bbdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Triangle *</type>
      <name>tri_indices</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a4cfa3fd865581f56bdb4ef3c7c5e656d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>rel_err</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a3873461ab631fcde28146455ae63153b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>abs_err</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>ac0d7e5a3d6e6f6843809b139e8766563</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const NarrowPhaseSolver *</type>
      <name>nsolver</name>
      <anchorfile>a00212.html</anchorfile>
      <anchor>a0bc487f92570cb06a2516fdbd14890ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeMeshDistanceTraversalNodekIOS</name>
    <filename>a00213.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>ShapeMeshDistanceTraversalNode&lt; S, kIOS, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNodekIOS</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>acef9eb6dcb76677d5ac6b67611600013</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a3c65993c18faf00cdb7f98b2b2376326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>afb70eac1e323e8d1808957b15a8f182f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>aa76dc6206a652f685577ceece8ce6800</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00213.html</anchorfile>
      <anchor>a09bd9329335d7579fdc9dba878b4eb6c</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeMeshDistanceTraversalNodeOBBRSS</name>
    <filename>a00214.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>ShapeMeshDistanceTraversalNode&lt; S, OBBRSS, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNodeOBBRSS</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>aa3447206f151aef3e55118904fd42134</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>ae5dd5874bda9536defc2a857e3022926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>ac93eac8bf77ec3533a9b816c1e26576a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>af146c352c11405802191190928ec3615</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00214.html</anchorfile>
      <anchor>aa1ac3745d9a6dbaf39808e858cb9e1f9</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeMeshDistanceTraversalNodeRSS</name>
    <filename>a00215.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>ShapeMeshDistanceTraversalNode&lt; S, RSS, NarrowPhaseSolver &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShapeMeshDistanceTraversalNodeRSS</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>afd6bb9c4ab18a98c95ccd8e7b04707e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preprocess</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a165d331a0efddefbcc7d1088fb0f175c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postprocess</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a062c114c593f3222ae1680382c14a9f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>aa0616d6d27592c8f00279c0cf4941ed0</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00215.html</anchorfile>
      <anchor>a83f90d7a3b873761f2d7f723aab12cb2</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeOcTreeCollisionTraversalNode</name>
    <filename>a00216.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::CollisionTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeOcTreeCollisionTraversalNode</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a2b9929a4ca69523807d256166fc4c48e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a1a520c212bf7292dad43118fcfa20d4a</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>BVTesting</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>ad7e3f1ae5d105683701ae070a9089fbd</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>aee6035468f84cb1a7c637b78299360a4</anchor>
      <arglist>(int, int, FCL_REAL &amp;) const </arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a708f7d4872ff1c9f06b8e944c709d036</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model2</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a16394222f214bcf83a7d3d817bc361e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf1</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a9c5b9100f7bd7f1dc2a150ecc1498fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf2</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a4f01d655a8c79e5957802946cbe0885a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00216.html</anchorfile>
      <anchor>a94a67afa5f8cc3c48d120cec617590e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::ShapeOcTreeDistanceTraversalNode</name>
    <filename>a00217.html</filename>
    <templarg>S</templarg>
    <templarg>NarrowPhaseSolver</templarg>
    <base>fcl::DistanceTraversalNodeBase</base>
    <member kind="function">
      <type></type>
      <name>ShapeOcTreeDistanceTraversalNode</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>afd98319a9b05a3e46151bdf53352e781</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>BVTesting</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>a478c12d147846b453093e6a63352a81e</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTesting</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>ace4986eb72fda68913761b0542f2b3f1</anchor>
      <arglist>(int, int) const </arglist>
    </member>
    <member kind="variable">
      <type>const S *</type>
      <name>model1</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>af1f6cd45ae398aeffc56aafe35b53205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTree *</type>
      <name>model2</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>ad665918e3b2459d1e7faf65bd591fc64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const OcTreeSolver&lt; NarrowPhaseSolver &gt; *</type>
      <name>otsolver</name>
      <anchorfile>a00217.html</anchorfile>
      <anchor>affa349247a0873a30a5de716f84de646</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::SimpleHashTable</name>
    <filename>a00218.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>SimpleHashTable</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>accf292278a8e4b6cfb5b6253efb7418d</anchor>
      <arglist>(const HashFnc &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a71e74ec87aea903be9d48a358a6c3b5d</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>af60f96014f174e1f8d8cf4423886b49f</anchor>
      <arglist>(Key key, Data value)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Data &gt;</type>
      <name>query</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a370774bd741c59c0995abbae88c03d00</anchor>
      <arglist>(Key key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a6f33ea87f42c5d77361234c87e73b90e</anchor>
      <arglist>(Key key, Data value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a7812487290314671170a637eed73a2ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Data &gt;</type>
      <name>Bin</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a4d0e0c9fcd2ef0fe1a880a597c323b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Bin &gt;</type>
      <name>table_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>aa84791b6ccef269bc9012050721b5f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HashFnc</type>
      <name>h_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a0568a35257a3310ab97cff2f1809e7d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>table_size_</name>
      <anchorfile>a00218.html</anchorfile>
      <anchor>a2626b8201256dab4c6ec8dae4782e871</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::SimpleInterval</name>
    <filename>a00219.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleInterval</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a20f47524f7a9ed8f36ceb4e1ec0247a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a5aaaa86ff6b2adc9417bbf0bbaaf56c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>low</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a031a7125f7466107e9e864f2094c0838</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>high</name>
      <anchorfile>a00219.html</anchorfile>
      <anchor>a65d077be1bcedf29b4bf8999b38282c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::GJK::Simplex</name>
    <filename>a00220.html</filename>
    <member kind="function">
      <type></type>
      <name>Simplex</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>ae574062fe1b18ff85716a954d436e9eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>SimplexV *</type>
      <name>c</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>aabeb4f5e52f687577e7f18a8d16f66b5</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>p</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>a6100a0d98f55bd1ca42fafd667a8aa39</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>rank</name>
      <anchorfile>a00220.html</anchorfile>
      <anchor>aa4d08abdb1ec9b1ab31f24404a19747f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::GJK::SimplexV</name>
    <filename>a00221.html</filename>
    <member kind="variable">
      <type>Vec3f</type>
      <name>d</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a42961de22d4d523037ae31e89bf18e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>w</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>a26b3a4f04f55d64b03e3bd67ec2518ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::SparseHashTable</name>
    <filename>a00222.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>TableT</templarg>
    <member kind="function">
      <type></type>
      <name>SparseHashTable</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a2f31a8313320d139851a21cea8b7b4ae</anchor>
      <arglist>(const HashFnc &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a3a8b1c39d19357682098b1eff8a79e2d</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>aa4bae6ca13dd81b431f66997072caaad</anchor>
      <arglist>(Key key, Data value)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Data &gt;</type>
      <name>query</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a78d74126aab804daabc47d30d31065de</anchor>
      <arglist>(Key key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ab9a5189ff5340ec420930ec96039a7a7</anchor>
      <arglist>(Key key, Data value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a84694ce8ebd5198b37f38dce39d53f0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; Data &gt;</type>
      <name>Bin</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a6752e6d83f8bd1719caaba1e106ea4cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>TableT&lt; size_t, Bin &gt;</type>
      <name>Table</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>af9470b59a73d15e684d2869e02ee6320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HashFnc</type>
      <name>h_</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>ad15cbc0bda1521bfafd6cc29684853a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Table</type>
      <name>table_</name>
      <anchorfile>a00222.html</anchorfile>
      <anchor>a7e4f3cc00036e58450d89fb650725a62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::SpatialHash</name>
    <filename>a00223.html</filename>
    <member kind="function">
      <type></type>
      <name>SpatialHash</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a6078e78114560239d42a9ac01351be68</anchor>
      <arglist>(const AABB &amp;scene_limit_, FCL_REAL cell_size_)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>operator()</name>
      <anchorfile>a00223.html</anchorfile>
      <anchor>a25e7fd1fdb8b00a057fc3c0c7aa0e365</anchor>
      <arglist>(const AABB &amp;aabb) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::SpatialHashingCollisionManager</name>
    <filename>a00224.html</filename>
    <templarg>HashTable</templarg>
    <base>fcl::BroadPhaseCollisionManager</base>
    <member kind="function">
      <type></type>
      <name>SpatialHashingCollisionManager</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>af851f39d90e3284fa3be097ae515fda0</anchor>
      <arglist>(FCL_REAL cell_size, const Vec3f &amp;scene_min, const Vec3f &amp;scene_max, unsigned int default_table_size=1000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SpatialHashingCollisionManager</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a3c4cb8c0e6f505ae5b2d5502077a6fe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObject</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>ab55ff6cd61738c0416f14a4dd59eaf38</anchor>
      <arglist>(CollisionObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterObject</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>ae3ae8d0a18aec89848f4ce9b0d65ea74</anchor>
      <arglist>(CollisionObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a5333994bc2e803ab3ad62f002c690688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>ab7de4a733d15f7e1f0339cb4e6b0bff6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a2c19bafacedd526db1b2490e83ae677a</anchor>
      <arglist>(CollisionObject *updated_obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>acd3ea76152fc4b07b47683b5a94ddad1</anchor>
      <arglist>(const std::vector&lt; CollisionObject * &gt; &amp;updated_objs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a87fba7aa407a433fdbe95be7bc033c4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getObjects</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>af47adb6933a6bd535243203c8dae4112</anchor>
      <arglist>(std::vector&lt; CollisionObject * &gt; &amp;objs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a81c4106e65c39e41ca5b07d8a5cfa1d7</anchor>
      <arglist>(CollisionObject *obj, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a162f05abed42e3b3f96eb77b28699058</anchor>
      <arglist>(CollisionObject *obj, void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a3e924b0101f4b2ea768bc3687d6aaaca</anchor>
      <arglist>(void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a06056fc0ba87317faae871348e6092c7</anchor>
      <arglist>(void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a04b6514a9b0d0212e077fa3f4cf58013</anchor>
      <arglist>(BroadPhaseCollisionManager *other_manager, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a223656eeb796ede1adda775bd7798f94</anchor>
      <arglist>(BroadPhaseCollisionManager *other_manager, void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>ad9d3611e054c4ba4702bda33fc9529d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>aed2945d8bbb402508e9fe235f42927f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeBound</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a84731ff6dce2b4ace804170118e8f16e</anchor>
      <arglist>(std::vector&lt; CollisionObject * &gt; &amp;objs, Vec3f &amp;l, Vec3f &amp;u)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>collide_</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a1d2086dabcf2c03d3da0baa6056a9d56</anchor>
      <arglist>(CollisionObject *obj, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>distance_</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>aa08c6efd66d33ea766a9411dde6920d0</anchor>
      <arglist>(CollisionObject *obj, void *cdata, DistanceCallBack callback, FCL_REAL &amp;min_dist) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; CollisionObject * &gt;</type>
      <name>objs</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a4741f161acdf7c84450ab831ec0fe395</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; CollisionObject * &gt;</type>
      <name>objs_outside_scene_limit</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a3ced2e65926377f343465670b528162a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AABB</type>
      <name>scene_limit</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a6dd24073c22ab8b992eb88b67621a88e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; CollisionObject *, AABB &gt;</type>
      <name>obj_aabb_map</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a82880d6bc8b481a44ce4f75f97363f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HashTable *</type>
      <name>hash_table</name>
      <anchorfile>a00224.html</anchorfile>
      <anchor>a323f1808b13aabb085a7341f40d45167</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Sphere</name>
    <filename>a00225.html</filename>
    <base>fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>Sphere</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>ad190848c7a9ec1d6b8b42784e070e472</anchor>
      <arglist>(FCL_REAL radius_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a5b726cb4710245cfd982d5316f808182</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>a1114c61a41a72938efd5e38cd835ee6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix3f</type>
      <name>computeMomentofInertia</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>adff448c58e2999f033f7c77624a92fbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeVolume</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>acf04d85c97d762d967ec2e9c5d54d3c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>FCL_REAL</type>
      <name>radius</name>
      <anchorfile>a00225.html</anchorfile>
      <anchor>aff26fde6e2162f9172c6c5e71327f48b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::SplineMotion</name>
    <filename>a00226.html</filename>
    <base>fcl::MotionBase</base>
    <member kind="function">
      <type></type>
      <name>SplineMotion</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>aa1653f3e5abb62a550f40b7f7a00ceff</anchor>
      <arglist>(const Vec3f &amp;Td0, const Vec3f &amp;Td1, const Vec3f &amp;Td2, const Vec3f &amp;Td3, const Vec3f &amp;Rd0, const Vec3f &amp;Rd1, const Vec3f &amp;Rd2, const Vec3f &amp;Rd3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineMotion</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a10e8082af059ff5df39c4ac0e151e5e0</anchor>
      <arglist>(const Matrix3f &amp;, const Vec3f &amp;, const Matrix3f &amp;, const Vec3f &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SplineMotion</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a16bab9c8f8978c13b7dafe269a4f4487</anchor>
      <arglist>(const Transform3f &amp;, const Transform3f &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>integrate</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a1a46f593a40ef7d763c8a00c7920e289</anchor>
      <arglist>(double dt) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeMotionBound</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a10b8fcface2881cb31a8a0813f124776</anchor>
      <arglist>(const BVMotionBoundVisitor &amp;mb_visitor) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeMotionBound</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a22fa36a9dfe60513d0c3f1e65f1dc807</anchor>
      <arglist>(const TriangleMotionBoundVisitor &amp;mb_visitor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCurrentTransform</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ab99aa69b680b50204e9d426ceec56f8b</anchor>
      <arglist>(Transform3f &amp;tf_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTaylorModel</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a76c821d14b6f9ef3b5e6889a3e7a6650</anchor>
      <arglist>(TMatrix3 &amp;tm, TVector3 &amp;tv) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeTBound</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a928fe76d5e4f6f91a4e5966f80496348</anchor>
      <arglist>(const Vec3f &amp;n) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeDWMax</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a07fd6272a667aa09e21876fc4d6109ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>getCurrentTime</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a19b696f879bc09ffcfd52be7d64a5a2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeSplineParameter</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>aa7cb46be38d65e58529828a125179ffd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FCL_REAL</type>
      <name>getWeight0</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ae40c7c02d3d4bc8b2ae6f8b8a9cad546</anchor>
      <arglist>(FCL_REAL t) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FCL_REAL</type>
      <name>getWeight1</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>afd662d6f3181426d05ccb5b0a6b6a361</anchor>
      <arglist>(FCL_REAL t) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FCL_REAL</type>
      <name>getWeight2</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a6923281970f32e64ca0654584bd28bd4</anchor>
      <arglist>(FCL_REAL t) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FCL_REAL</type>
      <name>getWeight3</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ae94823ed522387edfaae89f5d34b8fcd</anchor>
      <arglist>(FCL_REAL t) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>Td</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a058b59334ee2e6f89ee0df3ee8e046c2</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>Rd</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>acfaa718754a323264056c87083129d49</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>TA</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a2c64f6899143add05637819f998be44d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>TB</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ac110450257203dba08c1fbc40cbbfd3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>TC</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a5a92c3f8a7ebcb3367208746eafa56e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>RA</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a1d1232790b5dbc057c00cd31d6fba613</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>RB</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a38f58242a6c84e7bdb22907f9337d6d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>RC</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a0d3b9bd678afa698beccf3a2a3f1bc2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>Rd0Rd0</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ac285622612a70ed60fdbe246e6a73502</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>Rd0Rd1</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a8e89e466a55ce1e03e815d57500e0fc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>Rd0Rd2</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>acc26456bee61454fdd4508e844bf7a9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>Rd0Rd3</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ae93c84db5ff74550fb6ed7c0b3266725</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>Rd1Rd1</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ab201872aef6e6274eb257d99fb74fa8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>Rd1Rd2</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>ab206dcfe1d5012de88eb72371c3132c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>Rd1Rd3</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a9af96c569a997a35a4499cf688495d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>Rd2Rd2</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a049d8e058592b1a36777738767348297</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>Rd2Rd3</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a99529695581a103efedd59f415fa4889</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>Rd3Rd3</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a6b8c12fe72ad550a8046d0e744725a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Transform3f</type>
      <name>tf</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a4ab3ca11d7504505508ea6a8ec95c4d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FCL_REAL</type>
      <name>tf_t</name>
      <anchorfile>a00226.html</anchorfile>
      <anchor>a5e9011236f3c9b0d93587b4776b70d7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::SSaPCollisionManager</name>
    <filename>a00227.html</filename>
    <base>fcl::BroadPhaseCollisionManager</base>
    <member kind="function">
      <type></type>
      <name>SSaPCollisionManager</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ad8152897e66a22fce5267a2cee8be82e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerObject</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a93002e0fb18af6d06c18659fa39c6453</anchor>
      <arglist>(CollisionObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterObject</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a2f4712d9574d98899f9ae88cc7336f11</anchor>
      <arglist>(CollisionObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>aff848a282f0b639aee32c255bfbb818e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a1099e64dd2cf0d5e14ea7ff47d788af9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a5ff25862975cb284758d9c227561b827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getObjects</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a714815ac4de21449a1cec1f93f8a97d4</anchor>
      <arglist>(std::vector&lt; CollisionObject * &gt; &amp;objs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ab8c4babe2083a2dcf071f98029862da8</anchor>
      <arglist>(CollisionObject *obj, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a2f031eb5062b3bd0321055a3ea6c2e0b</anchor>
      <arglist>(CollisionObject *obj, void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ad33b6145ae0d43490f620af5ee5f1ea1</anchor>
      <arglist>(void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a090a5a12f09af201b04e331cd0b89e74</anchor>
      <arglist>(void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>aa9d5459f070bf153c131282168f84362</anchor>
      <arglist>(BroadPhaseCollisionManager *other_manager, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ac6d6079e8d7b94d2401a669c13c29918</anchor>
      <arglist>(BroadPhaseCollisionManager *other_manager, void *cdata, DistanceCallBack callback) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a24bc274b7122a4bfc73f9628ec251122</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>aaf84911592651e6b2e82c5185de44358</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkColl</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ad9b793a92b5d2ce5221f49db8a4c7b9e</anchor>
      <arglist>(std::vector&lt; CollisionObject * &gt;::const_iterator pos_start, std::vector&lt; CollisionObject * &gt;::const_iterator pos_end, CollisionObject *obj, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkDis</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a5e24573fc83c322f6120ecf65bc7dd72</anchor>
      <arglist>(std::vector&lt; CollisionObject * &gt;::const_iterator pos_start, std::vector&lt; CollisionObject * &gt;::const_iterator pos_end, CollisionObject *obj, void *cdata, DistanceCallBack callback, FCL_REAL &amp;min_dist) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>collide_</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>ab07ccb6944edebf79a50b82db757c3a5</anchor>
      <arglist>(CollisionObject *obj, void *cdata, CollisionCallBack callback) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>distance_</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a1d759a6d447f97ab8f56cf60252ebbee</anchor>
      <arglist>(CollisionObject *obj, void *cdata, DistanceCallBack callback, FCL_REAL &amp;min_dist) const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static size_t</type>
      <name>selectOptimalAxis</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a7c2f7897330bf13af8daff0a2e9e18d3</anchor>
      <arglist>(const std::vector&lt; CollisionObject * &gt; &amp;objs_x, const std::vector&lt; CollisionObject * &gt; &amp;objs_y, const std::vector&lt; CollisionObject * &gt; &amp;objs_z, std::vector&lt; CollisionObject * &gt;::const_iterator &amp;it_beg, std::vector&lt; CollisionObject * &gt;::const_iterator &amp;it_end)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; CollisionObject * &gt;</type>
      <name>objs_x</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>abc7f01126ed85f4c6fb43a69a621cbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; CollisionObject * &gt;</type>
      <name>objs_y</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a4e276d7925576fc5095943275d0003db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; CollisionObject * &gt;</type>
      <name>objs_z</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>a3d3ac29d9b9f99c55538fcad4f804178</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>setup_</name>
      <anchorfile>a00227.html</anchorfile>
      <anchor>adaa473749f12950ccfb5158ee8750f42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::sse_meta_d4</name>
    <filename>a00228.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>meta_type</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>ac0b3c5c1bba1fb2a9c73b7123c47237e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_d4</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a33d9ac7710f99c6b4fd381e13a6a2c0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_d4</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>ac8a249052b12520659dde25141c6db30</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_d4</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a69be574d2164e6b566fa46491bd81f77</anchor>
      <arglist>(double *px)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_d4</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a2eddd7770ccf7eef94877d21fd3c5cc9</anchor>
      <arglist>(__m128d x, __m128d y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_d4</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a05f221b843403871536f6249e0ff2c11</anchor>
      <arglist>(double x, double y, double z, double w=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a58645febce18d2e699331d08a43c481c</anchor>
      <arglist>(double x, double y, double z, double w=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a4470f8319c100f9f64685187611b7199</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a8ebf6109089f959c11f4175cf6732afe</anchor>
      <arglist>(__m128d x, __m128d y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>ac37274ffe120eefb3698f5089de13a36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>ubound</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a368034029b78981ff93acaad50f47e26</anchor>
      <arglist>(const sse_meta_d4 &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>lbound</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a3a9929b6f9ddb0be0223a36fc9c5ea8a</anchor>
      <arglist>(const sse_meta_d4 &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new[]</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a7e31d246712e7c7ea03da2d4ad8449ea</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete[]</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a5c04e059a92de91445116d9734cc1a29</anchor>
      <arglist>(void *x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a3c7aa5471105a5f1e83c5e8741e04585</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a8b7a3d5e0e305f39a04205a899dab012</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4</type>
      <name>operator+</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a948575e55d5ef6677e165690dd7968f6</anchor>
      <arglist>(const sse_meta_d4 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4</type>
      <name>operator-</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a7b5851509c04542449252577a69d4854</anchor>
      <arglist>(const sse_meta_d4 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4</type>
      <name>operator*</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a701ece623aeec7445728c1e8a55ac5fe</anchor>
      <arglist>(const sse_meta_d4 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4</type>
      <name>operator/</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a47d189b28a491d1fd84931d1bcdc5970</anchor>
      <arglist>(const sse_meta_d4 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a271c67de4495bb683766d82930d904c0</anchor>
      <arglist>(const sse_meta_d4 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a18a3e63251d5ce9175c00d4e1758f1fd</anchor>
      <arglist>(const sse_meta_d4 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>af7e61de147f09117a5193bee329e12c7</anchor>
      <arglist>(const sse_meta_d4 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a6f6d2c8f743ab9dcb3afe61ced4264da</anchor>
      <arglist>(const sse_meta_d4 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4</type>
      <name>operator+</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a5cd0dddd9e16e77d3bbc0323d14c6e29</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4</type>
      <name>operator-</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a48294e9ab3cddbfc8491235ebf315ae9</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4</type>
      <name>operator*</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a8a6ce66de2e713b5f8bf513adc1f6e91</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4</type>
      <name>operator/</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>afb21406fd1d4d1cf243de22b847e7b07</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>ab887abf3b60dbbaba6cb28fce54d368d</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a842d180093d89f6b3bb9c24cc7df0fc8</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>aeb529abdf4c31006f651addb3f99a32e</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4 &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a658714dfb7bafb6bab6bebdbffa463bc</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_d4</type>
      <name>operator-</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a3906f25170a6cd24b063cf8c7f29b00b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>vs</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>a8a42524e3b003780f71c925e8d9f3ad0</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>__m128d</type>
      <name>v</name>
      <anchorfile>a00228.html</anchorfile>
      <anchor>aaed410cfbcd246e06d63951d11586c94</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::sse_meta_f12</name>
    <filename>a00229.html</filename>
    <member kind="typedef">
      <type>float</type>
      <name>meta_type</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a61193f4e5a5ad63acc71b3bdd38b0c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sse_meta_f4</type>
      <name>vector_type</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a5bed5381126451d98b1ea6381361b3e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_f12</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a47ef959a811484ee6eda6121b98915dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_f12</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>aa815e8b77efc817b39f388c7627fb319</anchor>
      <arglist>(float xx, float xy, float xz, float yx, float yy, float yz, float zx, float zy, float zz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_f12</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>abcf69c957128fcf6096e96833ccebd2b</anchor>
      <arglist>(const sse_meta_f4 &amp;x, const sse_meta_f4 &amp;y, const sse_meta_f4 &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_f12</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a44e4b81f8b16de704d9ddf4e0ea86e2b</anchor>
      <arglist>(__m128 x, __m128 y, __m128 z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>ad9284b05d3f9173334c592b885e55ea7</anchor>
      <arglist>(float xx, float xy, float xz, float yx, float yy, float yz, float zx, float zy, float zz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>afb42c214e19ff84822dd9f9692169b99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a2fcec5ff157b3033e3170e283b88ab73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumn</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>aa758675c67f49d45a50b71e8f6ed92f7</anchor>
      <arglist>(const sse_meta_f4 &amp;x, const sse_meta_f4 &amp;y, const sse_meta_f4 &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumn</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>aa9d27208f6038e4d8da238edc73e91ea</anchor>
      <arglist>(__m128 x, __m128 y, __m128 z)</arglist>
    </member>
    <member kind="function">
      <type>const sse_meta_f4 &amp;</type>
      <name>getColumn</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>aa23c944785b6d65934a451080ba3d777</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>getColumn</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a8defe614b3a58e99313174a9880e07a3</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>getRow</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a95557c38dfcac93f82619526aef3864c</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>acee90f51fbd766967c4d912d681cee2c</anchor>
      <arglist>(size_t i, size_t j) const </arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>operator()</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a4b4da83a0cb1c13d1add9347f8fa50b5</anchor>
      <arglist>(size_t i, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator*</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>af949bd2a0fe520e1b4a6aeabdef3fb33</anchor>
      <arglist>(const sse_meta_f4 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12</type>
      <name>operator*</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>ab1978396b1750632ed851fc92c4004d3</anchor>
      <arglist>(const sse_meta_f12 &amp;mat) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12</type>
      <name>operator+</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a3c7da2eeeebf4b34be0e187582d2b182</anchor>
      <arglist>(const sse_meta_f12 &amp;mat) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12</type>
      <name>operator-</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a58758e492895f76d182c86b036985611</anchor>
      <arglist>(const sse_meta_f12 &amp;mat) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12</type>
      <name>operator+</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>af501351ee50dc27bca4b087628f8e256</anchor>
      <arglist>(float t_) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12</type>
      <name>operator-</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a66da250fa91459f3a9238c788056aaac</anchor>
      <arglist>(float t_) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12</type>
      <name>operator*</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a1943ac5195309a497fe2098b4ceb0ae9</anchor>
      <arglist>(float t_) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12</type>
      <name>operator/</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a6c129ea9fb26891610dd6ddc4c783216</anchor>
      <arglist>(float t_) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a52caeb0ea7e92955c0400c6e3b709607</anchor>
      <arglist>(const sse_meta_f12 &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12 &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a895f8c49be7ed471c64153298f1ac927</anchor>
      <arglist>(const sse_meta_f12 &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12 &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>aaaae8116427281cb817c704371c75669</anchor>
      <arglist>(const sse_meta_f12 &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12 &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a648fee0b7e297cae48d3bff1ae7a7ecb</anchor>
      <arglist>(float t_)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12 &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>aef0a6e96af97935215f77e2deb53877a</anchor>
      <arglist>(float t_)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a6b86d2050c6a4c161eeeb24b1952eaed</anchor>
      <arglist>(float t_)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12 &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a4c3c7cecc46e1e758b797ba7aa2f5fab</anchor>
      <arglist>(float t_)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12 &amp;</type>
      <name>inverse</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a2882377ac469ade9feb3f883cff8747a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12 &amp;</type>
      <name>transpose</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a1ef6f05758992c01922544a2951088ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12 &amp;</type>
      <name>abs</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a2e4d3d37e8230957f9f063be7e20cbc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>determinant</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a6c64d8d50f332177b453a630b4a24d1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12</type>
      <name>transposeTimes</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a97923b32ed771dd1c6b59d902aacfd98</anchor>
      <arglist>(const sse_meta_f12 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f12</type>
      <name>timesTranspose</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>ae6141363866cf35ea1b4027ba8b349a9</anchor>
      <arglist>(const sse_meta_f12 &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>transposeTimes</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a8690e52bcfecfa639e4056ce465e6958</anchor>
      <arglist>(const sse_meta_f4 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>transposeDot</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a6f02170f6241aec742909a49e2e91728</anchor>
      <arglist>(size_t i, const sse_meta_f4 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>dot</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>af69ba18d2fd90e86dcadeeb6c65d2390</anchor>
      <arglist>(size_t i, const sse_meta_f4 &amp;v) const </arglist>
    </member>
    <member kind="variable">
      <type>sse_meta_f4</type>
      <name>c</name>
      <anchorfile>a00229.html</anchorfile>
      <anchor>a3ee300c0e644ed8d332fe98170968323</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::sse_meta_f16</name>
    <filename>a00230.html</filename>
    <member kind="typedef">
      <type>float</type>
      <name>meta_type</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>aed7c21b5566dad57fc33c164fbaac794</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sse_meta_f4</type>
      <name>vector_type</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ad270272b991dd9ddb8b11ef1694bded5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_f16</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>af2709be29de26a90640e50b8b9d1413b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_f16</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>aa145d16c278cf39df762ffc8cb68a9e7</anchor>
      <arglist>(float xx, float xy, float xz, float xw, float yx, float yy, float yz, float yw, float zx, float zy, float zz, float zw, float wx, float wy, float wz, float ww)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_f16</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a2b15e41236cd251413fd3680831a38e2</anchor>
      <arglist>(const sse_meta_f4 &amp;x, const sse_meta_f4 &amp;y, const sse_meta_f4 &amp;z, const sse_meta_f4 &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_f16</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a03321e3eb74e0738e199460490299931</anchor>
      <arglist>(__m128 x, __m128 y, __m128 z, __m128 w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a9b0b08bbde6b4738e4c4a5c04ee0a8c6</anchor>
      <arglist>(float xx, float xy, float xz, float xw, float yx, float yy, float yz, float yw, float zx, float zy, float zz, float zw, float wx, float wy, float wz, float ww)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumn</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ab1d66425142388ba989befb16cef38a4</anchor>
      <arglist>(const sse_meta_f4 &amp;x, const sse_meta_f4 &amp;y, const sse_meta_f4 &amp;z, const sse_meta_f4 &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumn</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ab2b09096acca515a7ac781119b52487f</anchor>
      <arglist>(__m128 x, __m128 y, __m128 z, __m128 w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a8d9a2fcec8d473feb609668b9144eb13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a432dcc88274da897c6b07faaeb389cc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const sse_meta_f4 &amp;</type>
      <name>getColumn</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a3ff1cc06da87b1eac4bbeb7e7d046e17</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>getColumn</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a3df1d0793f38754c54f066531d0fa1f4</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>getRow</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a06ac0d2890e204d88c16ea44ffdce166</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a1a7e2a06c2f7455e47d0443f62b3b01e</anchor>
      <arglist>(size_t i, size_t j) const </arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>operator()</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ae41bd9f05d0c6ae571c393ab4a46d68b</anchor>
      <arglist>(size_t i, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator*</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ace616cbbaad9131882be290c48940cb1</anchor>
      <arglist>(const sse_meta_f4 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16</type>
      <name>operator*</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>af79eee915bcc958809f63ab6a1a74bef</anchor>
      <arglist>(const sse_meta_f16 &amp;mat) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16</type>
      <name>operator+</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a35da58fc06ceaa77e6f9c1b22692a7d7</anchor>
      <arglist>(const sse_meta_f16 &amp;mat) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16</type>
      <name>operator-</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>adb17803a262adb4ef2e4464a94a691e4</anchor>
      <arglist>(const sse_meta_f16 &amp;mat) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16</type>
      <name>operator+</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ae84d755f924eb14b160be4b3fdb2edf5</anchor>
      <arglist>(float t_) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16</type>
      <name>operator-</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a9fda42d0505c6d9996b619d070077a18</anchor>
      <arglist>(float t_) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16</type>
      <name>operator*</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a739beb759001c118d2961cd34a1ba8a7</anchor>
      <arglist>(float t_) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16</type>
      <name>operator/</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>af59b27cffc7f46017ff8bade02690795</anchor>
      <arglist>(float t_) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a857906fbed74ef1da102ca3a4719ac83</anchor>
      <arglist>(const sse_meta_f16 &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16 &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>aff1a2f0055ff3c60555ad0a9010deb51</anchor>
      <arglist>(const sse_meta_f16 &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16 &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a895f5f2820dec136352a556cd404ee70</anchor>
      <arglist>(const sse_meta_f16 &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16 &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a3ae23e4da878683d3432a5de7ed34b86</anchor>
      <arglist>(float t_)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16 &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a90711a009c8a37574d3060155258d8e8</anchor>
      <arglist>(float t_)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ac6962723438b8a132297a985c4023129</anchor>
      <arglist>(float t_)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16 &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ab4135bc3c1388272689f06adbb56c5c3</anchor>
      <arglist>(float t_)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16 &amp;</type>
      <name>abs</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a594756229224acf9f40968233d8782b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16 &amp;</type>
      <name>inverse</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a22f94d060a79b83b103c9a6c9f3b1f29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16 &amp;</type>
      <name>transpose</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a699492afdc65844257e47289f0bd86cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>determinant</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a5c558c84bab2ab7b3c297451976c37ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16</type>
      <name>transposeTimes</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a41304ba263506f789012be062f9ef3f0</anchor>
      <arglist>(const sse_meta_f16 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f16</type>
      <name>timesTranspose</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>af1c3e6b79e9221fa43e995860a4f0e0f</anchor>
      <arglist>(const sse_meta_f16 &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>transposeTimes</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a29e3ce5da1681c3cdea3d490bfab8640</anchor>
      <arglist>(const sse_meta_f4 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>transposeDot</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>af193adcc644824d7191a8ea5c495538a</anchor>
      <arglist>(size_t i, const sse_meta_f4 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>dot</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>a7a0f17feaff47ec331df39b1ef2264c6</anchor>
      <arglist>(size_t i, const sse_meta_f4 &amp;v) const </arglist>
    </member>
    <member kind="variable">
      <type>sse_meta_f4</type>
      <name>c</name>
      <anchorfile>a00230.html</anchorfile>
      <anchor>ae4e3151b9fb0880b45c4fd80fed5c49b</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::sse_meta_f4</name>
    <filename>a00231.html</filename>
    <member kind="typedef">
      <type>float</type>
      <name>meta_type</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>afb654aff9b19fcd66826d2903a5e3406</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_f4</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a15a015957b357cb5487b492e857fee8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_f4</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>aeb0094e2039e2e577309a6036c56fcd3</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_f4</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>ab2aac18881c2d7f254f90efb28f45897</anchor>
      <arglist>(float *px)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_f4</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a89d39fee8f48df225995d598683f4374</anchor>
      <arglist>(__m128 x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sse_meta_f4</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>ad1b4866f327aaa50e0dd14aa89f37f98</anchor>
      <arglist>(float x, float y, float z, float w=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a0ba769a293657a7d466864322796b4d3</anchor>
      <arglist>(float x, float y, float z, float w=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>acf74312df0dd950a8df434de32c9f133</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a18a544c5dfebcf736dcadb78911a4fb5</anchor>
      <arglist>(__m128 x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a2dc3abdc7438cd5f6330ec0e30b1e1ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>ubound</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a64df5278ef67eae1008db9272bdb57b9</anchor>
      <arglist>(const sse_meta_f4 &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>lbound</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>aab71fc655392165f3b74cb6d3dbec900</anchor>
      <arglist>(const sse_meta_f4 &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>operator new[]</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a7d53f06e298e382a01b9bfcc5b9d36e6</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator delete[]</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a3e4423ace7b602251dabfd8a38d16a07</anchor>
      <arglist>(void *x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator[]</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a515df22106d3005f3e6e0c6679376eac</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>float &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a231dd32c4d5bd674ebf58833bd5cf34c</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator+</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>af8b6c034b7eef8b75f559316c1db6821</anchor>
      <arglist>(const sse_meta_f4 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator-</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>aa7ebe3d2a3824e1836c9a1fcb2e4507b</anchor>
      <arglist>(const sse_meta_f4 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator*</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a53524de2cab6ee331f05d8ad56492555</anchor>
      <arglist>(const sse_meta_f4 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator/</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a1de8567c6cc40ebe11795847cd1eac18</anchor>
      <arglist>(const sse_meta_f4 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a3cfb9942d55a175377a52dc02d234f14</anchor>
      <arglist>(const sse_meta_f4 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a0cba891b42917780f40223961fe33ca8</anchor>
      <arglist>(const sse_meta_f4 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a096701e9743c2f4cd540f1227f2ce644</anchor>
      <arglist>(const sse_meta_f4 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a63229a65ecba429e4070e362f85c77c0</anchor>
      <arglist>(const sse_meta_f4 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator+</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>aa75ca426530b63020a8d4537ed91aefb</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator-</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a23ddbc0f639900087612d8b2f42293f7</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator*</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>ac34cba6800e55755acf894aa683d991c</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator/</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>af1e3c2155ea7b8d8908e54f2e2654eca</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>ae2cb3705e0d6519edf91a636cc7684ce</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>ab4e56554df3794c99b3a333a979165f1</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>aa69b3ef0f62d9e2113da8b0548aaa405</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4 &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a9a76234ff54c55916b3ac56a7e3209e0</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>sse_meta_f4</type>
      <name>operator-</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a46b5d7741c9f8dcc08ce62c5bd3a50d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>vs</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>a88f45f4c511bd023f2621d2407eba22d</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>__m128</type>
      <name>v</name>
      <anchorfile>a00231.html</anchorfile>
      <anchor>af938c2ce3e6637979caf4ad4f1c85434</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::SVMClassifier</name>
    <filename>a00232.html</filename>
    <templarg>N</templarg>
    <member kind="function">
      <type></type>
      <name>~SVMClassifier</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>ac6a809417e0102d8dd822bdcf4231168</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PredictResult</type>
      <name>predict</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>abee831f21bd0dda57f324d39fe91147c</anchor>
      <arglist>(const Vecnf&lt; N &gt; &amp;q) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; PredictResult &gt;</type>
      <name>predict</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a4b2a16fcb2b8c71835e19c3d3b0922ec</anchor>
      <arglist>(const std::vector&lt; Vecnf&lt; N &gt; &gt; &amp;qs) const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; Item&lt; N &gt; &gt;</type>
      <name>getSupportVectors</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a21c27acd1584f1dc6c8ac52f65228321</anchor>
      <arglist>() const  =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setScaler</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a248f440700771c8343378251fe473714</anchor>
      <arglist>(const Scaler&lt; N &gt; &amp;scaler)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>learn</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>a357fcd684fdbc48dfa98245c73db23d3</anchor>
      <arglist>(const std::vector&lt; Item&lt; N &gt; &gt; &amp;data)=0</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>error_rate</name>
      <anchorfile>a00232.html</anchorfile>
      <anchor>aa90dfb33decba2c76c2c3f79a663e840</anchor>
      <arglist>(const std::vector&lt; Item&lt; N &gt; &gt; &amp;data) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::TaylorModel</name>
    <filename>a00233.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setTimeInterval</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aea29d2cca8e7cc7b7c187da24fcdb203</anchor>
      <arglist>(FCL_REAL l, FCL_REAL r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeInterval</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a55c5c0487cfdb22ab445e990e3e2d0f7</anchor>
      <arglist>(const boost::shared_ptr&lt; TimeInterval &gt; &amp;time_interval)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; TimeInterval &gt; &amp;</type>
      <name>getTimeInterval</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a669eed0a9271529a5d634918f2d8c9ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>coeff</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a4989481af9e91aacc3800b3ec8c081be</anchor>
      <arglist>(std::size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>coeff</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>ab543e3924403c3a02c22c261da7840fa</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const Interval &amp;</type>
      <name>remainder</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aefc5dbd5cdec8202e1cdff383e0999ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Interval &amp;</type>
      <name>remainder</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>af9bca64e8bcedaba3704bf8e7316ee95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaylorModel</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>afa59e27e6d168d8448b1581603e3af6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaylorModel</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aa40d68f2d3a72d0f4f4368a3c14194e4</anchor>
      <arglist>(const boost::shared_ptr&lt; TimeInterval &gt; &amp;time_interval)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaylorModel</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a223ec446cce6fa97d5eae6c4c11d2d84</anchor>
      <arglist>(FCL_REAL coeff, const boost::shared_ptr&lt; TimeInterval &gt; &amp;time_interval)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaylorModel</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a1abf9a6e0e3231aa3925ef1598e4604f</anchor>
      <arglist>(FCL_REAL coeffs[3], const Interval &amp;r, const boost::shared_ptr&lt; TimeInterval &gt; &amp;time_interval)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TaylorModel</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a1960a96ec3381619d292da58abacfd03</anchor>
      <arglist>(FCL_REAL c0, FCL_REAL c1, FCL_REAL c2, FCL_REAL c3, const Interval &amp;r, const boost::shared_ptr&lt; TimeInterval &gt; &amp;time_interval)</arglist>
    </member>
    <member kind="function">
      <type>TaylorModel</type>
      <name>operator+</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>af8fcdd06710ed125b559a329d467150e</anchor>
      <arglist>(const TaylorModel &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>TaylorModel &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>ace7547e65f5c1250e370cc7740ce6050</anchor>
      <arglist>(const TaylorModel &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TaylorModel</type>
      <name>operator-</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aa66e47265953425280a22d0932481ff2</anchor>
      <arglist>(const TaylorModel &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>TaylorModel &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a092cb4357e1356c6e4a2aebadae911ed</anchor>
      <arglist>(const TaylorModel &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TaylorModel</type>
      <name>operator+</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a765b3b93e19ee02f5f9ca1e795ba8f10</anchor>
      <arglist>(FCL_REAL d) const </arglist>
    </member>
    <member kind="function">
      <type>TaylorModel &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a7bd35baa5498b329bc872256736d5ca0</anchor>
      <arglist>(FCL_REAL d)</arglist>
    </member>
    <member kind="function">
      <type>TaylorModel</type>
      <name>operator-</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>ad3919cfe2a5bfad91cf6a7b89b86c2ea</anchor>
      <arglist>(FCL_REAL d) const </arglist>
    </member>
    <member kind="function">
      <type>TaylorModel &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a225cf79c234d4b3c56114d8666b815a5</anchor>
      <arglist>(FCL_REAL d)</arglist>
    </member>
    <member kind="function">
      <type>TaylorModel</type>
      <name>operator*</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a3b15214a594cf511ddeeeb108fb45ef5</anchor>
      <arglist>(const TaylorModel &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>TaylorModel</type>
      <name>operator*</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>af5bbe4ade5d1b58ea10dac1578c50826</anchor>
      <arglist>(FCL_REAL d) const </arglist>
    </member>
    <member kind="function">
      <type>TaylorModel &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a7ca4589183f8c13e1103a30dc484eb7e</anchor>
      <arglist>(const TaylorModel &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TaylorModel &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a04f7c25e986c7285f9a80cfa08ba2fdd</anchor>
      <arglist>(FCL_REAL d)</arglist>
    </member>
    <member kind="function">
      <type>TaylorModel</type>
      <name>operator-</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>ae98a51256f89af5f1a958ff49e578056</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a65a32dbb51cbf1579e133992fc5efab0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Interval</type>
      <name>getBound</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aaa532b4748cdbf94778f54a73b3993fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Interval</type>
      <name>getBound</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a858eedeac3d98da370db58d977365aa6</anchor>
      <arglist>(FCL_REAL l, FCL_REAL r) const </arglist>
    </member>
    <member kind="function">
      <type>Interval</type>
      <name>getTightBound</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a6d6a33b0e72f84173cc170b5b44a9b13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Interval</type>
      <name>getTightBound</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aed3c8888f72e9662c0cab0bae08cc645</anchor>
      <arglist>(FCL_REAL l, FCL_REAL r) const </arglist>
    </member>
    <member kind="function">
      <type>Interval</type>
      <name>getBound</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>a80ac945f2c4a70c3e7c1ad85ccc67978</anchor>
      <arglist>(FCL_REAL t) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>aa0a82ad77a377ac435637062f3e72cff</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::TaylorReturnType</name>
    <filename>a00234.html</filename>
    <templarg>Col</templarg>
  </compound>
  <compound kind="struct">
    <name>fcl::TaylorReturnType&lt; 1 &gt;</name>
    <filename>a00235.html</filename>
    <member kind="typedef">
      <type>TVector3</type>
      <name>type</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>a9644dd43b196535a833c49a35b622ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec3f</type>
      <name>eigen_type</name>
      <anchorfile>a00235.html</anchorfile>
      <anchor>ad0436a6625a7f1592caa031648b0d077</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::TaylorReturnType&lt; 3 &gt;</name>
    <filename>a00236.html</filename>
    <member kind="typedef">
      <type>TMatrix3</type>
      <name>type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ae4574c17029881fe9077e27aad1cb130</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix3f</type>
      <name>eigen_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ae7b71baa705bd51e64b11cfb1fa5be3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::TBVMotionBoundVisitor</name>
    <filename>a00237.html</filename>
    <templarg>BV</templarg>
    <base>fcl::BVMotionBoundVisitor</base>
    <member kind="function">
      <type></type>
      <name>TBVMotionBoundVisitor</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a005e5eac46002acc3aaba11f9cc258d7</anchor>
      <arglist>(const BV &amp;bv_, const Vec3f &amp;n_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ac84e030bda226853d9e81ee71bb13f3b</anchor>
      <arglist>(const MotionBase &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a1b1ed3b9524124438aaab0636cc1d3e1</anchor>
      <arglist>(const SplineMotion &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a873ce01a933dbd9cb4f2088b9e78b68e</anchor>
      <arglist>(const ScrewMotion &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a64d498ba8678ce82a55e1c9dc863a241</anchor>
      <arglist>(const InterpMotion &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a69ac8700e28e1fd3a24d71477d521131</anchor>
      <arglist>(const TranslationMotion &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ab38a4ec7dea64653aa7a5ef37b77786d</anchor>
      <arglist>(const SplineMotion &amp;motion) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>aab305684e5821b604cd153e9e2db32d2</anchor>
      <arglist>(const ScrewMotion &amp;motion) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a49e5a6dc5713a326ae281fc336d68a26</anchor>
      <arglist>(const InterpMotion &amp;motion) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a7caa532671fe9952f8b66a856a9e68de</anchor>
      <arglist>(const TranslationMotion &amp;motion) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BV</type>
      <name>bv</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a94b6af3643c9c9ae43b2650a7afa2d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>n</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>a711d1ba5cd96a56143928285f2971880</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::TimeInterval</name>
    <filename>a00238.html</filename>
    <member kind="function">
      <type></type>
      <name>TimeInterval</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>acbcc3f660cc55b40bc32fb5e74c8eb5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeInterval</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>a284f74934415dbd4f138b3e4fd3608fc</anchor>
      <arglist>(FCL_REAL l, FCL_REAL r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>a425558083546565de75a66dade193d99</anchor>
      <arglist>(FCL_REAL l, FCL_REAL r)</arglist>
    </member>
    <member kind="variable">
      <type>Interval</type>
      <name>t_</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>a0a3eb1d4186935854dc2e7cba3cb735d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Interval</type>
      <name>t2_</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>ae74e27262cb7b66ea415a673fbc724e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Interval</type>
      <name>t3_</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>aadb5002de921e73bd9e04fa1ffc654f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Interval</type>
      <name>t4_</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>a8fe8da8859d9fe5be21f6c330aba2344</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Interval</type>
      <name>t5_</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>aa402abba0cdaf390d96db1ef1081dffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Interval</type>
      <name>t6_</name>
      <anchorfile>a00238.html</anchorfile>
      <anchor>aece3e85b6144229e34a93b0c814dd81d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::TMatrix3</name>
    <filename>a00239.html</filename>
    <member kind="function">
      <type></type>
      <name>TMatrix3</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a48fc65a83483665b468e29a14a188647</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix3</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a418eef8d5f90c6c39d5c739c8c6441e1</anchor>
      <arglist>(const boost::shared_ptr&lt; TimeInterval &gt; &amp;time_interval)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix3</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a051e69171cbf178408d281d7546c6689</anchor>
      <arglist>(TaylorModel m[3][3])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix3</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a72553f2e36a215062e520ed41635fdcb</anchor>
      <arglist>(const TVector3 &amp;v1, const TVector3 &amp;v2, const TVector3 &amp;v3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TMatrix3</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a1fe098a9e561c6b5503ead566e81b89a</anchor>
      <arglist>(const Matrix3f &amp;m, const boost::shared_ptr&lt; TimeInterval &gt; &amp;time_interval)</arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>getColumn</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a1b64aeb768656598b75a4643c9225159</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>const TVector3 &amp;</type>
      <name>getRow</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a84374eaeca1f8e2006fdf8d5f54ebd98</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>const TaylorModel &amp;</type>
      <name>operator()</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>ae2fe7a5fe0eaf1e8f1de14caa85736ac</anchor>
      <arglist>(size_t i, size_t j) const </arglist>
    </member>
    <member kind="function">
      <type>TaylorModel &amp;</type>
      <name>operator()</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>afea0e08880cec528d22ce22eb1c39548</anchor>
      <arglist>(size_t i, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>operator*</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a46e9304387bf971515f6c8ed5a8b37d4</anchor>
      <arglist>(const Vec3f &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>operator*</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a0604a3dc10c3d1282fa23fe2d315b4e2</anchor>
      <arglist>(const TVector3 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator*</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a02448d06540683c7dd9341fb349a3643</anchor>
      <arglist>(const Matrix3f &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator*</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>abf92ed069d0603bf84bcf8a687bd4b49</anchor>
      <arglist>(const TMatrix3 &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator*</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a6a2ed2987f4ab7aa0b7024678a6c17b3</anchor>
      <arglist>(const TaylorModel &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator*</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>af4ad6887152b2638ab746e5425e9459f</anchor>
      <arglist>(FCL_REAL d) const </arglist>
    </member>
    <member kind="function">
      <type>TMatrix3 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a6d28be267d6bfd494a8df759bd41f4cc</anchor>
      <arglist>(const Matrix3f &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a6ffc6fd19d86505dff1df09d07ea46f8</anchor>
      <arglist>(const TMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a0175e45bdfc502e9d262861dfd0515ca</anchor>
      <arglist>(const TaylorModel &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a13a752e0f0d2ec108e8d24b9d9b9c917</anchor>
      <arglist>(FCL_REAL d)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator+</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a196a743503b498d7380fbdb5b6cd6228</anchor>
      <arglist>(const TMatrix3 &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>TMatrix3 &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a4345843974dbf457c85f5001eda65196</anchor>
      <arglist>(const TMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator+</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a3c78bf26b45e3e914cc14722dbc44e08</anchor>
      <arglist>(const Matrix3f &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>TMatrix3 &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>af78ebeac10ad148dec00a9950509ec03</anchor>
      <arglist>(const Matrix3f &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator-</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a64b6ceda434501533a6a3364c77c3d06</anchor>
      <arglist>(const TMatrix3 &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>TMatrix3 &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>acb43baa6d623de7654d4ec80af50c863</anchor>
      <arglist>(const TMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator-</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a60f1d22f07e86c37420e37c5fef673fe</anchor>
      <arglist>(const Matrix3f &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>TMatrix3 &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a29d6cfe49a9a095670c8b4eac6d8a48c</anchor>
      <arglist>(const Matrix3f &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator-</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>affc51f7b07accb4b903431340d4d870c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IMatrix3</type>
      <name>getBound</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a946ec218fc8e9fce6b3496babe3c2e00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IMatrix3</type>
      <name>getBound</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a2a8a338cfa9b09507ea1c2e9f656bf62</anchor>
      <arglist>(FCL_REAL l, FCL_REAL r) const </arglist>
    </member>
    <member kind="function">
      <type>IMatrix3</type>
      <name>getBound</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a902c899ef92b790bb37af540cf74e64a</anchor>
      <arglist>(FCL_REAL t) const </arglist>
    </member>
    <member kind="function">
      <type>IMatrix3</type>
      <name>getTightBound</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a5cb3b64ff3a359ea9067ec21d7876b97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IMatrix3</type>
      <name>getTightBound</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a392bc276635be8067d43a9190138c052</anchor>
      <arglist>(FCL_REAL l, FCL_REAL r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a54c24081ad6a1b8ffac6f25f8e81dd9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a192caaa099eb8eb152f6709659283a56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a6eef53d8f30a2e0f3847582970b2617b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>diameter</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a6d7ee29d92c6ebd37ecdd7b849cbae75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeInterval</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>af7afd25f28cff0de3d7cac0d7b020821</anchor>
      <arglist>(const boost::shared_ptr&lt; TimeInterval &gt; &amp;time_interval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeInterval</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>aac4f7e3e55a185489424090f91607ec0</anchor>
      <arglist>(FCL_REAL l, FCL_REAL r)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; TimeInterval &gt; &amp;</type>
      <name>getTimeInterval</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a7857f98812b4b2a2f76351c16a034ea6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TMatrix3 &amp;</type>
      <name>rotationConstrain</name>
      <anchorfile>a00239.html</anchorfile>
      <anchor>a961db09fd6ce6e4952c1ef661421ba92</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::traits&lt; FclMatrix&lt; T, Cols, _Options &gt; &gt;</name>
    <filename>a00240.html</filename>
    <templarg></templarg>
    <templarg>Cols</templarg>
    <templarg>_Options</templarg>
  </compound>
  <compound kind="struct">
    <name>Eigen::internal::traits&lt; FclOp&lt; T &gt; &gt;</name>
    <filename>a00241.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>fcl::Transform3f</name>
    <filename>a00242.html</filename>
    <member kind="typedef">
      <type>Eigen::Quaternion&lt; FCL_REAL &gt;</type>
      <name>Quat_t</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a57e53fa86b8e32d3ce56db11a96fc641</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>ab1e340f7c84492b19eb6577a8b8482f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a1be16e62d4233999dae260ae47137aa3</anchor>
      <arglist>(const Matrix3f &amp;R_, const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>ac283dbb06eb53b0db70c9ec495f8ff46</anchor>
      <arglist>(const Quaternion3f &amp;q_, const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a0e09ab79b5e8c336d7f0d906be08f56e</anchor>
      <arglist>(const Quat_t &amp;q_, const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a104c9d0be65254d831ee14be994b0a1f</anchor>
      <arglist>(const Matrix3f &amp;R_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a0a2a5a66bafc70ca3637ae10e73b6288</anchor>
      <arglist>(const Quaternion3f &amp;q_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a5df45e082c58a57c3087d1d67b9bb598</anchor>
      <arglist>(const Quat_t &amp;q_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>acd6b1f11f5ef8c22f85c305f482663fb</anchor>
      <arglist>(const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>ad0b6ce80a5cf4e198eaed4d5bef1f6b7</anchor>
      <arglist>(const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>Transform3f &amp;</type>
      <name>operator=</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>afb1372b5555dab8bfe0f8f6735ea2334</anchor>
      <arglist>(const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getTranslation</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>aac7490bd60bb3ac78fac6b53b2c1885a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getRotation</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>aac5870f67f6a6a08d9a1c4bb41452611</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>getQuatRotation</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>af23b515e9ae66ba655844d2009218b29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Quat_t &amp;</type>
      <name>getQuat</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>aa05b4192be366a1eb747a2a78a5ab40c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>ab85d8feae6b2cdf86c636558538fe35b</anchor>
      <arglist>(const Matrix3f &amp;R_, const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a40f541b9e603c3a049079f6f8b367beb</anchor>
      <arglist>(const Quaternion3f &amp;q_, const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a5ba4d087c9409664764b822ba0fb09a0</anchor>
      <arglist>(const Matrix3f &amp;R_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTranslation</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a592c5a4e30f721a5c8f52ba81d4cd060</anchor>
      <arglist>(const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuatRotation</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a44b01ba0730e96f3ce21a34a9535f789</anchor>
      <arglist>(const Quaternion3f &amp;q_)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>transform</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>ac607ba6acd3eb52dff074be61b4b9f80</anchor>
      <arglist>(const Vec3f &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Transform3f &amp;</type>
      <name>inverse</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a5a6790c7c79af6da7892e0511d7f7808</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>inverseTimes</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a32a9b5733a20761f7cc959a1e031a02f</anchor>
      <arglist>(const Transform3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>aec400321f11cffa24fb610ce50ce4509</anchor>
      <arglist>(const Transform3f &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>operator*</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a5937ce91c2533a97d00099d3671a869b</anchor>
      <arglist>(const Transform3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>acd3c732653aed11db00f9283f398e47d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a619a785e5e9898342571f2088e6c7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a5b10903a890d26452496f7b472deba0f</anchor>
      <arglist>(const Transform3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a19ea4de00b24ba207dac0a790468fe3b</anchor>
      <arglist>(const Transform3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>ab1e340f7c84492b19eb6577a8b8482f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a1be16e62d4233999dae260ae47137aa3</anchor>
      <arglist>(const Matrix3f &amp;R_, const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>ac283dbb06eb53b0db70c9ec495f8ff46</anchor>
      <arglist>(const Quaternion3f &amp;q_, const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a104c9d0be65254d831ee14be994b0a1f</anchor>
      <arglist>(const Matrix3f &amp;R_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a0a2a5a66bafc70ca3637ae10e73b6288</anchor>
      <arglist>(const Quaternion3f &amp;q_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>acd6b1f11f5ef8c22f85c305f482663fb</anchor>
      <arglist>(const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform3f</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>ad0b6ce80a5cf4e198eaed4d5bef1f6b7</anchor>
      <arglist>(const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>Transform3f &amp;</type>
      <name>operator=</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>afb1372b5555dab8bfe0f8f6735ea2334</anchor>
      <arglist>(const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getTranslation</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>aac7490bd60bb3ac78fac6b53b2c1885a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix3f &amp;</type>
      <name>getRotation</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>aac5870f67f6a6a08d9a1c4bb41452611</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion3f &amp;</type>
      <name>getQuatRotation</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>ac6cbff668d801dd4a4dee8b2cd0cc5c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>ab85d8feae6b2cdf86c636558538fe35b</anchor>
      <arglist>(const Matrix3f &amp;R_, const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a40f541b9e603c3a049079f6f8b367beb</anchor>
      <arglist>(const Quaternion3f &amp;q_, const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a5ba4d087c9409664764b822ba0fb09a0</anchor>
      <arglist>(const Matrix3f &amp;R_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTranslation</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a592c5a4e30f721a5c8f52ba81d4cd060</anchor>
      <arglist>(const Vec3f &amp;T_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuatRotation</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a44b01ba0730e96f3ce21a34a9535f789</anchor>
      <arglist>(const Quaternion3f &amp;q_)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>transform</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>ac607ba6acd3eb52dff074be61b4b9f80</anchor>
      <arglist>(const Vec3f &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Transform3f &amp;</type>
      <name>inverse</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a5a6790c7c79af6da7892e0511d7f7808</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>inverseTimes</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a32a9b5733a20761f7cc959a1e031a02f</anchor>
      <arglist>(const Transform3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>const Transform3f &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>aec400321f11cffa24fb610ce50ce4509</anchor>
      <arglist>(const Transform3f &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>operator*</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a5937ce91c2533a97d00099d3671a869b</anchor>
      <arglist>(const Transform3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>acd3c732653aed11db00f9283f398e47d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a619a785e5e9898342571f2088e6c7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a5b10903a890d26452496f7b472deba0f</anchor>
      <arglist>(const Transform3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00242.html</anchorfile>
      <anchor>a19ea4de00b24ba207dac0a790468fe3b</anchor>
      <arglist>(const Transform3f &amp;other) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::TranslationMotion</name>
    <filename>a00243.html</filename>
    <base>fcl::MotionBase</base>
    <member kind="function">
      <type></type>
      <name>TranslationMotion</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>aafe62ddde1affea24aa69010777193a7</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TranslationMotion</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ad8482d61ae30ef7dd1eb0821081177ee</anchor>
      <arglist>(const Matrix3f &amp;R, const Vec3f &amp;T1, const Vec3f &amp;T2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>integrate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>a446951431f89fc64447a56c572a19ec2</anchor>
      <arglist>(FCL_REAL dt) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeMotionBound</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>a358941b889249c57591bdca589daabe2</anchor>
      <arglist>(const BVMotionBoundVisitor &amp;mb_visitor) const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>computeMotionBound</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>aa3bf6bcf6d1ae0da8c209e506e688baa</anchor>
      <arglist>(const TriangleMotionBoundVisitor &amp;mb_visitor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCurrentTransform</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>a31dfa3d4a972b77a2013ff5cdc2077ca</anchor>
      <arglist>(Transform3f &amp;tf_) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTaylorModel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>a01d3e67eccd19fc662beb51b348d074c</anchor>
      <arglist>(TMatrix3 &amp;, TVector3 &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getVelocity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>aa155b5069b85584a85e0f20abf2ce097</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::TraversalNodeBase</name>
    <filename>a00244.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TraversalNodeBase</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a484f148cc652f1d9e5aae4fcdbca462a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preprocess</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ade79ed1fed716aa4d347497ca2f28057</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postprocess</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>afe0bf9cb99359645b0cb8e4977a85142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFirstNodeLeaf</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>afa243f16105adc69e328e5cd892f751f</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSecondNodeLeaf</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a0afe5950e202f168431e8f84f08e5892</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>firstOverSecond</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a458cca6179e5da43c881546b34441a6b</anchor>
      <arglist>(int b1, int b2) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getFirstLeftChild</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a27f60712354d15e7d397d7d83d9ce951</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getFirstRightChild</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a79bb275ade683395011986aa55bf303b</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSecondLeftChild</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>a786995222e91e6dc6272b7d283ac4d96</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSecondRightChild</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>af0f04983f89250da7a9d5555bef09c71</anchor>
      <arglist>(int b) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enableStatistics</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>af2181f7444f5a8e6c413ecb6e7064ad8</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf1</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ae87a61eefc6252f3429d1c9aa4e059fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Transform3f</type>
      <name>tf2</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>aaef4bcf549ea74b55522ce2f41e38e02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Triangle</name>
    <filename>a00245.html</filename>
    <member kind="function">
      <type></type>
      <name>Triangle</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>a0b11b36f4ddd2d0da7c085b01acc308f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Triangle</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ae8c4f9dc275a12b6e0ee2adeb648f027</anchor>
      <arglist>(std::size_t p1, std::size_t p2, std::size_t p3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>a46b3a079aeeaef0590b4e6fe63fe3fc2</anchor>
      <arglist>(std::size_t p1, std::size_t p2, std::size_t p3)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator[]</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>aaafdeb1248028b2bca269effbab5f4df</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>a6410315b8e323e37deb639228e0c862c</anchor>
      <arglist>(int i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::TriangleDistance</name>
    <filename>a00246.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>segPoints</name>
      <anchorfile>a00246.html</anchorfile>
      <anchor>a6e739a46b128211e5aca4ec46672ab5a</anchor>
      <arglist>(const Vec3f &amp;P, const Vec3f &amp;A, const Vec3f &amp;Q, const Vec3f &amp;B, Vec3f &amp;VEC, Vec3f &amp;X, Vec3f &amp;Y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FCL_REAL</type>
      <name>sqrTriDistance</name>
      <anchorfile>a00246.html</anchorfile>
      <anchor>adf3cce328f0bfe20e1e82261e47f7d53</anchor>
      <arglist>(const Vec3f S[3], const Vec3f T[3], Vec3f &amp;P, Vec3f &amp;Q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FCL_REAL</type>
      <name>sqrTriDistance</name>
      <anchorfile>a00246.html</anchorfile>
      <anchor>ac24a70641531303c78e754f142f0245c</anchor>
      <arglist>(const Vec3f &amp;S1, const Vec3f &amp;S2, const Vec3f &amp;S3, const Vec3f &amp;T1, const Vec3f &amp;T2, const Vec3f &amp;T3, Vec3f &amp;P, Vec3f &amp;Q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FCL_REAL</type>
      <name>sqrTriDistance</name>
      <anchorfile>a00246.html</anchorfile>
      <anchor>ad8f71c8de77176fcbba74fe17ef71793</anchor>
      <arglist>(const Vec3f S[3], const Vec3f T[3], const Matrix3f &amp;R, const Vec3f &amp;Tl, Vec3f &amp;P, Vec3f &amp;Q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FCL_REAL</type>
      <name>sqrTriDistance</name>
      <anchorfile>a00246.html</anchorfile>
      <anchor>a58d1687ec2cd4cc18a572e881119ff63</anchor>
      <arglist>(const Vec3f S[3], const Vec3f T[3], const Transform3f &amp;tf, Vec3f &amp;P, Vec3f &amp;Q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FCL_REAL</type>
      <name>sqrTriDistance</name>
      <anchorfile>a00246.html</anchorfile>
      <anchor>a4dd12eac439c5a75f19d424fbe066454</anchor>
      <arglist>(const Vec3f &amp;S1, const Vec3f &amp;S2, const Vec3f &amp;S3, const Vec3f &amp;T1, const Vec3f &amp;T2, const Vec3f &amp;T3, const Matrix3f &amp;R, const Vec3f &amp;Tl, Vec3f &amp;P, Vec3f &amp;Q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FCL_REAL</type>
      <name>sqrTriDistance</name>
      <anchorfile>a00246.html</anchorfile>
      <anchor>a85fac1bb5474c8316ea10ee24d27d947</anchor>
      <arglist>(const Vec3f &amp;S1, const Vec3f &amp;S2, const Vec3f &amp;S3, const Vec3f &amp;T1, const Vec3f &amp;T2, const Vec3f &amp;T3, const Transform3f &amp;tf, Vec3f &amp;P, Vec3f &amp;Q)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::TriangleMotionBoundVisitor</name>
    <filename>a00247.html</filename>
    <member kind="function">
      <type></type>
      <name>TriangleMotionBoundVisitor</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>a71cb9617250de3557f4475e34b693784</anchor>
      <arglist>(const Vec3f &amp;a_, const Vec3f &amp;b_, const Vec3f &amp;c_, const Vec3f &amp;n_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>ad8b3da5b9555f89b7972186f15aea5c8</anchor>
      <arglist>(const MotionBase &amp;) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>af056cf5628fd5e779b938e00a21f6780</anchor>
      <arglist>(const SplineMotion &amp;motion) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>a7b0c1069baec3ebc2026770cf2d3a642</anchor>
      <arglist>(const ScrewMotion &amp;motion) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>a180824d885b69746ee0ff5db03a72872</anchor>
      <arglist>(const InterpMotion &amp;motion) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FCL_REAL</type>
      <name>visit</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>aaa0b8fdbe9320d1338bbeac333f8cd3f</anchor>
      <arglist>(const TranslationMotion &amp;motion) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>a</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>ad54a10226405524ecd6c567edb715e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>b</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>ae34762ae5949cad8531661ffff6b89fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>c</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>aae5f0a7cce5437568895a50fac1a2dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>n</name>
      <anchorfile>a00247.html</anchorfile>
      <anchor>ab34aab81f35c96e256467a0f98937482</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::TriangleP</name>
    <filename>a00248.html</filename>
    <base>fcl::ShapeBase</base>
    <member kind="function">
      <type></type>
      <name>TriangleP</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>aca4aa9d95ecca48efddb9c475283e9bc</anchor>
      <arglist>(const Vec3f &amp;a_, const Vec3f &amp;b_, const Vec3f &amp;c_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLocalAABB</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ac1f14ce4a6f246af8206f5a5c253b3f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NODE_TYPE</type>
      <name>getNodeType</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>a369283d6add2ea410690baf2fa2da540</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>a</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>aa5a836c35a117f287c13bb09f32ad7d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>b</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>a132339d27b5abde4113f73d1ffc1f607</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>c</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>a25dae214460482fd2017b1e8564d5b46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::TVector3</name>
    <filename>a00249.html</filename>
    <member kind="function">
      <type></type>
      <name>TVector3</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>acddbea7abc5a835b23c4521b04099d9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TVector3</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>aac26fbec48171a3d67db58b5df717332</anchor>
      <arglist>(const boost::shared_ptr&lt; TimeInterval &gt; &amp;time_interval)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TVector3</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>af52203bf8229ebcf9c6f77e39ea2d260</anchor>
      <arglist>(TaylorModel v[3])</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TVector3</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a5ccd0ea8b2b91af44f37b3676e79bf52</anchor>
      <arglist>(const TaylorModel &amp;v0, const TaylorModel &amp;v1, const TaylorModel &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TVector3</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>aef4dee03803ae7b3039a5337e7b9ee01</anchor>
      <arglist>(const Vec3f &amp;v, const boost::shared_ptr&lt; TimeInterval &gt; &amp;time_interval)</arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>operator+</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a376b0be7e3b8a429a581b622fb885ee7</anchor>
      <arglist>(const TVector3 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>TVector3 &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a86cc0668915141fecbce9560a744cfd7</anchor>
      <arglist>(const TVector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>operator+</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a041eab554e1ee874952158d1c089e6d1</anchor>
      <arglist>(const Vec3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>TVector3 &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a8e5f93e39939dbd0b2e47ec78f5d82c6</anchor>
      <arglist>(const Vec3f &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>operator-</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a73de846ab136099bab29f9a2597376bb</anchor>
      <arglist>(const TVector3 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>TVector3 &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ac628fcc49a00d02c629dcc7cbf4d001c</anchor>
      <arglist>(const TVector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>operator-</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ac97e85b0cbabe4350a840b0f135d54a2</anchor>
      <arglist>(const Vec3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>TVector3 &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a9f26c3732fd45ab58fda73bc9dd0ba79</anchor>
      <arglist>(const Vec3f &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>operator-</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ace658889c1079311764c83ef4b2b9b32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>operator*</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a17b463b8186a0b188fed2a42c6a4cb3a</anchor>
      <arglist>(const TaylorModel &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>TVector3 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a3b16ec437cc1d624820297ac9a439431</anchor>
      <arglist>(const TaylorModel &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>operator*</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ae36857bfa8241b4f5d4c4c8d8d041009</anchor>
      <arglist>(FCL_REAL d) const </arglist>
    </member>
    <member kind="function">
      <type>TVector3 &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a7618eed2fa0ce2c109c7fa7650894c12</anchor>
      <arglist>(FCL_REAL d)</arglist>
    </member>
    <member kind="function">
      <type>const TaylorModel &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a6bd54bd770a0d5f314d1ca7e00d2866f</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>TaylorModel &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a81476e47ac3df7537c062ad629211eff</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>TaylorModel</type>
      <name>dot</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ae2271576cc1331fc553bf2bd84d40789</anchor>
      <arglist>(const TVector3 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>cross</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ac18480a39a352d314692e0beb0b3da20</anchor>
      <arglist>(const TVector3 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>TaylorModel</type>
      <name>dot</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>adc97b87063514198a18b37d897f2092b</anchor>
      <arglist>(const Vec3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>cross</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ae23fac08308d6a34bfda747fd65294ef</anchor>
      <arglist>(const Vec3f &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>IVector3</type>
      <name>getBound</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a6ead2ca352da37644eece13e671458b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IVector3</type>
      <name>getBound</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>aec86101cbfba6a0b6150b7c58b17042c</anchor>
      <arglist>(FCL_REAL l, FCL_REAL r) const </arglist>
    </member>
    <member kind="function">
      <type>IVector3</type>
      <name>getBound</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>af0758f88932ed1ead974274393e31980</anchor>
      <arglist>(FCL_REAL t) const </arglist>
    </member>
    <member kind="function">
      <type>IVector3</type>
      <name>getTightBound</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a367dca9dfbece08395437cde2cf4faae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IVector3</type>
      <name>getTightBound</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a975159e21bcb24d9ff5e61e68f6379ca</anchor>
      <arglist>(FCL_REAL l, FCL_REAL r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a72b97b1f3c6453b010df99b58e8571ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>volumn</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a226b9d95165da8dbb68d8d31a85ad571</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a12c05076dfa59da4fd3f314636b59a5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TaylorModel</type>
      <name>squareLength</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a9f4cdf3953085b3385e9c6eeb9f62ae2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeInterval</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a0c077f1e31299dd8a06fabf7a0961946</anchor>
      <arglist>(const boost::shared_ptr&lt; TimeInterval &gt; &amp;time_interval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeInterval</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a25fb6a6b15da5bff3cbd513568099342</anchor>
      <arglist>(FCL_REAL l, FCL_REAL r)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; TimeInterval &gt; &amp;</type>
      <name>getTimeInterval</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>a701e76abe74ac447fd1e2d042b66175d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::UnaryReturnType</name>
    <filename>a00250.html</filename>
    <templarg>Derived</templarg>
    <member kind="typedef">
      <type>Derived::Scalar</type>
      <name>Scalar</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ae92201ff0636cd134a668fbe70af34c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derived::PlainObject</type>
      <name>Normalize</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>a5d12a6af6b396b5b571c6ccd9b631444</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FclOp&lt; const CwiseUnaryOp&lt; internal::scalar_opposite_op&lt; Scalar &gt;, const Derived &gt; &gt;</type>
      <name>Opposite</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ac6c7d980c3f17252269e74b65b6b125b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FclOp&lt; const CwiseUnaryOp&lt; internal::scalar_abs_op&lt; Scalar &gt;, const Derived &gt; &gt;</type>
      <name>Abs</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>a3479f443e07d93dd890491ef5938f280</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::unordered_map_hash_table</name>
    <filename>a00251.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>fcl::Variance3f</name>
    <filename>a00252.html</filename>
    <member kind="function">
      <type></type>
      <name>Variance3f</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a92ed69ade5a5da3e26a53a35d91431fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variance3f</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a66b6ea2fdef011bd73978b7208797943</anchor>
      <arglist>(const Matrix3f &amp;S)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a7e4d112dfe6489f344dcb148ebf88563</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Variance3f &amp;</type>
      <name>sqrt</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>af958d9509e5eef249e1611a6d294856c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f</type>
      <name>Sigma</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ae3d9fd7331bf84929eabc27ec5ffcd65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3f::U</type>
      <name>sigma</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a12862da9c6bfa5e7d612fed97a810c81</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>Vec3f</type>
      <name>axis</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a0e5e98a0cff00aa89bea21e6fe82e2bc</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fcl::details::Vec3Data</name>
    <filename>a00253.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>meta_type</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>ae38b44e7ad66d6fbc639da13c3af60f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3Data</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a36cad132dc6d9fae8482278c826de07a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3Data</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>aaacfbd6bf28fc069e4f934803fdba24a</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3Data</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a2e41159394b47131da6c19ddf8314de1</anchor>
      <arglist>(T *x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3Data</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>aaacff9fe2cdc74ef9eb176d1ba6425a7</anchor>
      <arglist>(T x, T y, T z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>aaf3991a55d2f7f5ba27fefe9323c957f</anchor>
      <arglist>(T x, T y, T z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a442712816cdc8957f711802f6b8fbdc0</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>ae8353e2fe8f1105b0ba2699c0a77d35e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt; &amp;</type>
      <name>ubound</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a4348bdcf805005cb4f96ca4a2a9cc79f</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt; &amp;</type>
      <name>lbound</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a52dcf3b882301dad53ab63c34c9d11e5</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>ace09d91fe403bc5bf707ff104191eb38</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>af9f46be3416573217f9106ce3501bf1b</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>afb12687c2753f0732443840f3c0a47c0</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a24825d87b82ac10268ad9ab00e3ddee0</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a6a06785c306e5ef37c90dc408d2f6f3c</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>abb020bdd3ca316916402ecf8e23b6b1a</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a06d262b2657e2273552d8e9b7930a0a8</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a4c774727d299dab4d7d8ad86895e86f6</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a32b0a9cb1ed459c522719b4b8ea8e8aa</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>ab4793b07a225b52d3c42c70efc833aa0</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a4b32ba4fbf83d42ace21beecfa6116b5</anchor>
      <arglist>(T t) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>ac7448376abc63ad01a86e3287214c913</anchor>
      <arglist>(T t) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a5c1ffa7950d720ebb6652267480f9cdd</anchor>
      <arglist>(T t) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a6bbf6eaf47e31a9f4a0477fb5a461b87</anchor>
      <arglist>(T t) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a4c50e109682c8949b7c7d269e5790403</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a87371b3d625f3210f00df0c4077ae029</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>aa0426967abd971463179b2a02746d4f3</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a0cb4c4b558b8e3247df891ed1cb306a1</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>Vec3Data&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a39abf4bc6fdc6ad94131177524754e24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>vs</name>
      <anchorfile>a00253.html</anchorfile>
      <anchor>a746d7abd9a6b7750295b4c3aa93c2495</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Vec3fX</name>
    <filename>a00254.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T::meta_type</type>
      <name>U</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a5683f7f75a3a65aef6d276ab01e4992d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3fX</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>ae8d1139cba6a73fea473dbce09e1ae56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3fX</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a46abeadab0f780ff8fea1123398d006d</anchor>
      <arglist>(const Vec3fX &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3fX</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>afac276255e482137a8cc43721a5fb922</anchor>
      <arglist>(U x, U y, U z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3fX</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a21dd6722b70c5c2025c442b77fa1f43a</anchor>
      <arglist>(U x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3fX</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>afefc706c229be674ce0e03d4bc8db8ad</anchor>
      <arglist>(const T &amp;data_)</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>operator[]</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>ac0692c54b5301cade445e87a0028baa9</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>U &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a0d74929983999a8f1b0e2a2f2221c59e</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>Vec3fX</type>
      <name>operator+</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a03014458a563a5baa2c3628bfebd69fb</anchor>
      <arglist>(const Vec3fX &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3fX</type>
      <name>operator-</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a6fb6748a7ad9870f2a105f37f2fc3245</anchor>
      <arglist>(const Vec3fX &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3fX</type>
      <name>operator*</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a8dc3a76bf2b55966336b2832d559be55</anchor>
      <arglist>(const Vec3fX &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3fX</type>
      <name>operator/</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a9a10fbec3a1d1aabd5fd03f6215b0a87</anchor>
      <arglist>(const Vec3fX &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3fX &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a90167ab0d6394d6f760720910b06d9c6</anchor>
      <arglist>(const Vec3fX &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vec3fX &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a6726cda46a60d9e3b18c4f68393ee32a</anchor>
      <arglist>(const Vec3fX &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vec3fX &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a0ae268e01404fbd9c39afb341135664d</anchor>
      <arglist>(const Vec3fX &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vec3fX &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a325a1820b155dd6812f54376e4debc5f</anchor>
      <arglist>(const Vec3fX &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vec3fX</type>
      <name>operator+</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>ac3f4c556003e9012f7fab54f5ee6f459</anchor>
      <arglist>(U t) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3fX</type>
      <name>operator-</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a047eec560eb8a19d96628d2c6d039ff4</anchor>
      <arglist>(U t) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3fX</type>
      <name>operator*</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>affd3ede0698cc6b6964c0de97211e55a</anchor>
      <arglist>(U t) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3fX</type>
      <name>operator/</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>ad2969bdc9a9cc5c50a00502464a47404</anchor>
      <arglist>(U t) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3fX &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a15dc71486bfccc2ab199c5552f0ae92e</anchor>
      <arglist>(U t)</arglist>
    </member>
    <member kind="function">
      <type>Vec3fX &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a87df63ba03503d2980ad213ed416e02e</anchor>
      <arglist>(U t)</arglist>
    </member>
    <member kind="function">
      <type>Vec3fX &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a83770ac22987b4f3ff82aff0b6c4c09f</anchor>
      <arglist>(U t)</arglist>
    </member>
    <member kind="function">
      <type>Vec3fX &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>aa929034b3cae4a99d1684167d9b706e8</anchor>
      <arglist>(U t)</arglist>
    </member>
    <member kind="function">
      <type>Vec3fX</type>
      <name>operator-</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a44eec4beb1234dc6bec7f9953fbcc995</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3fX</type>
      <name>cross</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a3553c0bc1ef4b53061b80fb2b5115bc6</anchor>
      <arglist>(const Vec3fX &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>dot</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a541af5a8f4b37a24e57cb7fb1b442233</anchor>
      <arglist>(const Vec3fX &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3fX &amp;</type>
      <name>normalize</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a7ce553a4a4ccc7dd4e992172d78018f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3fX &amp;</type>
      <name>normalize</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a754f1ae2f8992ec856e3b68c46b60900</anchor>
      <arglist>(bool *signal)</arglist>
    </member>
    <member kind="function">
      <type>Vec3fX &amp;</type>
      <name>abs</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a76442f9c2765ed76aeb4e9fbe2187e04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>length</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a0ac2eaf8fbe1e7cabe2141d73ebe6530</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>norm</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a63e836d9fa0974770b202fef93058b89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>sqrLength</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>abbfdc9962ec428a667246925bf7a8153</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>squaredNorm</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a45ac08479467e3c0bce3c863e37196f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a6a34751dda24efe6b046dbfc9f3a88a7</anchor>
      <arglist>(U x, U y, U z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>acdb616f2a81d2f1cfc4afaa2305c0526</anchor>
      <arglist>(U x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a71f4f6f39b2ee9fe93cd5ffe93dfb5d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>aa2ff9eae97d94b5d379d5123ecb6f0fc</anchor>
      <arglist>(const Vec3fX &amp;other, U epsilon=std::numeric_limits&lt; U &gt;::epsilon()*100) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3fX&lt; T &gt; &amp;</type>
      <name>negate</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>ad9ea2439e324347bafb8eeea9d650058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a33e5b81c63ed378d8a76f4eee2bd8306</anchor>
      <arglist>(const Vec3fX &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>ab45274e73d218269563f578eb8d9ac59</anchor>
      <arglist>(const Vec3fX &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3fX&lt; T &gt; &amp;</type>
      <name>ubound</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>abebf0dcb7efbe000fca07bada2fcd24f</anchor>
      <arglist>(const Vec3fX&lt; T &gt; &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>Vec3fX&lt; T &gt; &amp;</type>
      <name>lbound</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a9e797953f07b88147679c57642600b8c</anchor>
      <arglist>(const Vec3fX&lt; T &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a0a64bdab1bb0c6730b395ad2217b9262</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>data</name>
      <anchorfile>a00254.html</anchorfile>
      <anchor>a6330cc37244e1ab918376f4919f9e2ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Vec_n</name>
    <filename>a00255.html</filename>
    <templarg>T</templarg>
    <templarg>N</templarg>
    <member kind="function">
      <type></type>
      <name>Vec_n</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ad591ce16427c8cba425085e65213057d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec_n</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a4d7da1f729512ccb3fb5ddb4857b0188</anchor>
      <arglist>(const Vec_n&lt; T, M &gt; &amp;data_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec_n</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a4c026444da940a8584a9598df5f0f4a4</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;data_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>abe4330470a7f8190fea8c7a3a2b65297</anchor>
      <arglist>(const Vec_n&lt; T, N &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>afdde21fce73428431b2a2dd1d32fd7ad</anchor>
      <arglist>(const Vec_n&lt; T, N &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>dim</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>af447774ce14bcc86b4ec5a2158d4c99d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ad951b968a9c88f458581afd423c6f85d</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;data_)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a4eb89419ad6251e1cab0d428701f659f</anchor>
      <arglist>(std::size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a0729d027aabeb7f8dc5417b214fe8903</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; T, N &gt;</type>
      <name>operator+</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aa0f9bf3d2c047ed602385556745ebcf3</anchor>
      <arglist>(const Vec_n&lt; T, N &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; T, N &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a709a06b494370ac0786bd566758d9a4a</anchor>
      <arglist>(const Vec_n&lt; T, N &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; T, N &gt;</type>
      <name>operator-</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>abe39cddb7a6c59a04bcb183a54884228</anchor>
      <arglist>(const Vec_n&lt; T, N &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; T, N &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a24f4688a33d137bce27b42f4896ef2d3</anchor>
      <arglist>(const Vec_n&lt; T, N &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; T, N &gt;</type>
      <name>operator*</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>abf84660b061d021bf592a9781a779adf</anchor>
      <arglist>(T t) const </arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; T, N &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a6a98ec9185675216ec578d6fce0784ca</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; T, N &gt;</type>
      <name>operator/</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aab3a706b12c351134b161b115661af0c</anchor>
      <arglist>(T t) const </arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; T, N &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a8102b88b6b404619c6f4f82c525b195c</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; T, N &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aa3d6de31752864a65bf34ab1c0e0b295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>afe285f861601b2c07c85ebda11696647</anchor>
      <arglist>(const Vec_n&lt; T, N &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>getData</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a598923265eb90c6d3895704ed2eff618</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; T &gt;</type>
      <name>data</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aa0e40a6c7dfa6f091cedcc8def770ff6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vec_n&lt; FCL_REAL, N &gt;</name>
    <filename>a00255.html</filename>
    <member kind="function">
      <type></type>
      <name>Vec_n</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ad591ce16427c8cba425085e65213057d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec_n</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a4d7da1f729512ccb3fb5ddb4857b0188</anchor>
      <arglist>(const Vec_n&lt; FCL_REAL, M &gt; &amp;data_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec_n</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a4c026444da940a8584a9598df5f0f4a4</anchor>
      <arglist>(const std::vector&lt; FCL_REAL &gt; &amp;data_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>abe4330470a7f8190fea8c7a3a2b65297</anchor>
      <arglist>(const Vec_n&lt; FCL_REAL, N &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>afdde21fce73428431b2a2dd1d32fd7ad</anchor>
      <arglist>(const Vec_n&lt; FCL_REAL, N &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>dim</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>af447774ce14bcc86b4ec5a2158d4c99d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>ad951b968a9c88f458581afd423c6f85d</anchor>
      <arglist>(const std::vector&lt; FCL_REAL &gt; &amp;data_)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>operator[]</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a4eb89419ad6251e1cab0d428701f659f</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a0729d027aabeb7f8dc5417b214fe8903</anchor>
      <arglist>(std::size_t i)</arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; FCL_REAL, N &gt;</type>
      <name>operator+</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aa0f9bf3d2c047ed602385556745ebcf3</anchor>
      <arglist>(const Vec_n&lt; FCL_REAL, N &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; FCL_REAL, N &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a709a06b494370ac0786bd566758d9a4a</anchor>
      <arglist>(const Vec_n&lt; FCL_REAL, N &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; FCL_REAL, N &gt;</type>
      <name>operator-</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>abe39cddb7a6c59a04bcb183a54884228</anchor>
      <arglist>(const Vec_n&lt; FCL_REAL, N &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; FCL_REAL, N &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a24f4688a33d137bce27b42f4896ef2d3</anchor>
      <arglist>(const Vec_n&lt; FCL_REAL, N &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; FCL_REAL, N &gt;</type>
      <name>operator*</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>abf84660b061d021bf592a9781a779adf</anchor>
      <arglist>(FCL_REAL t) const</arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; FCL_REAL, N &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a6a98ec9185675216ec578d6fce0784ca</anchor>
      <arglist>(FCL_REAL t)</arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; FCL_REAL, N &gt;</type>
      <name>operator/</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aab3a706b12c351134b161b115661af0c</anchor>
      <arglist>(FCL_REAL t) const</arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; FCL_REAL, N &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a8102b88b6b404619c6f4f82c525b195c</anchor>
      <arglist>(FCL_REAL t)</arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; FCL_REAL, N &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aa3d6de31752864a65bf34ab1c0e0b295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>dot</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>afe285f861601b2c07c85ebda11696647</anchor>
      <arglist>(const Vec_n&lt; FCL_REAL, N &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; FCL_REAL &gt;</type>
      <name>getData</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>a598923265eb90c6d3895704ed2eff618</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; FCL_REAL &gt;</type>
      <name>data</name>
      <anchorfile>a00255.html</anchorfile>
      <anchor>aa0e40a6c7dfa6f091cedcc8def770ff6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>fcl::Vecnf</name>
    <filename>a00256.html</filename>
    <templarg>N</templarg>
    <base>Vec_n&lt; FCL_REAL, N &gt;</base>
    <member kind="function">
      <type></type>
      <name>Vecnf</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a57e937fbbaab2676811d078047969f64</anchor>
      <arglist>(const Vec_n&lt; FCL_REAL, N &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vecnf</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>ae9edadb9a1b24df7e6bb51cc233a81cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vecnf</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a7045d346ad1d44b6caae21f6035a6ca6</anchor>
      <arglist>(const Vec_n&lt; FCL_REAL, M &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vecnf</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a42cb640082f55f739ff13402c4953206</anchor>
      <arglist>(const std::vector&lt; FCL_REAL &gt; &amp;data_)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vecnf&lt; 2 &gt;</name>
    <filename>a00256.html</filename>
    <base>Vec_n&lt; FCL_REAL, N &gt;</base>
    <member kind="function">
      <type></type>
      <name>Vecnf</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a57e937fbbaab2676811d078047969f64</anchor>
      <arglist>(const Vec_n&lt; FCL_REAL, N &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vecnf</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>ae9edadb9a1b24df7e6bb51cc233a81cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vecnf</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a7045d346ad1d44b6caae21f6035a6ca6</anchor>
      <arglist>(const Vec_n&lt; FCL_REAL, M &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vecnf</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a42cb640082f55f739ff13402c4953206</anchor>
      <arglist>(const std::vector&lt; FCL_REAL &gt; &amp;data_)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vecnf&lt; 3 &gt;</name>
    <filename>a00256.html</filename>
    <base>Vec_n&lt; FCL_REAL, N &gt;</base>
    <member kind="function">
      <type></type>
      <name>Vecnf</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a57e937fbbaab2676811d078047969f64</anchor>
      <arglist>(const Vec_n&lt; FCL_REAL, N &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vecnf</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>ae9edadb9a1b24df7e6bb51cc233a81cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vecnf</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a7045d346ad1d44b6caae21f6035a6ca6</anchor>
      <arglist>(const Vec_n&lt; FCL_REAL, M &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vecnf</name>
      <anchorfile>a00256.html</anchorfile>
      <anchor>a42cb640082f55f739ff13402c4953206</anchor>
      <arglist>(const std::vector&lt; FCL_REAL &gt; &amp;data_)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Eigen</name>
    <filename>a00360.html</filename>
    <namespace>Eigen::internal</namespace>
    <class kind="struct">Eigen::BinaryReturnType</class>
    <class kind="class">Eigen::FclMatrix</class>
    <class kind="class">Eigen::FclOp</class>
    <class kind="struct">Eigen::FclProduct</class>
    <class kind="struct">Eigen::UnaryReturnType</class>
  </compound>
  <compound kind="namespace">
    <name>Eigen::internal</name>
    <filename>a00361.html</filename>
    <class kind="struct">Eigen::internal::deduce_fcl_type</class>
    <class kind="struct">Eigen::internal::deduce_fcl_type&lt; Derived, OtherDerived, false &gt;</class>
    <class kind="struct">Eigen::internal::deduce_fcl_type&lt; Derived, OtherDerived, true &gt;</class>
    <class kind="struct">Eigen::internal::remove_fcl</class>
    <class kind="struct">Eigen::internal::remove_fcl&lt; const FclMatrix&lt; T, Col, Options &gt; &gt;</class>
    <class kind="struct">Eigen::internal::remove_fcl&lt; const FclOp&lt; Derived &gt; &gt;</class>
    <class kind="struct">Eigen::internal::remove_fcl&lt; FclMatrix&lt; T, Col, Options &gt; &gt;</class>
    <class kind="struct">Eigen::internal::remove_fcl&lt; FclOp&lt; Derived &gt; &gt;</class>
    <class kind="struct">Eigen::internal::traits&lt; FclMatrix&lt; T, Cols, _Options &gt; &gt;</class>
    <class kind="struct">Eigen::internal::traits&lt; FclOp&lt; T &gt; &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>fcl</name>
    <filename>a00314.html</filename>
    <namespace>fcl::details</namespace>
    <namespace>fcl::implementation_array</namespace>
    <namespace>fcl::time</namespace>
    <namespace>fcl::tools</namespace>
    <class kind="class">fcl::AABB</class>
    <class kind="class">fcl::BallEulerJoint</class>
    <class kind="class">fcl::Box</class>
    <class kind="class">fcl::BroadPhaseCollisionManager</class>
    <class kind="class">fcl::BroadPhaseContinuousCollisionManager</class>
    <class kind="class">fcl::BVFitter</class>
    <class kind="class">fcl::BVFitter&lt; kIOS &gt;</class>
    <class kind="class">fcl::BVFitter&lt; OBB &gt;</class>
    <class kind="class">fcl::BVFitter&lt; OBBRSS &gt;</class>
    <class kind="class">fcl::BVFitter&lt; RSS &gt;</class>
    <class kind="class">fcl::BVFitterBase</class>
    <class kind="class">fcl::BVHCollisionTraversalNode</class>
    <class kind="struct">fcl::BVHContinuousCollisionPair</class>
    <class kind="class">fcl::BVHDistanceTraversalNode</class>
    <class kind="struct">fcl::BVHFrontNode</class>
    <class kind="class">fcl::BVHModel</class>
    <class kind="class">fcl::BVHShapeCollisionTraversalNode</class>
    <class kind="class">fcl::BVHShapeDistanceTraversalNode</class>
    <class kind="class">fcl::BVMotionBoundVisitor</class>
    <class kind="struct">fcl::BVNode</class>
    <class kind="struct">fcl::BVNodeBase</class>
    <class kind="class">fcl::BVSplitter</class>
    <class kind="class">fcl::BVSplitterBase</class>
    <class kind="class">fcl::Capsule</class>
    <class kind="struct">fcl::CollisionFunctionMatrix</class>
    <class kind="class">fcl::CollisionGeometry</class>
    <class kind="class">fcl::CollisionObject</class>
    <class kind="struct">fcl::CollisionRequest</class>
    <class kind="struct">fcl::CollisionResult</class>
    <class kind="class">fcl::CollisionTraversalNodeBase</class>
    <class kind="class">fcl::Cone</class>
    <class kind="struct">fcl::ConservativeAdvancementFunctionMatrix</class>
    <class kind="struct">fcl::ConservativeAdvancementStackData</class>
    <class kind="struct">fcl::Contact</class>
    <class kind="class">fcl::ContinuousCollisionObject</class>
    <class kind="struct">fcl::ContinuousCollisionRequest</class>
    <class kind="struct">fcl::ContinuousCollisionResult</class>
    <class kind="class">fcl::Convex</class>
    <class kind="struct">fcl::CostSource</class>
    <class kind="class">fcl::Cylinder</class>
    <class kind="struct">fcl::DistanceFunctionMatrix</class>
    <class kind="struct">fcl::DistanceRequest</class>
    <class kind="struct">fcl::DistanceResult</class>
    <class kind="class">fcl::DistanceTraversalNodeBase</class>
    <class kind="class">fcl::DynamicAABBTreeCollisionManager</class>
    <class kind="class">fcl::DynamicAABBTreeCollisionManager_Array</class>
    <class kind="class">fcl::Exception</class>
    <class kind="class">fcl::FclType</class>
    <class kind="struct">fcl::GJKSolver_indep</class>
    <class kind="struct">fcl::GJKSolver_libccd</class>
    <class kind="class">fcl::GreedyKCenters</class>
    <class kind="class">fcl::Halfspace</class>
    <class kind="class">fcl::HierarchyTree</class>
    <class kind="struct">fcl::IMatrix3</class>
    <class kind="class">fcl::InterpMotion</class>
    <class kind="class">fcl::Interpolation</class>
    <class kind="class">fcl::InterpolationFactory</class>
    <class kind="class">fcl::InterpolationLinear</class>
    <class kind="class">fcl::Intersect</class>
    <class kind="struct">fcl::Interval</class>
    <class kind="class">fcl::IntervalTree</class>
    <class kind="class">fcl::IntervalTreeCollisionManager</class>
    <class kind="class">fcl::IntervalTreeNode</class>
    <class kind="struct">fcl::Item</class>
    <class kind="struct">fcl::IVector3</class>
    <class kind="class">fcl::Joint</class>
    <class kind="class">fcl::JointConfig</class>
    <class kind="class">fcl::KDOP</class>
    <class kind="class">fcl::kIOS</class>
    <class kind="class">fcl::Link</class>
    <class kind="class">fcl::Matrix3fX</class>
    <class kind="class">fcl::MeshCollisionTraversalNode</class>
    <class kind="class">fcl::MeshCollisionTraversalNodekIOS</class>
    <class kind="class">fcl::MeshCollisionTraversalNodeOBB</class>
    <class kind="class">fcl::MeshCollisionTraversalNodeOBBRSS</class>
    <class kind="class">fcl::MeshCollisionTraversalNodeRSS</class>
    <class kind="class">fcl::MeshConservativeAdvancementTraversalNode</class>
    <class kind="class">fcl::MeshConservativeAdvancementTraversalNodeOBBRSS</class>
    <class kind="class">fcl::MeshConservativeAdvancementTraversalNodeRSS</class>
    <class kind="class">fcl::MeshContinuousCollisionTraversalNode</class>
    <class kind="class">fcl::MeshDistanceTraversalNode</class>
    <class kind="class">fcl::MeshDistanceTraversalNodekIOS</class>
    <class kind="class">fcl::MeshDistanceTraversalNodeOBBRSS</class>
    <class kind="class">fcl::MeshDistanceTraversalNodeRSS</class>
    <class kind="class">fcl::MeshOcTreeCollisionTraversalNode</class>
    <class kind="class">fcl::MeshOcTreeDistanceTraversalNode</class>
    <class kind="class">fcl::MeshShapeCollisionTraversalNode</class>
    <class kind="class">fcl::MeshShapeCollisionTraversalNodekIOS</class>
    <class kind="class">fcl::MeshShapeCollisionTraversalNodeOBB</class>
    <class kind="class">fcl::MeshShapeCollisionTraversalNodeOBBRSS</class>
    <class kind="class">fcl::MeshShapeCollisionTraversalNodeRSS</class>
    <class kind="class">fcl::MeshShapeConservativeAdvancementTraversalNode</class>
    <class kind="class">fcl::MeshShapeConservativeAdvancementTraversalNodeOBBRSS</class>
    <class kind="class">fcl::MeshShapeConservativeAdvancementTraversalNodeRSS</class>
    <class kind="class">fcl::MeshShapeDistanceTraversalNode</class>
    <class kind="class">fcl::MeshShapeDistanceTraversalNodekIOS</class>
    <class kind="class">fcl::MeshShapeDistanceTraversalNodeOBBRSS</class>
    <class kind="class">fcl::MeshShapeDistanceTraversalNodeRSS</class>
    <class kind="class">fcl::Model</class>
    <class kind="class">fcl::ModelConfig</class>
    <class kind="class">fcl::ModelParseError</class>
    <class kind="struct">fcl::morton_functor</class>
    <class kind="struct">fcl::morton_functor&lt; boost::dynamic_bitset&lt;&gt; &gt;</class>
    <class kind="struct">fcl::morton_functor&lt; FCL_UINT32 &gt;</class>
    <class kind="struct">fcl::morton_functor&lt; FCL_UINT64 &gt;</class>
    <class kind="class">fcl::MotionBase</class>
    <class kind="class">fcl::NaiveCollisionManager</class>
    <class kind="class">fcl::NearestNeighbors</class>
    <class kind="class">fcl::NearestNeighborsGNAT</class>
    <class kind="class">fcl::NearestNeighborsLinear</class>
    <class kind="class">fcl::NearestNeighborsSqrtApprox</class>
    <class kind="struct">fcl::NodeBase</class>
    <class kind="class">fcl::OBB</class>
    <class kind="class">fcl::OBBRSS</class>
    <class kind="class">fcl::OcTree</class>
    <class kind="class">fcl::OcTreeCollisionTraversalNode</class>
    <class kind="class">fcl::OcTreeDistanceTraversalNode</class>
    <class kind="class">fcl::OcTreeMeshCollisionTraversalNode</class>
    <class kind="class">fcl::OcTreeMeshDistanceTraversalNode</class>
    <class kind="class">fcl::OcTreeShapeCollisionTraversalNode</class>
    <class kind="class">fcl::OcTreeShapeDistanceTraversalNode</class>
    <class kind="class">fcl::OcTreeSolver</class>
    <class kind="struct">fcl::PenetrationDepthRequest</class>
    <class kind="struct">fcl::PenetrationDepthResult</class>
    <class kind="class">fcl::Plane</class>
    <class kind="class">fcl::PolySolver</class>
    <class kind="struct">fcl::PredictResult</class>
    <class kind="class">fcl::PrismaticJoint</class>
    <class kind="class">fcl::Project</class>
    <class kind="class">fcl::Quaternion3f</class>
    <class kind="class">fcl::RevoluteJoint</class>
    <class kind="class">fcl::RNG</class>
    <class kind="class">fcl::RSS</class>
    <class kind="class">fcl::SamplerBase</class>
    <class kind="class">fcl::SamplerR</class>
    <class kind="class">fcl::SamplerSE2</class>
    <class kind="class">fcl::SamplerSE2_disk</class>
    <class kind="class">fcl::SamplerSE3Euler</class>
    <class kind="class">fcl::SamplerSE3Euler_ball</class>
    <class kind="class">fcl::SamplerSE3Quat</class>
    <class kind="class">fcl::SamplerSE3Quat_ball</class>
    <class kind="class">fcl::SaPCollisionManager</class>
    <class kind="struct">fcl::Scaler</class>
    <class kind="class">fcl::ScrewMotion</class>
    <class kind="class">fcl::ShapeBase</class>
    <class kind="class">fcl::ShapeBVHCollisionTraversalNode</class>
    <class kind="class">fcl::ShapeBVHDistanceTraversalNode</class>
    <class kind="class">fcl::ShapeCollisionTraversalNode</class>
    <class kind="class">fcl::ShapeConservativeAdvancementTraversalNode</class>
    <class kind="class">fcl::ShapeDistanceTraversalNode</class>
    <class kind="class">fcl::ShapeMeshCollisionTraversalNode</class>
    <class kind="class">fcl::ShapeMeshCollisionTraversalNodekIOS</class>
    <class kind="class">fcl::ShapeMeshCollisionTraversalNodeOBB</class>
    <class kind="class">fcl::ShapeMeshCollisionTraversalNodeOBBRSS</class>
    <class kind="class">fcl::ShapeMeshCollisionTraversalNodeRSS</class>
    <class kind="class">fcl::ShapeMeshConservativeAdvancementTraversalNode</class>
    <class kind="class">fcl::ShapeMeshConservativeAdvancementTraversalNodeOBBRSS</class>
    <class kind="class">fcl::ShapeMeshConservativeAdvancementTraversalNodeRSS</class>
    <class kind="class">fcl::ShapeMeshDistanceTraversalNode</class>
    <class kind="class">fcl::ShapeMeshDistanceTraversalNodekIOS</class>
    <class kind="class">fcl::ShapeMeshDistanceTraversalNodeOBBRSS</class>
    <class kind="class">fcl::ShapeMeshDistanceTraversalNodeRSS</class>
    <class kind="class">fcl::ShapeOcTreeCollisionTraversalNode</class>
    <class kind="class">fcl::ShapeOcTreeDistanceTraversalNode</class>
    <class kind="class">fcl::SimpleHashTable</class>
    <class kind="struct">fcl::SimpleInterval</class>
    <class kind="class">fcl::SparseHashTable</class>
    <class kind="struct">fcl::SpatialHash</class>
    <class kind="class">fcl::SpatialHashingCollisionManager</class>
    <class kind="class">fcl::Sphere</class>
    <class kind="class">fcl::SplineMotion</class>
    <class kind="class">fcl::SSaPCollisionManager</class>
    <class kind="class">fcl::SVMClassifier</class>
    <class kind="class">fcl::TaylorModel</class>
    <class kind="struct">fcl::TaylorReturnType</class>
    <class kind="struct">fcl::TaylorReturnType&lt; 1 &gt;</class>
    <class kind="struct">fcl::TaylorReturnType&lt; 3 &gt;</class>
    <class kind="class">fcl::TBVMotionBoundVisitor</class>
    <class kind="struct">fcl::TimeInterval</class>
    <class kind="class">fcl::TMatrix3</class>
    <class kind="class">fcl::Transform3f</class>
    <class kind="class">fcl::TranslationMotion</class>
    <class kind="class">fcl::TraversalNodeBase</class>
    <class kind="class">fcl::Triangle</class>
    <class kind="class">fcl::TriangleDistance</class>
    <class kind="class">fcl::TriangleMotionBoundVisitor</class>
    <class kind="class">fcl::TriangleP</class>
    <class kind="class">fcl::TVector3</class>
    <class kind="class">fcl::unordered_map_hash_table</class>
    <class kind="class">fcl::Variance3f</class>
    <class kind="class">fcl::Vec3fX</class>
    <class kind="class">fcl::Vec_n</class>
    <class kind="class">fcl::Vecnf</class>
    <member kind="typedef">
      <type>bool(*</type>
      <name>CollisionCallBack</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a35b68b743ae627b553eaf50f1caf45fa</anchor>
      <arglist>)(CollisionObject *o1, CollisionObject *o2, void *cdata)</arglist>
    </member>
    <member kind="typedef">
      <type>bool(*</type>
      <name>DistanceCallBack</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a35c6ad5d4eea159e9919767c21e06e45</anchor>
      <arglist>)(CollisionObject *o1, CollisionObject *o2, void *cdata, FCL_REAL &amp;dist)</arglist>
    </member>
    <member kind="typedef">
      <type>bool(*</type>
      <name>ContinuousCollisionCallBack</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a33c631290be3c4414f05eeaf7f30a7af</anchor>
      <arglist>)(ContinuousCollisionObject *o1, ContinuousCollisionObject *o2, void *cdata)</arglist>
    </member>
    <member kind="typedef">
      <type>bool(*</type>
      <name>ContinuousDistanceCallBack</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a02763756d2355958b140b55a02a9440b</anchor>
      <arglist>)(ContinuousCollisionObject *o1, ContinuousCollisionObject *o2, void *cdata, FCL_REAL &amp;dist)</arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; BVHFrontNode &gt;</type>
      <name>BVHFrontList</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a9e235fe82f32503d487230a7ffc883d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; MotionBase &gt;</type>
      <name>MotionBasePtr</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a722f0185b8029593c30054d02885f9a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>FCL_REAL</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac57822493c39349dd9b9c26dfee691fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::uint64_t</type>
      <name>FCL_INT64</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a82cc45a5d3f425aba17a129e25d89447</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::int64_t</type>
      <name>FCL_UINT64</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1d5c928a159c3ab661aee0edaa03579f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::uint32_t</type>
      <name>FCL_UINT32</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a45494024e4e17b498077b911e1acf63b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::int32_t</type>
      <name>FCL_INT32</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abc0058b4a2dfd7bf99d084e914d2d274</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionObject &gt;</type>
      <name>CollisionObjectPtr_t</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa9ed330a40f0ee066fdbc4468012a1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const CollisionObject &gt;</type>
      <name>CollisionObjectConstPtr_t</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a35993425c6bff13890b33610175fdcf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CollisionGeometry &gt;</type>
      <name>CollisionGeometryPtr_t</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>acfe363ed659c6301c31341f567d4e228</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const CollisionGeometry &gt;</type>
      <name>CollisionGeometryConstPtr_t</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad9220e8f985d7730c2a6e1be7f1e4e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::FclMatrix&lt; FCL_REAL, 3 &gt;</type>
      <name>Matrix3f</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a43edc09dfe48e160a92803dc9681397a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::FclMatrix&lt; FCL_REAL, 1 &gt;</type>
      <name>Vec3f</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a071c9823fe8a2919d77c3edfcf8bbb5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>JointType</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3cb1bad701422e828e08ada35abad277</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JT_UNKNOWN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3cb1bad701422e828e08ada35abad277abc2718dc63b25621cf29594f6bfd6932</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JT_PRISMATIC</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3cb1bad701422e828e08ada35abad277a86e2e88cb44c8d92c641dd8718731489</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JT_REVOLUTE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3cb1bad701422e828e08ada35abad277a0f4f1a93a15274103345f8d5e5ef7aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JT_BALLEULER</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3cb1bad701422e828e08ada35abad277ad20d2a4b5c09f0bdd80db421cbabca46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SplitMethodType</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6a1bc06d0aede35a6f8189ba1384cb59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_METHOD_MEAN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6a1bc06d0aede35a6f8189ba1384cb59a046a8f2846bc96f92ab97212efb8e242</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_METHOD_MEDIAN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6a1bc06d0aede35a6f8189ba1384cb59a13b7e6546221a15207774bba7af5ad93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPLIT_METHOD_BV_CENTER</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6a1bc06d0aede35a6f8189ba1384cb59afe46972d03cded964e6d6ef1a81379a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BVHBuildState</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae282ecfb7a2a310150ab7a5a1cb0b903</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_EMPTY</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae282ecfb7a2a310150ab7a5a1cb0b903ae77a47d44c561f35b98bd35d99da284b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_BEGUN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae282ecfb7a2a310150ab7a5a1cb0b903ab4b43a78244c7ca9075d574be855abb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_PROCESSED</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae282ecfb7a2a310150ab7a5a1cb0b903a974153e9dbc2b06b0abcbf8d3d708701</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_UPDATE_BEGUN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae282ecfb7a2a310150ab7a5a1cb0b903a0046a200b336cf633af881d929b35d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_UPDATED</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae282ecfb7a2a310150ab7a5a1cb0b903a76633d7b729c9a20c4a18e617ce9b8e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_BUILD_STATE_REPLACE_BEGUN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae282ecfb7a2a310150ab7a5a1cb0b903a572b91eb341425f15aeaf097d0bb8c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BVHReturnCode</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_OK</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8a2ed3e9cc6a5634f3ca6584fd2b959f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_MODEL_OUT_OF_MEMORY</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8afb160e4324dbfadad4e849d4e089ec9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_BUILD_OUT_OF_SEQUENCE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8ab5748632eb40cd13a027a5f30c551844</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_BUILD_EMPTY_MODEL</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8a951705c5436e5fe2a5f50d971d528af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_BUILD_EMPTY_PREVIOUS_FRAME</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8a18ce31b56f49cadb82c2bea48279b2f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_UNSUPPORTED_FUNCTION</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8ab20baa1089fe6f35f697246b574294e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_UNUPDATED_MODEL</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8a3845b66a886bff6b5290f4880f51b666</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_INCORRECT_DATA</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8a7d5b8933a310253f86a82c15122284b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_ERR_UNKNOWN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a440e2c689cf4b8092a519c8e000eebd8a72c62ead9e80b334d334fadc7bfb7b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BVHModelType</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a41f5f0e97729622fd4749b285a0fd848</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_MODEL_UNKNOWN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a41f5f0e97729622fd4749b285a0fd848aa8ddcde6ac1e82f3fbe22e7dc7fe6864</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_MODEL_TRIANGLES</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a41f5f0e97729622fd4749b285a0fd848a00ca407cf9da666862722133cd18a0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BVH_MODEL_POINTCLOUD</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a41f5f0e97729622fd4749b285a0fd848a33b4f7676fa1247fd3a728bc672d577a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>InterpolationType</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a0b3cc7d2ae5307e1ed2d4bb16c767473</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINEAR</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a0b3cc7d2ae5307e1ed2d4bb16c767473a8165bc79536bbe80ededc60ba27f65f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STANDARD</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a0b3cc7d2ae5307e1ed2d4bb16c767473ad05cc1afb9a6bfd9fc83c8af0298c6ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>GJKSolverType</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a576bdc98c01e92cdef6f3c60617b2d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GST_LIBCCD</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a576bdc98c01e92cdef6f3c60617b2d3dafa4370b6ec1b7cad14c4509912c982a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GST_INDEP</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a576bdc98c01e92cdef6f3c60617b2d3dae1fdd48760bbeeca993df32d339d6270</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CCDMotionType</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a982b871eae7884bc1d3ac997931e0716</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCDM_TRANS</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a982b871eae7884bc1d3ac997931e0716a6deb9863f48fe864e2dd6bd5ee9c5800</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCDM_LINEAR</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a982b871eae7884bc1d3ac997931e0716a9b7d2ad283498ecc381d3b5cad50ad01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCDM_SCREW</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a982b871eae7884bc1d3ac997931e0716abd5f14ebdcd2a48541bc95031efa42d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCDM_SPLINE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a982b871eae7884bc1d3ac997931e0716adf79f3068964b1472938c079a612ba48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CCDSolverType</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a917b18048691106c9eb987f4f0452657</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCDC_NAIVE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a917b18048691106c9eb987f4f0452657a0a7d3a77b9294e857e16eabfedd5124a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCDC_CONSERVATIVE_ADVANCEMENT</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a917b18048691106c9eb987f4f0452657a804447beea3fdbd385d0ae1d55e22a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCDC_RAY_SHOOTING</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a917b18048691106c9eb987f4f0452657a728c4b1595c5f7861c1d602939cc48d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CCDC_POLYNOMIAL_SOLVER</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a917b18048691106c9eb987f4f0452657a52b0464eb10a2aeea128cf0714be8ff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PenetrationDepthType</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a45e399b3702f0110193c6dcc4daac94c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PDT_TRANSLATIONAL</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a45e399b3702f0110193c6dcc4daac94ca1a87107b22e2b64ea0ee2a785e47d4f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PDT_GENERAL_EULER</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a45e399b3702f0110193c6dcc4daac94ca3b03860dbf6bf1138a5b0a7b5110c9e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PDT_GENERAL_QUAT</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a45e399b3702f0110193c6dcc4daac94cac18bede7ece61f4493203168379438f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PDT_GENERAL_EULER_BALL</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a45e399b3702f0110193c6dcc4daac94ca5269f27ced4f6b1508483efe76191a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PDT_GENERAL_QUAT_BALL</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a45e399b3702f0110193c6dcc4daac94ca3984324b7ef41c54b87496e393246ebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>KNNSolverType</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3802c9f7da9b77e9e28c59ae40cac2be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KNN_LINEAR</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3802c9f7da9b77e9e28c59ae40cac2bea28afe3482818587d124c89b5a645d2ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KNN_GNAT</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3802c9f7da9b77e9e28c59ae40cac2beaff031e96582ea91c87190f29b36b98c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KNN_SQRTAPPROX</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3802c9f7da9b77e9e28c59ae40cac2beaea075bd8717ac929de25c00b4a53fba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OBJECT_TYPE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7675859ca6424d6552ee6b1028f29d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_UNKNOWN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7675859ca6424d6552ee6b1028f29d7da74ae171a071b4c4ab7e9a9db289b8133</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_BVH</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7675859ca6424d6552ee6b1028f29d7daff86ba3cb45be6c2e1538ec7debff753</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_GEOM</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7675859ca6424d6552ee6b1028f29d7da8cf27e957b65b6741fe502574d0508c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_OCTREE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7675859ca6424d6552ee6b1028f29d7dad4b741ca2d99d48cbc611ecca15a088b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OT_COUNT</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7675859ca6424d6552ee6b1028f29d7da65f4ecf718f93ca1cf89f4d400dabc6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NODE_TYPE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_UNKNOWN</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fcad3e6ca8b70b530c4d7ba1ad736440666</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_AABB</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca9857d1f72385fe4b7987ad8b6b6a5606</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_OBB</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fcae46803ef7bea97088c41ca7868fb632f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_RSS</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca564c0417a70d84d431d6d04b926ee2a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_kIOS</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fcaf575d2e12bedf42d88b4c02f6dcc4fe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_OBBRSS</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fcae06499fa86fc8bc8e405c83d7f4b5ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP16</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca334b960816082bb79fbbd65b5b5498ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP18</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca50255c29ad680d441eb6da9085de773d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BV_KDOP24</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fcaf154da9cd26cbd3c161d9d7481801db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_BOX</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca29bdba1e84ec5699e231d9bd0b23727a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_SPHERE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca3720e447a9e71dd98b0f34e3a8e64209</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CAPSULE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca17e66c698216b26cd58d380874337dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CONE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fcafae464caba3a63e1c891c84df6f45b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CYLINDER</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fcad98413be41320954248b24e9711d371b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_CONVEX</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca78ee619a815e5c157eb829a735599f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_PLANE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fcafc44c4c46c563f822f5e9a2a0cdf635b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_HALFSPACE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca6aa503880dcca9701c780fc5b17bb3f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_TRIANGLE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fcacfa91142aa5810c8e70258cc7aa69cfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GEOM_OCTREE</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca537e2a416d894d676b87cd50bf140973</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NODE_COUNT</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2b48aa89f14ef2fb4082575eefb145fca3e1cf1dfc3af2080ef9a90b748d49b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nodeBaseLess</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a8c09d349fc114bf7a1aed8e4d9344cfa</anchor>
      <arglist>(NodeBase&lt; BV &gt; *a, NodeBase&lt; BV &gt; *b, int d)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>select</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4fd74bef5e609b8892c011ce03aed67f</anchor>
      <arglist>(const NodeBase&lt; BV &gt; &amp;query, const NodeBase&lt; BV &gt; &amp;node1, const NodeBase&lt; BV &gt; &amp;node2)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>select</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abd87e49902e10a99c61ed324f2c1cfda</anchor>
      <arglist>(const NodeBase&lt; AABB &gt; &amp;node, const NodeBase&lt; AABB &gt; &amp;node1, const NodeBase&lt; AABB &gt; &amp;node2)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>select</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a0847279480c0058ba09be509a9a41cdb</anchor>
      <arglist>(const BV &amp;query, const NodeBase&lt; BV &gt; &amp;node1, const NodeBase&lt; BV &gt; &amp;node2)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>select</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7be17a630a9ae18ff9f65cfe18472fd5</anchor>
      <arglist>(const AABB &amp;query, const NodeBase&lt; AABB &gt; &amp;node1, const NodeBase&lt; AABB &gt; &amp;node2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AABB</type>
      <name>translate</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae757f822ade72a9e040faacd1cbe4593</anchor>
      <arglist>(const AABB &amp;aabb, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>convertBV</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a52362275c01315f71df925518375beda</anchor>
      <arglist>(const BV1 &amp;bv1, const Transform3f &amp;tf1, BV2 &amp;bv2)</arglist>
    </member>
    <member kind="function">
      <type>KDOP&lt; N &gt;</type>
      <name>translate</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af9790731e383ad860cb9ff3172128e89</anchor>
      <arglist>(const KDOP&lt; N &gt; &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>kIOS</type>
      <name>translate</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac97c8837e05789615d98567b61388318</anchor>
      <arglist>(const kIOS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad99f0f296c36453d90baec0cd211b687</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a495d45bcfdb0d3db0288bd2932ded7af</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const kIOS &amp;b1, const kIOS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>OBB</type>
      <name>translate</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4cc966313c717afc3fbbd5cdd4394a3f</anchor>
      <arglist>(const OBB &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a91fb89d394f57278956830ed3db6c68d</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBB &amp;b1, const OBB &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7b10b3c454fb949ffbd1f1dde72b1aca</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBB &amp;b1, const OBB &amp;b2, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>obbDisjoint</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a275c05bdcf714dd4189b488fe4236b5b</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>OBBRSS</type>
      <name>translate</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a71954589c25a2e7ac231dd09e1aa33d8</anchor>
      <arglist>(const OBBRSS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad36cc4adba1a6e2a2b2893fd9942dcb3</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5608b06f52162c97edb8894007bc4446</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1c1b5f3100f483a5c68015a28a097f4c</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const OBBRSS &amp;b1, const OBBRSS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>RSS</type>
      <name>translate</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae83ddb2c20b117ef877fb1421091cc40</anchor>
      <arglist>(const RSS &amp;bv, const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a380132ed66f9e8e5af44aa30a6c62e96</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2, Vec3f *P=NULL, Vec3f *Q=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overlap</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab1ca3671f9872744004595055f28d62e</anchor>
      <arglist>(const Matrix3f &amp;R0, const Vec3f &amp;T0, const RSS &amp;b1, const RSS &amp;b2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1cc4eb5503fb7ac3a4b5db238ae71ac8</anchor>
      <arglist>(Vec3f *ps, int n, BV &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; OBB &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa9ed83cdc3868397130a4100141ea0dd</anchor>
      <arglist>(Vec3f *ps, int n, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; RSS &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a47a14e9897e4f4a8e49f107a576cbb03</anchor>
      <arglist>(Vec3f *ps, int n, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; kIOS &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a9294ea4fd13f33b09bc30a098ed480de</anchor>
      <arglist>(Vec3f *ps, int n, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fit&lt; OBBRSS &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>acdcb1c3b31375ed5b4f97ca71536eda7</anchor>
      <arglist>(Vec3f *ps, int n, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateFrontList</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abade69051ecc020594631afbab6224c7</anchor>
      <arglist>(BVHFrontList *front_list, int b1, int b2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BVHExpand</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa43fc5b82f89c8fc8d515d5f247b73ec</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Variance3f *ucs, FCL_REAL r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BVHExpand</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af4bbc7521fb5426d1dd81d08c5366467</anchor>
      <arglist>(BVHModel&lt; OBB &gt; &amp;model, const Variance3f *ucs, FCL_REAL r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BVHExpand</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>acc0ba590fc375ba2ccc859054ee2ceb8</anchor>
      <arglist>(BVHModel&lt; RSS &gt; &amp;model, const Variance3f *ucs, FCL_REAL r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCovariance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad55c59047deea18a96d96cadd9f6cab1</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, Matrix3f &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRadiusAndOriginAndRectangleSize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a857bcfab0cc976411741f03670c8d992</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, Vec3f axis[3], Vec3f &amp;origin, FCL_REAL l[2], FCL_REAL &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getExtentAndCenter</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa4df77020e03756774c8825989e5abc3</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, Vec3f axis[3], Vec3f &amp;center, Vec3f &amp;extent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>circumCircleComputation</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6703a1a1309c383fcd59cd16d4440dba</anchor>
      <arglist>(const Vec3f &amp;a, const Vec3f &amp;b, const Vec3f &amp;c, Vec3f &amp;center, FCL_REAL &amp;radius)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>maximumDistance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aba4ee9cba6ffe4eb932be7682ea5a88d</anchor>
      <arglist>(Vec3f *ps, Vec3f *ps2, Triangle *ts, unsigned int *indices, int n, const Vec3f &amp;query)</arglist>
    </member>
    <member kind="function">
      <type>Interval</type>
      <name>bound</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af76662bdf034981d8054d884e304b75d</anchor>
      <arglist>(const Interval &amp;i, FCL_REAL v)</arglist>
    </member>
    <member kind="function">
      <type>Interval</type>
      <name>bound</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>acabea682e14802caaebabc1eac20f315</anchor>
      <arglist>(const Interval &amp;i, const Interval &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>IMatrix3</type>
      <name>rotationConstrain</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a09253742e80810fe6cc081605bb33c89</anchor>
      <arglist>(const IMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>IVector3</type>
      <name>bound</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1d1f09a63f6acde781614b038080a372</anchor>
      <arglist>(const IVector3 &amp;i, const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>IVector3</type>
      <name>bound</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a8010c8a3b39db1af989aa3ecadf46742</anchor>
      <arglist>(const IVector3 &amp;i, const IVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>rotationConstrain</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad61b3403eece1154ff68120a59a5416d</anchor>
      <arglist>(const TMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator*</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac441c2f5317ef16191888ebfda6d7638</anchor>
      <arglist>(const Matrix3f &amp;m, const TaylorModel &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator*</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>accd031f2c484ad00cec3da9f3fd65c56</anchor>
      <arglist>(const TaylorModel &amp;a, const Matrix3f &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator*</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ada7d50e0546e7268457429b7337596e7</anchor>
      <arglist>(const TaylorModel &amp;a, const TMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator*</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a488aa1ea3e022433bd80af0a49484cc6</anchor>
      <arglist>(FCL_REAL d, const TMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator+</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a39ee7cc59f6945eb5f626bfd8364a28b</anchor>
      <arglist>(const Matrix3f &amp;m1, const TMatrix3 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>TMatrix3</type>
      <name>operator-</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa5e9e71c41beb9ded8cc348ef182e3a4</anchor>
      <arglist>(const Matrix3f &amp;m1, const TMatrix3 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>TaylorModel</type>
      <name>operator*</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7eb455b9073db707d0562ed8bdd05fb3</anchor>
      <arglist>(FCL_REAL d, const TaylorModel &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>TaylorModel</type>
      <name>operator+</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ace7451e7e840fb2727bf1ed5dfd90f0e</anchor>
      <arglist>(FCL_REAL d, const TaylorModel &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>TaylorModel</type>
      <name>operator-</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a77b5fd75a5dd92664ebd53170d25b85a</anchor>
      <arglist>(FCL_REAL d, const TaylorModel &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateTaylorModelForCosFunc</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>acf26072b6a9925bdb9469c6c2cd2e35f</anchor>
      <arglist>(TaylorModel &amp;tm, FCL_REAL w, FCL_REAL q0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateTaylorModelForSinFunc</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae71d5878c7bfa5aa7da8bdeab60e4590</anchor>
      <arglist>(TaylorModel &amp;tm, FCL_REAL w, FCL_REAL q0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateTaylorModelForLinearFunc</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a82eac4bea7bb3f7ea25437f4c7b60b0d</anchor>
      <arglist>(TaylorModel &amp;tm, FCL_REAL p, FCL_REAL v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateTVector3ForLinearFunc</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>adc957f33eaabc3cc0241419e6ee5faa7</anchor>
      <arglist>(TVector3 &amp;v, const Vec3f &amp;position, const Vec3f &amp;velocity)</arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>operator*</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a53700fb473869db9f488ccf787067616</anchor>
      <arglist>(const Vec3f &amp;v, const TaylorModel &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>operator+</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3310342df5b4f339fea35a68df1cb814</anchor>
      <arglist>(const Vec3f &amp;v1, const TVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>TVector3</type>
      <name>operator-</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab299cf794def8aa5494a016d2c301cac</anchor>
      <arglist>(const Vec3f &amp;v1, const TVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>collide</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a27dce3f8036b99a7e550f4ede80c8bfe</anchor>
      <arglist>(const CollisionObject *o1, const CollisionObject *o2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>collide</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aaa8e9d8730a2bc89b429d6ffee8a5b61</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a87aea28dce744526b9f7ff70d058d0aa</anchor>
      <arglist>(CollisionTraversalNodeBase *node, FCL_REAL &amp;sqrDistLowerBound, BVHFrontList *front_list=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfCollide</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a60f5f230b2949d3ac2eda0c15ed9d2b9</anchor>
      <arglist>(CollisionTraversalNodeBase *node, BVHFrontList *front_list=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4c70f633b482c090cebe40694cf4245a</anchor>
      <arglist>(DistanceTraversalNodeBase *node, BVHFrontList *front_list=NULL, int qsize=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide2</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a55c3928712d722eee3e28a9530ece462</anchor>
      <arglist>(MeshCollisionTraversalNodeOBB *node, BVHFrontList *front_list=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collide2</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a26bbbba4eb2acab6ac49f2a028676d9c</anchor>
      <arglist>(MeshCollisionTraversalNodeRSS *node, BVHFrontList *front_list=NULL)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>continuousCollide</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3770186ae0fd6bf0e676bf47ffe44c32</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1_beg, const Transform3f &amp;tf1_end, const CollisionGeometry *o2, const Transform3f &amp;tf2_beg, const Transform3f &amp;tf2_end, const ContinuousCollisionRequest &amp;request, ContinuousCollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>continuousCollide</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac891eb6c23cbe619acc53e160c29e4e4</anchor>
      <arglist>(const CollisionObject *o1, const Transform3f &amp;tf1_end, const CollisionObject *o2, const Transform3f &amp;tf2_end, const ContinuousCollisionRequest &amp;request, ContinuousCollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>collide</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a77c6c56744d6f144004fcdf610ee4e9a</anchor>
      <arglist>(const ContinuousCollisionObject *o1, const ContinuousCollisionObject *o2, const ContinuousCollisionRequest &amp;request, ContinuousCollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae384014e10430c6573a5aecaf1847793</anchor>
      <arglist>(const CollisionObject *o1, const CollisionObject *o2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>distance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a914a2dabe09a39c4c045b81372e52366</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>TaylorReturnType&lt; Derived::ColsAtCompileTime &gt;::type</type>
      <name>operator*</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a8b32c149572f9cec46468991a2185d88</anchor>
      <arglist>(const FclType&lt; Derived &gt; &amp;v, const TaylorModel &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>conj</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa348fb88a67e89fa9c943968bcdc0f94</anchor>
      <arglist>(const Quaternion3f &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion3f</type>
      <name>inverse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>afb3679e3355abdcc38e0fa41ff49f1c7</anchor>
      <arglist>(const Quaternion3f &amp;q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a87a2ed72e7e4099ecf219348778e405e</anchor>
      <arglist>(std::ostream &amp;o, const Quaternion3f &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Transform3f</type>
      <name>inverse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa3c9f4cadf1f778a94a12cd83124c0d0</anchor>
      <arglist>(const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac14aed68ce5d3bbcbde22d710f024514</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform2</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>afaedd4af922b7edf8ec8614a3c18caac</anchor>
      <arglist>(const Transform3f &amp;tf1, const Transform3f &amp;tf2, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Eigen::FclMatrix&lt; T, 1, _Options &gt;</type>
      <name>normalize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa3f4eb2cb9c9158fe70693572564a556</anchor>
      <arglist>(const Eigen::FclMatrix&lt; T, 1, _Options &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Derived::Scalar</type>
      <name>triple</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1eb74586d87b94532e78b912efbab69f</anchor>
      <arglist>(const FclType&lt; Derived &gt; &amp;x, const FclType&lt; Derived &gt; &amp;y, const FclType&lt; Derived &gt; &amp;z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Eigen::BinaryReturnType&lt; const Derived, const OtherDerived &gt;::Min</type>
      <name>min</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abede411f0f0b89ff3c77e493baf34f49</anchor>
      <arglist>(const FclType&lt; Derived &gt; &amp;x, const FclType&lt; OtherDerived &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Eigen::BinaryReturnType&lt; const Derived, const OtherDerived &gt;::Max</type>
      <name>max</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>adc01efadebd02f9e0f4d5165bfb49353</anchor>
      <arglist>(const FclType&lt; Derived &gt; &amp;x, const FclType&lt; OtherDerived &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Eigen::UnaryReturnType&lt; const Derived &gt;::Abs</type>
      <name>abs</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2dada93ebf4709eafff5f06a3ce03c2d</anchor>
      <arglist>(const FclType&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateCoordinateSystem</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a9067a2383e7d382cefc100120c7df4f0</anchor>
      <arglist>(FclType&lt; Derived &gt; &amp;_w, FclType&lt; Derived &gt; &amp;_u, FclType&lt; Derived &gt; &amp;_v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hat</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad2f949779c2ce891db001dd235cf1e78</anchor>
      <arglist>(Matrix &amp;mat, const Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a20f9c22d88c89315470d9d26b99ae8ac</anchor>
      <arglist>(const Matrix &amp;R1, const Vector &amp;t1, const Matrix &amp;R2, const Vector &amp;t2, Matrix &amp;R, Vector &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eigen</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a079477390e70cbe032cd6b2a929a91e2</anchor>
      <arglist>(const FclType&lt; Matrix &gt; &amp;m, typename Matrix::Scalar dout[3], Vector *vout)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::FclOp&lt; Eigen::Transpose&lt; const typename Eigen::internal::remove_fcl&lt; Derived &gt;::type &gt; &gt;</type>
      <name>transpose</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2a56c94fd9aeaefadc2ead1793d2911b</anchor>
      <arglist>(const FclType&lt; Derived &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::FclMatrix&lt; T, 3, _Options &gt;</type>
      <name>inverse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aca89d4c1fcf37c291a4244d3286b3496</anchor>
      <arglist>(const Eigen::FclMatrix&lt; T, 3, _Options &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Matrix::Scalar</type>
      <name>quadraticForm</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a010df7f480c0f45c023cb963021e973d</anchor>
      <arglist>(const Matrix &amp;R, const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Scaler&lt; N &gt;</type>
      <name>computeScaler</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af78fdd839cd1429b4b8b2806c17f08a7</anchor>
      <arglist>(const std::vector&lt; Item&lt; N &gt; &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Scaler&lt; N &gt;</type>
      <name>computeScaler</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa7704a5a44bbf10de59ca7a3853a7b74</anchor>
      <arglist>(const std::vector&lt; Vecnf&lt; N &gt; &gt; &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af5c3e0ac150be3efafb86284c5e2ebd6</anchor>
      <arglist>(std::ostream &amp;o, const Matrix3f &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hat</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3dd421a56916ca50227d84f0583acf1d</anchor>
      <arglist>(Matrix3fX&lt; T &gt; &amp;mat, const Vec3fX&lt; typename T::vector_type &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relativeTransform</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af74ba4aca086ddb236b8522d5aa50f9e</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;R1, const Vec3fX&lt; typename T::vector_type &gt; &amp;t1, const Matrix3fX&lt; T &gt; &amp;R2, const Vec3fX&lt; typename T::vector_type &gt; &amp;t2, Matrix3fX&lt; T &gt; &amp;R, Vec3fX&lt; typename T::vector_type &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eigen</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab53cb67b8193df66cf5dd9ab4878a29e</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;m, typename T::meta_type dout[3], Vec3fX&lt; typename T::vector_type &gt; vout[3])</arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a645ccae82df2ddc17a53c2b78afade8e</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt;</type>
      <name>transpose</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af7e6fe91017c6ed10cd4b41a44eaeecd</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3fX&lt; T &gt;</type>
      <name>inverse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a89b7da9d186a4dde070b50eca3bb2085</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>T::meta_type</type>
      <name>quadraticForm</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a0add24d672d7604e35baf2b839c7b946</anchor>
      <arglist>(const Matrix3fX&lt; T &gt; &amp;R, const Vec3fX&lt; typename T::vector_type &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a87a2ed72e7e4099ecf219348778e405e</anchor>
      <arglist>(std::ostream &amp;o, const Quaternion3f &amp;q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af5f251d8c729f6f265e5c40e05f32992</anchor>
      <arglist>(std::ostream &amp;o, const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3fX&lt; T &gt;</type>
      <name>normalize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5f6ac3448599cffbfe4bc6262384f45d</anchor>
      <arglist>(const Vec3fX&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T::meta_type</type>
      <name>triple</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a25b0880f9cdceb4032357f4b4d6c70e2</anchor>
      <arglist>(const Vec3fX&lt; T &gt; &amp;x, const Vec3fX&lt; T &gt; &amp;y, const Vec3fX&lt; T &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a8b3eb556cc0c15185193c062eb7c7058</anchor>
      <arglist>(std::ostream &amp;out, const Vec3fX&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3fX&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>afbd25eaa3f4cb3240907f43431838697</anchor>
      <arglist>(const Vec3fX&lt; T &gt; &amp;x, const Vec3fX&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3fX&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af514fed52188cdaf9f79542cbd0b5f2a</anchor>
      <arglist>(const Vec3fX&lt; T &gt; &amp;x, const Vec3fX&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3fX&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa70509a0f6a08a46be14603a8c2ef1bd</anchor>
      <arglist>(const Vec3fX&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateCoordinateSystem</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a9625410ac3be7e54b537941c5fab87af</anchor>
      <arglist>(const Vec3fX&lt; T &gt; &amp;w, Vec3fX&lt; T &gt; &amp;u, Vec3fX&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec3fX&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a9d89af60b09fa47240281569ef01ff49</anchor>
      <arglist>(const typename Vec3fX&lt; T &gt;::U &amp;t, const Vec3fX&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repack</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af40bd7af3c3b1b12aa5f88ac5a5e3cab</anchor>
      <arglist>(const Vec_n&lt; T1, N1 &gt; &amp;input, Vec_n&lt; T2, N2 &gt; &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; T, N &gt;</type>
      <name>operator*</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a63a30cea374364d775413dfee98242d6</anchor>
      <arglist>(T t, const Vec_n&lt; T, N &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec_n&lt; T, M+N &gt;</type>
      <name>combine</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a613c6d49ab1a8a8341d503c4620115b1</anchor>
      <arglist>(const Vec_n&lt; T, N &gt; &amp;v1, const Vec_n&lt; T, M &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5b1177028849a3c66ec2d098f656c649</anchor>
      <arglist>(std::ostream &amp;o, const Vec_n&lt; T, N &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeChildBV</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a781b4e8dc556fa96f93766d16b9ffe69</anchor>
      <arglist>(const AABB &amp;root_bv, unsigned int i, AABB &amp;child_bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5e9ecef9d8e077d35075dd6e4f42e673</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Box &amp;shape, const Transform3f &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>afe7bf996b9a11d8be1bfc29570142102</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Sphere &amp;shape, const Transform3f &amp;pose, unsigned int seg, unsigned int ring)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a91460f08ca50866dbbe457563a9d97db</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Sphere &amp;shape, const Transform3f &amp;pose, unsigned int n_faces_for_unit_sphere)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a363afd7342c7665ed615982d2294f92f</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cylinder &amp;shape, const Transform3f &amp;pose, unsigned int tot, unsigned int h_num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>afddac40cf32b331f2b9e123d1221c30e</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cylinder &amp;shape, const Transform3f &amp;pose, unsigned int tot_for_unit_cylinder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab024ccd9af2c9eb5d71d5d839d413f06</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cone &amp;shape, const Transform3f &amp;pose, unsigned int tot, unsigned int h_num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generateBVHModel</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae9fd921ffeb0efb0cde1c234994983ed</anchor>
      <arglist>(BVHModel&lt; BV &gt; &amp;model, const Cone &amp;shape, const Transform3f &amp;pose, unsigned int tot_for_unit_cone)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3de1a45f6c3e5dddda4a8d28369037b6</anchor>
      <arglist>(const S &amp;s, const Transform3f &amp;tf, BV &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Box &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af000846d91fad2fdaa06ead7bb2231e8</anchor>
      <arglist>(const Box &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Sphere &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7839677c14b4477ca0e282d710993b83</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Capsule &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4066ce32979ab084f5cdc80332b90884</anchor>
      <arglist>(const Capsule &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Cone &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a635f470120fc8f1e8eff71418b228966</anchor>
      <arglist>(const Cone &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Cylinder &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac4a86679f6664d275c7287b4c4c86e76</anchor>
      <arglist>(const Cylinder &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Convex &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a90fe793b44a21f2d69e364d13ed720c6</anchor>
      <arglist>(const Convex &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, TriangleP &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2981fcabd0a93917be8c9743588aff00</anchor>
      <arglist>(const TriangleP &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Halfspace &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a68d2665871daf870ca8494a9ee8ae912</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; AABB, Plane &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab8bc8d5f81efc60bcafddc6a013ef8ca</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, AABB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Box &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a90955fcaedd6498c01a97a4e67f78277</anchor>
      <arglist>(const Box &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Sphere &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6d82eac9c4a153163713d678016a7291</anchor>
      <arglist>(const Sphere &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Capsule &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aeb6bfcad0cf3fe0ab44caccd96c4c5cb</anchor>
      <arglist>(const Capsule &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Cone &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a35d713542992583c682b58ec16a031ee</anchor>
      <arglist>(const Cone &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Cylinder &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aef530c2a973c22344aec02121dc40995</anchor>
      <arglist>(const Cylinder &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Convex &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a743b1c50dc06325f0f89f7b9a559a142</anchor>
      <arglist>(const Convex &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Halfspace &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab2720e977a10b9293f9e76f41d8cb92f</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; RSS, Halfspace &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1aee48a389aa30ad2826bef838c748e2</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBBRSS, Halfspace &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abd624da40b744194a4cb4e25d7717dc9</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; kIOS, Halfspace &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7f4eca0e363cbc211c70be6b7c6cd9b1</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 16 &gt;, Halfspace &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a334f81ab857234db303759d27e1c28ae</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 16 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 18 &gt;, Halfspace &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a62336d45b1607d97109346c4d2b4e379</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 18 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 24 &gt;, Halfspace &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5b0f94161541dd89b6c9c76955072530</anchor>
      <arglist>(const Halfspace &amp;s, const Transform3f &amp;tf, KDOP&lt; 24 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBB, Plane &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a697c4006166ebc99785689f1c11595de</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, OBB &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; RSS, Plane &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac63cff41b2031f6cdc31059e62448f30</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, RSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; OBBRSS, Plane &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae862264914a6260c82654fd726495e5c</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, OBBRSS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; kIOS, Plane &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4fdb4f8dc4304dda5dd53217a8d4c448</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, kIOS &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 16 &gt;, Plane &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a13120223ecfcb607f23788e86a6e33df</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 16 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 18 &gt;, Plane &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aacc726b6135dd264f33001884074d9fe</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 18 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBV&lt; KDOP&lt; 24 &gt;, Plane &gt;</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a800a0306e62900d93b4f6c4a65dd3694</anchor>
      <arglist>(const Plane &amp;s, const Transform3f &amp;tf, KDOP&lt; 24 &gt; &amp;bv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a91f35a61c570dc475db5c3023c4ae9f0</anchor>
      <arglist>(const AABB &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a0203bafc50b15adeef4dd737c1a3ca29</anchor>
      <arglist>(const OBB &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ada6ad3577852a6c80434b54cc7782002</anchor>
      <arglist>(const OBBRSS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a928faab916bbd72c9cdae13be3ee0ec9</anchor>
      <arglist>(const kIOS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a021a20ab65508a0e2d5cf071083d8fc8</anchor>
      <arglist>(const RSS &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5710a1fffeb4090919fb6437af926d82</anchor>
      <arglist>(const KDOP&lt; 16 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a185955f012a82631ede68b9fe0be3f4a</anchor>
      <arglist>(const KDOP&lt; 18 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4afe3ec290f981dae9e17ea16ec8a7b6</anchor>
      <arglist>(const KDOP&lt; 24 &gt; &amp;bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a423c439c23cdb224541357f6f9231879</anchor>
      <arglist>(const AABB &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1e74186e05e92c2392abb24c88455e72</anchor>
      <arglist>(const OBB &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad005b3f4caed84758d68b267181f195b</anchor>
      <arglist>(const OBBRSS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abca2466395aaa3f8ef59f721f669f89b</anchor>
      <arglist>(const kIOS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4315ea17d8114d367929cd215f8d94ab</anchor>
      <arglist>(const RSS &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a8c6a193a2f0770883f61f675f3b80675</anchor>
      <arglist>(const KDOP&lt; 16 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae7064477ba73a5b7e00e6d46198de7ba</anchor>
      <arglist>(const KDOP&lt; 18 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constructBox</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abbdf7492e8e72275de31058abd7247a3</anchor>
      <arglist>(const KDOP&lt; 24 &gt; &amp;bv, const Transform3f &amp;tf_bv, Box &amp;box, Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>Halfspace</type>
      <name>transform</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>afaa2e1ade71bf933334e5929cd7e67c5</anchor>
      <arglist>(const Halfspace &amp;a, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>Plane</type>
      <name>transform</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac68cf9c6bef73c3eea558474677e264f</anchor>
      <arglist>(const Plane &amp;a, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>sse_four_spheres_intersect</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab9b7edf3703230e336331843a8fe1ac9</anchor>
      <arglist>(const Vec3f &amp;o1, FCL_REAL r1, const Vec3f &amp;o2, FCL_REAL r2, const Vec3f &amp;o3, FCL_REAL r3, const Vec3f &amp;o4, FCL_REAL r4, const Vec3f &amp;o5, FCL_REAL r5, const Vec3f &amp;o6, FCL_REAL r6, const Vec3f &amp;o7, FCL_REAL r7, const Vec3f &amp;o8, FCL_REAL r8)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>sse_four_spheres_four_AABBs_intersect</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad3686f480d640e385acf470f2d25d882</anchor>
      <arglist>(const Vec3f &amp;o1, FCL_REAL r1, const Vec3f &amp;o2, FCL_REAL r2, const Vec3f &amp;o3, FCL_REAL r3, const Vec3f &amp;o4, FCL_REAL r4, const Vec3f &amp;min1, const Vec3f &amp;max1, const Vec3f &amp;min2, const Vec3f &amp;max2, const Vec3f &amp;min3, const Vec3f &amp;max3, const Vec3f &amp;min4, const Vec3f &amp;max4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>sse_four_AABBs_intersect</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ade0588bb786915912841048a625bdcb1</anchor>
      <arglist>(const Vec3f &amp;min1, const Vec3f &amp;max1, const Vec3f &amp;min2, const Vec3f &amp;max2, const Vec3f &amp;min3, const Vec3f &amp;max3, const Vec3f &amp;min4, const Vec3f &amp;max4, const Vec3f &amp;min5, const Vec3f &amp;max5, const Vec3f &amp;min6, const Vec3f &amp;max6, const Vec3f &amp;min7, const Vec3f &amp;max7, const Vec3f &amp;min8, const Vec3f &amp;max8)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>four_spheres_intersect_and</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aba6fec78e7e97e4d3fe61821a25a53d4</anchor>
      <arglist>(const Vec3f &amp;o1, FCL_REAL r1, const Vec3f &amp;o2, FCL_REAL r2, const Vec3f &amp;o3, FCL_REAL r3, const Vec3f &amp;o4, FCL_REAL r4, const Vec3f &amp;o5, FCL_REAL r5, const Vec3f &amp;o6, FCL_REAL r6, const Vec3f &amp;o7, FCL_REAL r7, const Vec3f &amp;o8, FCL_REAL r8)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>four_spheres_intersect_or</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab846c0b745d586bcdc38f691ab30f44a</anchor>
      <arglist>(const Vec3f &amp;o1, FCL_REAL r1, const Vec3f &amp;o2, FCL_REAL r2, const Vec3f &amp;o3, FCL_REAL r3, const Vec3f &amp;o4, FCL_REAL r4, const Vec3f &amp;o5, FCL_REAL r5, const Vec3f &amp;o6, FCL_REAL r6, const Vec3f &amp;o7, FCL_REAL r7, const Vec3f &amp;o8, FCL_REAL r8)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>four_spheres_four_AABBs_intersect_and</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>afb61c714e9c318c5d92797a7097291b8</anchor>
      <arglist>(const Vec3f &amp;o1, FCL_REAL r1, const Vec3f &amp;o2, FCL_REAL r2, const Vec3f &amp;o3, FCL_REAL r3, const Vec3f &amp;o4, FCL_REAL r4, const Vec3f &amp;min1, const Vec3f &amp;max1, const Vec3f &amp;min2, const Vec3f &amp;max2, const Vec3f &amp;min3, const Vec3f &amp;max3, const Vec3f &amp;min4, const Vec3f &amp;max4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>four_spheres_four_AABBs_intersect_or</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1440be4765847abe937acc76bcbac6c1</anchor>
      <arglist>(const Vec3f &amp;o1, FCL_REAL r1, const Vec3f &amp;o2, FCL_REAL r2, const Vec3f &amp;o3, FCL_REAL r3, const Vec3f &amp;o4, FCL_REAL r4, const Vec3f &amp;min1, const Vec3f &amp;max1, const Vec3f &amp;min2, const Vec3f &amp;max2, const Vec3f &amp;min3, const Vec3f &amp;max3, const Vec3f &amp;min4, const Vec3f &amp;max4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>four_AABBs_intersect_and</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a4def40570c74b1e0367fa3b1dec03503</anchor>
      <arglist>(const Vec3f &amp;min1, const Vec3f &amp;max1, const Vec3f &amp;min2, const Vec3f &amp;max2, const Vec3f &amp;min3, const Vec3f &amp;max3, const Vec3f &amp;min4, const Vec3f &amp;max4, const Vec3f &amp;min5, const Vec3f &amp;max5, const Vec3f &amp;min6, const Vec3f &amp;max6, const Vec3f &amp;min7, const Vec3f &amp;max7, const Vec3f &amp;min8, const Vec3f &amp;max8)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>four_AABBs_intersect_or</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad444fdbbd1081e0c651f7b0883a4c7fe</anchor>
      <arglist>(const Vec3f &amp;min1, const Vec3f &amp;max1, const Vec3f &amp;min2, const Vec3f &amp;max2, const Vec3f &amp;min3, const Vec3f &amp;max3, const Vec3f &amp;min4, const Vec3f &amp;max4, const Vec3f &amp;min5, const Vec3f &amp;max5, const Vec3f &amp;min6, const Vec3f &amp;max6, const Vec3f &amp;min7, const Vec3f &amp;max7, const Vec3f &amp;min8, const Vec3f &amp;max8)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a95c64c901cb6f88eb8f1750a3a39693b</anchor>
      <arglist>(OcTreeCollisionTraversalNode&lt; NarrowPhaseSolver &gt; &amp;node, const OcTree &amp;model1, const Transform3f &amp;tf1, const OcTree &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abecc8f3c7a74fb248281752df1057821</anchor>
      <arglist>(OcTreeDistanceTraversalNode&lt; NarrowPhaseSolver &gt; &amp;node, const OcTree &amp;model1, const Transform3f &amp;tf1, const OcTree &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a67080379fadfd9c25d38e7ea1abf3a30</anchor>
      <arglist>(ShapeOcTreeCollisionTraversalNode&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const OcTree &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a1f505723cb795ddf80392e80a683edec</anchor>
      <arglist>(OcTreeShapeCollisionTraversalNode&lt; S, NarrowPhaseSolver &gt; &amp;node, const OcTree &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae237616b7df4d8c8ee98326920665189</anchor>
      <arglist>(ShapeOcTreeDistanceTraversalNode&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const OcTree &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3c81924d79340eb18d2575fd1827c631</anchor>
      <arglist>(OcTreeShapeDistanceTraversalNode&lt; S, NarrowPhaseSolver &gt; &amp;node, const OcTree &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a8a08f56435bc4aae04b02f5f709fd7e7</anchor>
      <arglist>(MeshOcTreeCollisionTraversalNode&lt; BV, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; BV &gt; &amp;model1, const Transform3f &amp;tf1, const OcTree &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a80aa9d05e2f6d5e36e8ebc3f05872b9c</anchor>
      <arglist>(OcTreeMeshCollisionTraversalNode&lt; BV, NarrowPhaseSolver &gt; &amp;node, const OcTree &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; BV &gt; &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a058e2b263abb136da7805bd08e824d85</anchor>
      <arglist>(MeshOcTreeDistanceTraversalNode&lt; BV, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; BV &gt; &amp;model1, const Transform3f &amp;tf1, const OcTree &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae758c19a134b952324cd3ccee901008b</anchor>
      <arglist>(OcTreeMeshDistanceTraversalNode&lt; BV, NarrowPhaseSolver &gt; &amp;node, const OcTree &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; BV &gt; &amp;model2, const Transform3f &amp;tf2, const OcTreeSolver&lt; NarrowPhaseSolver &gt; *otsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>acd607b020cf207eab8f10c138617c13a</anchor>
      <arglist>(ShapeCollisionTraversalNode&lt; S1, S2, NarrowPhaseSolver &gt; &amp;node, const S1 &amp;shape1, const Transform3f &amp;tf1, const S2 &amp;shape2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aa865edb51f351bf334de5abaf49eb26b</anchor>
      <arglist>(MeshShapeCollisionTraversalNode&lt; BV, S, NarrowPhaseSolver &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a588a866a35e1c184f67b431a3078bdd9</anchor>
      <arglist>(ShapeMeshCollisionTraversalNode&lt; S, BV, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ab3f5e9ecb6e66b9fcd67cab7cddbe5bf</anchor>
      <arglist>(MeshShapeCollisionTraversalNodeOBB&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; OBB &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad1b5d7b8983d01fba523c93a8bc2a380</anchor>
      <arglist>(MeshShapeCollisionTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a8ffc35029b19cd0acaac3f2135ad185c</anchor>
      <arglist>(MeshShapeCollisionTraversalNodekIOS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; kIOS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5fdc86d927f2b364ccfc40f1bbf141cc</anchor>
      <arglist>(MeshShapeCollisionTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abea460cfebe54203d1954be60a1bb5b2</anchor>
      <arglist>(ShapeMeshCollisionTraversalNodeOBB&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBB &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3624c11d42574422bface52f58c83d4f</anchor>
      <arglist>(ShapeMeshCollisionTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5fa452c35c4e98705c65b40d562a3732</anchor>
      <arglist>(ShapeMeshCollisionTraversalNodekIOS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; kIOS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac2bf8dd51936181b642b18143ee72d18</anchor>
      <arglist>(ShapeMeshCollisionTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a138dceb59bc0f4683725b9744958566d</anchor>
      <arglist>(MeshCollisionTraversalNode&lt; BV &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad69c5d93b0946b5e52c1090d9ff54138</anchor>
      <arglist>(MeshCollisionTraversalNodeOBB &amp;node, const BVHModel&lt; OBB &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBB &gt; &amp;model2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6172ba73edad2b47579add3a42420f13</anchor>
      <arglist>(MeshCollisionTraversalNodeRSS &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a445ae5e14b2677586c98dd9f8dae72d4</anchor>
      <arglist>(MeshCollisionTraversalNodeOBBRSS &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac92845a6978810635a67e97669b60939</anchor>
      <arglist>(MeshCollisionTraversalNodekIOS &amp;node, const BVHModel&lt; kIOS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; kIOS &gt; &amp;model2, const Transform3f &amp;tf2, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7281e9516dfcf575e66dc2ec550ca9f9</anchor>
      <arglist>(ShapeDistanceTraversalNode&lt; S1, S2, NarrowPhaseSolver &gt; &amp;node, const S1 &amp;shape1, const Transform3f &amp;tf1, const S2 &amp;shape2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6d83108ae799336acb750074ac34875c</anchor>
      <arglist>(MeshDistanceTraversalNode&lt; BV &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae7281ec41a16bb015bec266409943bfb</anchor>
      <arglist>(MeshDistanceTraversalNodeRSS &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a9ae6bf2e1917a5ae0d39c7222f4db17b</anchor>
      <arglist>(MeshDistanceTraversalNodekIOS &amp;node, const BVHModel&lt; kIOS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; kIOS &gt; &amp;model2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7e098b423058e0e340eb36e465d1a045</anchor>
      <arglist>(MeshDistanceTraversalNodeOBBRSS &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae6081d28877bbc46eabf2c4e58fa4b69</anchor>
      <arglist>(MeshShapeDistanceTraversalNode&lt; BV, S, NarrowPhaseSolver &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3927dc6c1e9c7b490e7ba408f0457d74</anchor>
      <arglist>(ShapeMeshDistanceTraversalNode&lt; S, BV, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a565a813b61a2cc9625c945ea5cd27fcc</anchor>
      <arglist>(MeshShapeDistanceTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a2c79be90859fd861e8658eac375c4c0b</anchor>
      <arglist>(MeshShapeDistanceTraversalNodekIOS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; kIOS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac1cdb1867ff01f78f183258410ad6a18</anchor>
      <arglist>(MeshShapeDistanceTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5d5a356ca3b158cd12d0a7fb48a36ec7</anchor>
      <arglist>(ShapeMeshDistanceTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6397a9976cdeaaaf862fcbd3be7a6710</anchor>
      <arglist>(ShapeMeshDistanceTraversalNodekIOS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; kIOS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a284c3c2b87a088edd29880eb01eac192</anchor>
      <arglist>(ShapeMeshDistanceTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a0d2be0ab29509878e631b7a133440eb0</anchor>
      <arglist>(MeshContinuousCollisionTraversalNode&lt; BV &gt; &amp;node, const BVHModel&lt; BV &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; BV &gt; &amp;model2, const Transform3f &amp;tf2, const CollisionRequest &amp;request)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a305d357f88e8c3b8225a9788da41a6db</anchor>
      <arglist>(MeshConservativeAdvancementTraversalNode&lt; BV &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, const Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, const Transform3f &amp;tf2, FCL_REAL w=1, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abbbd027912820f1ee7bdbff2cec392cd</anchor>
      <arglist>(MeshConservativeAdvancementTraversalNodeRSS &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, FCL_REAL w=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a30b4586038f9db4d294b2d42c3a03d86</anchor>
      <arglist>(MeshConservativeAdvancementTraversalNodeOBBRSS &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, FCL_REAL w=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a96aa3d9216c77da07046d67fddccabf7</anchor>
      <arglist>(ShapeConservativeAdvancementTraversalNode&lt; S1, S2, NarrowPhaseSolver &gt; &amp;node, const S1 &amp;shape1, const Transform3f &amp;tf1, const S2 &amp;shape2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a694be7695ffd564038f61b09be48d1f5</anchor>
      <arglist>(MeshShapeConservativeAdvancementTraversalNode&lt; BV, S, NarrowPhaseSolver &gt; &amp;node, BVHModel&lt; BV &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, FCL_REAL w=1, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ae8a3fdd8186ea3c140b5650fe642ca9c</anchor>
      <arglist>(MeshShapeConservativeAdvancementTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; RSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, FCL_REAL w=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a5cecee41fb90fc4e4571f4b7fae31ccc</anchor>
      <arglist>(MeshShapeConservativeAdvancementTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const BVHModel&lt; OBBRSS &gt; &amp;model1, const Transform3f &amp;tf1, const S &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, FCL_REAL w=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a82c756df9480d5e756902ba623900f58</anchor>
      <arglist>(ShapeMeshConservativeAdvancementTraversalNode&lt; S, BV, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, BVHModel&lt; BV &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, FCL_REAL w=1, bool use_refit=false, bool refit_bottomup=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a855700003a10bb817a1a1fca63c67ce1</anchor>
      <arglist>(ShapeMeshConservativeAdvancementTraversalNodeRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; RSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, FCL_REAL w=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ac7007887b0110ee81983b34de79f7ca4</anchor>
      <arglist>(ShapeMeshConservativeAdvancementTraversalNodeOBBRSS&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; OBBRSS &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, FCL_REAL w=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collisionRecurse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7082c4c49ecd3be15a18f6dee37fbd67</anchor>
      <arglist>(CollisionTraversalNodeBase *node, int b1, int b2, BVHFrontList *front_list, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collisionRecurse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a12b3f73ae31f3bdc69629d7ea125b330</anchor>
      <arglist>(MeshCollisionTraversalNodeOBB *node, int b1, int b2, const Matrix3f &amp;R, const Vec3f &amp;T, BVHFrontList *front_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collisionRecurse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a940ad8297b2c6a5db2c0bed9b8799e04</anchor>
      <arglist>(MeshCollisionTraversalNodeRSS *node, int b1, int b2, const Matrix3f &amp;R, const Vec3f &amp;T, BVHFrontList *front_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfCollisionRecurse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a6cdb9900b6817670263ddb863a7d7c71</anchor>
      <arglist>(CollisionTraversalNodeBase *node, int b, BVHFrontList *front_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distanceRecurse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>abf6fa798bb3ed06efd235533cd2eb55f</anchor>
      <arglist>(DistanceTraversalNodeBase *node, int b1, int b2, BVHFrontList *front_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>distanceQueueRecurse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a51482db3ea32b61e68253cc25584f84d</anchor>
      <arglist>(DistanceTraversalNodeBase *node, int b1, int b2, BVHFrontList *front_list, int qsize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>propagateBVHFrontListCollisionRecurse</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7da1836e80129377c7f98e6ff54a6440</anchor>
      <arglist>(CollisionTraversalNodeBase *node, BVHFrontList *front_list, FCL_REAL &amp;sqrDistLowerBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>obbDisjointAndLowerBoundDistance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a3d6edf7015d3d5d06d66165daa045875</anchor>
      <arglist>(const Matrix3f &amp;B, const Vec3f &amp;T, const Vec3f &amp;a, const Vec3f &amp;b, FCL_REAL &amp;squaredLowerBoundDistance)</arglist>
    </member>
    <member kind="function">
      <type>FCL_REAL</type>
      <name>ShapeShapeDistance</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a7204073b3c765d0571103f199a3cef41</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>ShapeShapeCollide</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>af6272db36bc7d7e1cca43ccec93c1587</anchor>
      <arglist>(const CollisionGeometry *o1, const Transform3f &amp;tf1, const CollisionGeometry *o2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const CollisionRequest &amp;request, CollisionResult &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>fcl::details</name>
    <filename>a00362.html</filename>
    <namespace>fcl::details::internal</namespace>
    <class kind="struct">fcl::details::eigen_m3</class>
    <class kind="struct">fcl::details::eigen_v3</class>
    <class kind="struct">fcl::details::eigen_wrapper_m3</class>
    <class kind="struct">fcl::details::eigen_wrapper_v3</class>
    <class kind="struct">fcl::details::eigen_wrapper_v4</class>
    <class kind="struct">fcl::details::EPA</class>
    <class kind="struct">fcl::details::GJK</class>
    <class kind="class">fcl::details::GJKInitializer</class>
    <class kind="class">fcl::details::GJKInitializer&lt; Box &gt;</class>
    <class kind="class">fcl::details::GJKInitializer&lt; Capsule &gt;</class>
    <class kind="class">fcl::details::GJKInitializer&lt; Cone &gt;</class>
    <class kind="class">fcl::details::GJKInitializer&lt; Convex &gt;</class>
    <class kind="class">fcl::details::GJKInitializer&lt; Cylinder &gt;</class>
    <class kind="class">fcl::details::GJKInitializer&lt; Sphere &gt;</class>
    <class kind="struct">fcl::details::Matrix3Data</class>
    <class kind="struct">fcl::details::MinkowskiDiff</class>
    <class kind="struct">fcl::details::sse_meta_d4</class>
    <class kind="struct">fcl::details::sse_meta_f12</class>
    <class kind="struct">fcl::details::sse_meta_f16</class>
    <class kind="struct">fcl::details::sse_meta_f4</class>
    <class kind="struct">fcl::details::Vec3Data</class>
    <member kind="typedef">
      <type>void(*</type>
      <name>GJKSupportFunction</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a17fdf2ac049e66548b58b0deb38bd40a</anchor>
      <arglist>)(const void *obj, const ccd_vec3_t *dir_, ccd_vec3_t *v)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>GJKCenterFunction</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aaace8c7210be21506a5b4fd287fe2de1</anchor>
      <arglist>)(const void *obj, ccd_vec3_t *c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_wrapper_v3&lt; T &gt;</type>
      <name>cross_prod</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a2c3b56a3d8831c6ab108bb54e86e66cf</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;l, const eigen_wrapper_v3&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>dot_prod3</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a121b72f343efafdaf118c797e62b25fe</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;l, const eigen_wrapper_v3&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_wrapper_v3&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a057c9d54caefcb7b4899083fa8e31f47</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;x, const eigen_wrapper_v3&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_wrapper_v3&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>afa1548e8965f6fff3afec46422f7df0a</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;x, const eigen_wrapper_v3&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_wrapper_v3&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a5765e7f82cf732975f7f8c5f5b97916d</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>equal</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a79e65a671e1cf19a97e80b767e9d163b</anchor>
      <arglist>(const eigen_wrapper_v3&lt; T &gt; &amp;x, const eigen_wrapper_v3&lt; T &gt; &amp;y, T epsilon)</arglist>
    </member>
    <member kind="function">
      <type>struct fcl::details::eigen_wrapper_v4</type>
      <name>__attribute__</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a33d5f88dbc38695cd6063ac31740a76d</anchor>
      <arglist>((aligned))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_wrapper_v4&lt; T &gt;</type>
      <name>cross_prod</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a6c32afee8c68595ae430691640cbe872</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;l, const eigen_wrapper_v4&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>dot_prod3</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ac71736a745d97222481f9032e70d6c50</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;l, const eigen_wrapper_v4&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_wrapper_v4&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a5b15b06cd39ee7c1927f5542a7fded73</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;x, const eigen_wrapper_v4&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_wrapper_v4&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a1ef16a4c661c4f24a0ec12185bd8f9ff</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;x, const eigen_wrapper_v4&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_wrapper_v4&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>acc64d54900e398c5b570a2e9f74a5724</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>equal</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a60059275e4bb616f86b68676d0885ab5</anchor>
      <arglist>(const eigen_wrapper_v4&lt; T &gt; &amp;x, const eigen_wrapper_v4&lt; T &gt; &amp;y, T epsilon)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_v3&lt; T &gt;</type>
      <name>cross_prod</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a005b3e425aa8b50c784d392d25973acd</anchor>
      <arglist>(const eigen_v3&lt; T &gt; &amp;l, const eigen_v3&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>dot_prod3</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a931da0da9dc02e96aa003a29b91bd88d</anchor>
      <arglist>(const eigen_v3&lt; T &gt; &amp;l, const eigen_v3&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_v3&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a34b8f37995a200b7393c2f46eba4a48f</anchor>
      <arglist>(const eigen_v3&lt; T &gt; &amp;x, const eigen_v3&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_v3&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a9f219c68cf49d7e0e0728bd937eaf68c</anchor>
      <arglist>(const eigen_v3&lt; T &gt; &amp;x, const eigen_v3&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static eigen_v3&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a8551267ce308a92c656f7a3e4f3e2ce2</anchor>
      <arglist>(const eigen_v3&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>equal</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a5be62a2738ead01c8fc1b86e5fc8760f</anchor>
      <arglist>(const eigen_v3&lt; T &gt; &amp;x, const eigen_v3&lt; T &gt; &amp;y, T epsilon)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ae32664c4a13e5f5e2be9e66a8950dd13</anchor>
      <arglist>(const eigen_wrapper_m3&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt;</type>
      <name>transpose</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a6e2dfdba4162c44751156d60bc6f16ce</anchor>
      <arglist>(const eigen_wrapper_m3&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>eigen_wrapper_m3&lt; T &gt;</type>
      <name>inverse</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a8ac9c40361ef55934ac54bbc6795f971</anchor>
      <arglist>(const eigen_wrapper_m3&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>eigen_m3&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>acc82a72e5075bdf5688479a2f1268f20</anchor>
      <arglist>(const eigen_m3&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>eigen_m3&lt; T &gt;</type>
      <name>transpose</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a8348bd6a95d4cce7682e3238f8e947ad</anchor>
      <arglist>(const eigen_m3&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>eigen_m3&lt; T &gt;</type>
      <name>inverse</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a1570c90a7b3cdb56bc7221b410ad5f77</anchor>
      <arglist>(const eigen_m3&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3Data&lt; T &gt;</type>
      <name>cross_prod</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a3c1f307e209077461101ef6f7965b6d2</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;l, const Vec3Data&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>dot_prod3</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aaac6564fefbdb96e73b0ebeb7aba54d6</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;l, const Vec3Data&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3Data&lt; T &gt;</type>
      <name>min</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a453c5272251814cb0b6903255f1d68f3</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;x, const Vec3Data&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3Data&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a585675f632eb8dffd3724d5603feaf18</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;x, const Vec3Data&lt; T &gt; &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3Data&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a541f25c4116bdaf3d357c8d74dfb9bb3</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>equal</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ae764ebcbf530870e391865be893d4ea2</anchor>
      <arglist>(const Vec3Data&lt; T &gt; &amp;x, const Vec3Data&lt; T &gt; &amp;y, T epsilon)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt;</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a7be9449f48b36a2cd441a718e23e85de</anchor>
      <arglist>(const Matrix3Data&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt;</type>
      <name>transpose</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a45927e83b549281b3dea28d3a53095ac</anchor>
      <arglist>(const Matrix3Data&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3Data&lt; T &gt;</type>
      <name>inverse</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a5a12459c9a746db60d17214eef92267c</anchor>
      <arglist>(const Matrix3Data&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getSupport</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a597dd832b4a930a1f5f2e331e77757aa</anchor>
      <arglist>(const ShapeBase *shape, const Vec3f &amp;dir)</arglist>
    </member>
    <member kind="function">
      <type>GJKSupportFunction</type>
      <name>triGetSupportFunction</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a2f9153abbdc06cc81be8fddfcd8fa295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GJKCenterFunction</type>
      <name>triGetCenterFunction</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a25c74de98dd777fe8a453024b7c4f753</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>triCreateGJKObject</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a02feb75d25ac5ad5667d365481c7dc69</anchor>
      <arglist>(const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>triCreateGJKObject</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a7ccdb025590b45659adf640d870d5599</anchor>
      <arglist>(const Vec3f &amp;P1, const Vec3f &amp;P2, const Vec3f &amp;P3, const Transform3f &amp;tf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>triDeleteGJKObject</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a529d19ddd2880640eea5cd947c61ef81</anchor>
      <arglist>(void *o)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GJKCollide</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a9b76d6a5386ceede44c018808de66dbd</anchor>
      <arglist>(void *obj1, ccd_support_fn supp1, ccd_center_fn cen1, void *obj2, ccd_support_fn supp2, ccd_center_fn cen2, unsigned int max_iterations, FCL_REAL tolerance, Vec3f *contact_points, FCL_REAL *penetration_depth, Vec3f *normal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>GJKDistance</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a286998a94546d55eca05b8631b9c1076</anchor>
      <arglist>(void *obj1, ccd_support_fn supp1, void *obj2, ccd_support_fn supp2, unsigned int max_iterations, FCL_REAL tolerance, FCL_REAL *dist, Vec3f *p1, Vec3f *p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>vec_sel</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a9e9edcf730777b55386cf9794e77f612</anchor>
      <arglist>(__m128 a, __m128 b, __m128 mask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>vec_sel</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aa5f0d4ebd8363d9830d92a36f7e44d69</anchor>
      <arglist>(__m128 a, __m128 b, const unsigned int *mask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>vec_sel</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a94ae49a0c30dae362ea478871546353e</anchor>
      <arglist>(__m128 a, __m128 b, unsigned int mask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>newtonraphson_rsqrt4</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a4a71acef38873fd9ac344167be9310d7</anchor>
      <arglist>(const __m128 v)</arglist>
    </member>
    <member kind="function">
      <type>struct fcl::details::sse_meta_f4</type>
      <name>__attribute__</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aa35e49760613758f60fae7f0c058c28a</anchor>
      <arglist>((aligned(16)))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>cross_prod</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a9d1ddeb4ff3fe15bff94a89c624cda56</anchor>
      <arglist>(__m128 x, __m128 y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f4</type>
      <name>cross_prod</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a58b80431ef0c0bb57638718da3f4deae</anchor>
      <arglist>(const sse_meta_f4 &amp;x, const sse_meta_f4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>cross_prod</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>abc6b9e297581bd72974050d599aa81aa</anchor>
      <arglist>(__m128d x0, __m128d x1, __m128d y0, __m128d y1, __m128d *z0, __m128d *z1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_d4</type>
      <name>cross_prod</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aff025088720e6961b3792e59020fcd0f</anchor>
      <arglist>(const sse_meta_d4 &amp;x, const sse_meta_d4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>dot_prod3</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aa8d9bf100aa6c86aa2295c3aad658ac2</anchor>
      <arglist>(__m128 x, __m128 y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>dot_prod3</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a394aff27fe379a9cb35dba11e4d26446</anchor>
      <arglist>(const sse_meta_f4 &amp;x, const sse_meta_f4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128d</type>
      <name>dot_prod3</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a706076f5775f28f104e85b97b9834771</anchor>
      <arglist>(__m128d x0, __m128d x1, __m128d y0, __m128d y1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dot_prod3</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ac39e85d8190e4219e373cc938a05fb05</anchor>
      <arglist>(const sse_meta_d4 &amp;x, const sse_meta_d4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128</type>
      <name>dot_prod4</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a0da75d98dd23470bb7e480dfb8570d6f</anchor>
      <arglist>(__m128 x, __m128 y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>dot_prod4</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a0bc09712a85485a30187217f7df44c18</anchor>
      <arglist>(const sse_meta_f4 &amp;x, const sse_meta_f4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static __m128d</type>
      <name>dot_prod4</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a06160a737a2b769add369bd66c813295</anchor>
      <arglist>(__m128d x0, __m128d x1, __m128d y0, __m128d y1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>dot_prod4</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ae29cb3bf3654736190b1c00c8453b981</anchor>
      <arglist>(const sse_meta_d4 &amp;x, const sse_meta_d4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f4</type>
      <name>min</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>af0469b0785abf5bf1f4623bb8cb7a40c</anchor>
      <arglist>(const sse_meta_f4 &amp;x, const sse_meta_f4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_d4</type>
      <name>min</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a02e940d0d617c0287385fdf3aa127449</anchor>
      <arglist>(const sse_meta_d4 &amp;x, const sse_meta_d4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f4</type>
      <name>max</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aedd7fdbf580530ab1dda857d823d8357</anchor>
      <arglist>(const sse_meta_f4 &amp;x, const sse_meta_f4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_d4</type>
      <name>max</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>afd7d4a0377ec0ea37980759e925bdf3b</anchor>
      <arglist>(const sse_meta_d4 &amp;x, const sse_meta_d4 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f4</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a54b5148600402806c503f67624c0debd</anchor>
      <arglist>(const sse_meta_f4 &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_d4</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ab187f8f550ea94d7f58d72ca70ed5f84</anchor>
      <arglist>(const sse_meta_d4 &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>equal</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a7a441f560c86f541c34b18b7046280d1</anchor>
      <arglist>(const sse_meta_f4 &amp;x, const sse_meta_f4 &amp;y, float epsilon)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>equal</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>acc6678ec4c8f34f9462a06dc729ea235</anchor>
      <arglist>(const sse_meta_d4 &amp;x, const sse_meta_d4 &amp;y, double epsilon)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f4</type>
      <name>normalize3</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aae04b61ee1579ae52dfddee379889534</anchor>
      <arglist>(const sse_meta_f4 &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f4</type>
      <name>normalize3_approx</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a447c745426c591ea22449f9b7d99033d</anchor>
      <arglist>(const sse_meta_f4 &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transpose</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a71d7eb7b74fc1d0723248b50918c1792</anchor>
      <arglist>(__m128 c0, __m128 c1, __m128 c2, __m128 *r0, __m128 *r1, __m128 *r2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>inverse</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aa78674d692925c7e56ce0e890dac1af5</anchor>
      <arglist>(__m128 c0, __m128 c1, __m128 c2, __m128 *i0, __m128 *i1, __m128 *i2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f12</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a0a76f2096184b39d781fc68333ae9706</anchor>
      <arglist>(const sse_meta_f12 &amp;mat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f12</type>
      <name>transpose</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a346acc136ad725eda72c910820411d8c</anchor>
      <arglist>(const sse_meta_f12 &amp;mat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f12</type>
      <name>inverse</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ab30cb594be7399a75943b6bf37eb55b5</anchor>
      <arglist>(const sse_meta_f12 &amp;mat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transpose</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>af87fb6e8b3a3e93500d1122d2e7d367c</anchor>
      <arglist>(__m128 c0, __m128 c1, __m128 c2, __m128 c3, __m128 *r0, __m128 *r1, __m128 *r2, __m128 *r3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>inverse</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a48245c73ba5ce6e27b4a051bd47629b7</anchor>
      <arglist>(__m128 c0, __m128 c1, __m128 c2, __m128 c3, __m128 *res0, __m128 *res1, __m128 *res2, __m128 *res3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f16</type>
      <name>abs</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>accbf8f533b199dda473e4a8429b5e528</anchor>
      <arglist>(const sse_meta_f16 &amp;mat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f16</type>
      <name>transpose</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ad7d53d3ef835777f5776eb26e61115f4</anchor>
      <arglist>(const sse_meta_f16 &amp;mat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static sse_meta_f16</type>
      <name>inverse</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a3b76971f3941f56d61bbff3fee6ad6a5</anchor>
      <arglist>(const sse_meta_f16 &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>meshShapeConservativeAdvancementOrientedNodeLeafTesting</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ab442cadd1388104e09ac81a8a2e35d09</anchor>
      <arglist>(int b1, int, const BVHModel&lt; BV &gt; *model1, const S &amp;model2, const BV &amp;model2_bv, Vec3f *vertices, Triangle *tri_indices, const Transform3f &amp;tf1, const Transform3f &amp;tf2, const MotionBase *motion1, const MotionBase *motion2, const NarrowPhaseSolver *nsolver, bool enable_statistics, FCL_REAL &amp;min_distance, Vec3f &amp;p1, Vec3f &amp;p2, int &amp;last_tri_id, FCL_REAL &amp;delta_t, int &amp;num_leaf_tests)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>meshShapeConservativeAdvancementOrientedNodeCanStop</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ac276213e30500d04952bffee395317e4</anchor>
      <arglist>(FCL_REAL c, FCL_REAL min_distance, FCL_REAL abs_err, FCL_REAL rel_err, FCL_REAL w, const BVHModel&lt; BV &gt; *model1, const S &amp;model2, const BV &amp;model2_bv, const MotionBase *motion1, const MotionBase *motion2, std::vector&lt; ConservativeAdvancementStackData &gt; &amp;stack, FCL_REAL &amp;delta_t)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getBVAxis</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>aed3bbb173eaddb4c723b9d2e4fb00667</anchor>
      <arglist>(const BV &amp;bv, int i)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getBVAxis&lt; OBBRSS &gt;</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a66cac0316945c461527badbc641bd5e1</anchor>
      <arglist>(const OBBRSS &amp;bv, int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>meshConservativeAdvancementTraversalNodeCanStop</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a2e510fcf3746857f48352fb655a47ad8</anchor>
      <arglist>(FCL_REAL c, FCL_REAL min_distance, FCL_REAL abs_err, FCL_REAL rel_err, FCL_REAL w, const BVHModel&lt; BV &gt; *model1, const BVHModel&lt; BV &gt; *model2, const MotionBase *motion1, const MotionBase *motion2, std::vector&lt; ConservativeAdvancementStackData &gt; &amp;stack, FCL_REAL &amp;delta_t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>setupShapeMeshDistanceOrientedNode</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a06a2102230569411b26298d24486f83d</anchor>
      <arglist>(OrientedNode&lt; S, NarrowPhaseSolver &gt; &amp;node, const S &amp;model1, const Transform3f &amp;tf1, const BVHModel&lt; BV &gt; &amp;model2, const Transform3f &amp;tf2, const NarrowPhaseSolver *nsolver, const DistanceRequest &amp;request, DistanceResult &amp;result)</arglist>
    </member>
    <member kind="variable">
      <type>fcl::details::eigen_v3</type>
      <name>__attribute__</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a7332223d7388d76e64003ee80ee17f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>EPA_MAX_FACES</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ab6cfb7904637934268b62ac58951875a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>EPA_MAX_VERTICES</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ac82a37036b2715dd1889be9320baae31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const FCL_REAL</type>
      <name>EPA_EPS</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a39fd2253d7b6349d08317d369fc3a1b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>EPA_MAX_ITERATIONS</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>ae37686876739c9d38e647d736515eff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const __m128</type>
      <name>xmms_0</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a09401e587be5e2a281d421e3f5f704d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const __m128d</type>
      <name>xmmd_0</name>
      <anchorfile>a00362.html</anchorfile>
      <anchor>a71202332c9733a2927bf32d37b717323</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>fcl::details::internal</name>
    <filename>a00363.html</filename>
    <class kind="struct">fcl::details::internal::assign</class>
    <class kind="struct">fcl::details::internal::assign&lt; Derived, 3 &gt;</class>
    <class kind="struct">fcl::details::internal::assign&lt; Derived, 4 &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>fcl::implementation_array</name>
    <filename>a00364.html</filename>
    <class kind="class">fcl::implementation_array::HierarchyTree</class>
    <class kind="struct">fcl::implementation_array::NodeBase</class>
    <class kind="struct">fcl::implementation_array::nodeBaseLess</class>
    <member kind="function">
      <type>size_t</type>
      <name>select</name>
      <anchorfile>a00364.html</anchorfile>
      <anchor>a4dc827fe3a643430daafdb02a1d1bf62</anchor>
      <arglist>(size_t query, size_t node1, size_t node2, NodeBase&lt; BV &gt; *nodes)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>select</name>
      <anchorfile>a00364.html</anchorfile>
      <anchor>a66446f70c87a0f9d22c0e6ab6a2bdf97</anchor>
      <arglist>(size_t query, size_t node1, size_t node2, NodeBase&lt; AABB &gt; *nodes)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>select</name>
      <anchorfile>a00364.html</anchorfile>
      <anchor>a26ccbb0f86e61e34bfb983169241d14a</anchor>
      <arglist>(const BV &amp;query, size_t node1, size_t node2, NodeBase&lt; BV &gt; *nodes)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>select</name>
      <anchorfile>a00364.html</anchorfile>
      <anchor>a7413c52220f7241a8b74c22896dc7e20</anchor>
      <arglist>(const AABB &amp;query, size_t node1, size_t node2, NodeBase&lt; AABB &gt; *nodes)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>fcl::time</name>
    <filename>a00365.html</filename>
    <member kind="typedef">
      <type>boost::posix_time::ptime</type>
      <name>point</name>
      <anchorfile>a00365.html</anchorfile>
      <anchor>ab46000cca70d12345df86f7c27964665</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::posix_time::time_duration</type>
      <name>duration</name>
      <anchorfile>a00365.html</anchorfile>
      <anchor>a8b63c17893f6f9926458b8f97795a129</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>point</type>
      <name>now</name>
      <anchorfile>a00365.html</anchorfile>
      <anchor>a037d95ec690c5cc7b8f9085fc50cb1d0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>duration</type>
      <name>seconds</name>
      <anchorfile>a00365.html</anchorfile>
      <anchor>aba85b225e95e6d62f3f69178eca207d3</anchor>
      <arglist>(double sec)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>seconds</name>
      <anchorfile>a00365.html</anchorfile>
      <anchor>aeaa57dde955c572afa17ecc98d268d38</anchor>
      <arglist>(const duration &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>fcl::tools</name>
    <filename>a00366.html</filename>
    <class kind="class">fcl::tools::Profiler</class>
  </compound>
  <compound kind="namespace">
    <name>internal</name>
    <filename>a00367.html</filename>
    <class kind="struct">internal::deduce_fcl_type</class>
    <class kind="struct">internal::deduce_fcl_type&lt; Derived, OtherDerived, false &gt;</class>
    <class kind="struct">internal::deduce_fcl_type&lt; Derived, OtherDerived, true &gt;</class>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title></title>
    <filename>index</filename>
    <docanchor file="index" title="Introduction">fcl_introduction</docanchor>
    <docanchor file="index" title="Using fcl">fcl_howto</docanchor>
  </compound>
</tagfile>
